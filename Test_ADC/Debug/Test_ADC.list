
Test_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d388  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800d498  0800d498  0001d498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d974  0800d974  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d974  0800d974  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d974  0800d974  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d974  0800d974  0001d974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d978  0800d978  0001d978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800d97c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d8  2000034c  0800dcc8  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001724  0800dcc8  00021724  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001451e  00000000  00000000  00020375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000360f  00000000  00000000  00034893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00037ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  00039110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd2d  00000000  00000000  0003a1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016235  00000000  00000000  00055efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093804  00000000  00000000  0006c132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff936  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e8c  00000000  00000000  000ff988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000034c 	.word	0x2000034c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d480 	.word	0x0800d480

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000350 	.word	0x20000350
 800014c:	0800d480 	.word	0x0800d480

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance == ADC1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <HAL_ADC_ConvCpltCallback+0x24>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d102      	bne.n	80010e8 <HAL_ADC_ConvCpltCallback+0x18>
  {
	  flag_adc = 1;
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_ADC_ConvCpltCallback+0x28>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
  }
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40012400 	.word	0x40012400
 80010f8:	20000488 	.word	0x20000488

080010fc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim1)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	if(htim1->Instance == TIM1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d107      	bne.n	800111e <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		flag_tim = 1;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001110:	2201      	movs	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
		++second;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3301      	adds	r3, #1
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800111c:	6013      	str	r3, [r2, #0]
	}
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	40012c00 	.word	0x40012c00
 800112c:	20000489 	.word	0x20000489
 8001130:	2000048c 	.word	0x2000048c
 8001134:	00000000 	.word	0x00000000

08001138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	b087      	sub	sp, #28
 800113c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113e:	f001 f801 	bl	8002144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001142:	f000 f955 	bl	80013f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001146:	f000 fad1 	bl	80016ec <MX_GPIO_Init>
  MX_DMA_Init();
 800114a:	f000 fab1 	bl	80016b0 <MX_DMA_Init>
  MX_ADC1_Init();
 800114e:	f000 f9ad 	bl	80014ac <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8001152:	f008 fdd9 	bl	8009d08 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001156:	f000 fa59 	bl	800160c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, ADC_CHANNELS_NUM);
 800115a:	2209      	movs	r2, #9
 800115c:	4992      	ldr	r1, [pc, #584]	; (80013a8 <main+0x270>)
 800115e:	4893      	ldr	r0, [pc, #588]	; (80013ac <main+0x274>)
 8001160:	f001 f92a 	bl	80023b8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 8001164:	4892      	ldr	r0, [pc, #584]	; (80013b0 <main+0x278>)
 8001166:	f004 fb15 	bl	8005794 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(second < 5) {}
 800116a:	bf00      	nop
 800116c:	4b91      	ldr	r3, [pc, #580]	; (80013b4 <main+0x27c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b04      	cmp	r3, #4
 8001172:	d9fb      	bls.n	800116c <main+0x34>
  while (1)
  {
	  if(flag_tim == 1)
 8001174:	4b90      	ldr	r3, [pc, #576]	; (80013b8 <main+0x280>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d15c      	bne.n	8001236 <main+0xfe>
	  {
      	++measurement_number;
 800117c:	4b8f      	ldr	r3, [pc, #572]	; (80013bc <main+0x284>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	4a8e      	ldr	r2, [pc, #568]	; (80013bc <main+0x284>)
 8001184:	6013      	str	r3, [r2, #0]
      	sprintf(transmit_str, "%u \t %.3f V\t %.2f T\t\r\n", measurement_number, average_voltage, temp);
 8001186:	4b8d      	ldr	r3, [pc, #564]	; (80013bc <main+0x284>)
 8001188:	681e      	ldr	r6, [r3, #0]
 800118a:	4b8d      	ldr	r3, [pc, #564]	; (80013c0 <main+0x288>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f94a 	bl	8000428 <__aeabi_f2d>
 8001194:	4604      	mov	r4, r0
 8001196:	460d      	mov	r5, r1
 8001198:	4b8a      	ldr	r3, [pc, #552]	; (80013c4 <main+0x28c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f943 	bl	8000428 <__aeabi_f2d>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011aa:	e9cd 4500 	strd	r4, r5, [sp]
 80011ae:	4632      	mov	r2, r6
 80011b0:	4985      	ldr	r1, [pc, #532]	; (80013c8 <main+0x290>)
 80011b2:	4886      	ldr	r0, [pc, #536]	; (80013cc <main+0x294>)
 80011b4:	f009 feec 	bl	800af90 <siprintf>
      	logging(measurement_number, second, average_voltage, temp);
 80011b8:	4b80      	ldr	r3, [pc, #512]	; (80013bc <main+0x284>)
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	4b7d      	ldr	r3, [pc, #500]	; (80013b4 <main+0x27c>)
 80011be:	6819      	ldr	r1, [r3, #0]
 80011c0:	4b7f      	ldr	r3, [pc, #508]	; (80013c0 <main+0x288>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b7f      	ldr	r3, [pc, #508]	; (80013c4 <main+0x28c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f000 fb3e 	bl	8001848 <logging>
      	if(measurement_number < 10){
 80011cc:	4b7b      	ldr	r3, [pc, #492]	; (80013bc <main+0x284>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b09      	cmp	r3, #9
 80011d2:	d804      	bhi.n	80011de <main+0xa6>
      		CDC_Transmit_FS((uint8_t*)transmit_str, 23);
 80011d4:	2117      	movs	r1, #23
 80011d6:	487d      	ldr	r0, [pc, #500]	; (80013cc <main+0x294>)
 80011d8:	f008 fe6a 	bl	8009eb0 <CDC_Transmit_FS>
 80011dc:	e01e      	b.n	800121c <main+0xe4>
      	} else if (measurement_number >= 10 && measurement_number < 100){
 80011de:	4b77      	ldr	r3, [pc, #476]	; (80013bc <main+0x284>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b09      	cmp	r3, #9
 80011e4:	d908      	bls.n	80011f8 <main+0xc0>
 80011e6:	4b75      	ldr	r3, [pc, #468]	; (80013bc <main+0x284>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b63      	cmp	r3, #99	; 0x63
 80011ec:	d804      	bhi.n	80011f8 <main+0xc0>
      		CDC_Transmit_FS((uint8_t*)transmit_str, 24);
 80011ee:	2118      	movs	r1, #24
 80011f0:	4876      	ldr	r0, [pc, #472]	; (80013cc <main+0x294>)
 80011f2:	f008 fe5d 	bl	8009eb0 <CDC_Transmit_FS>
 80011f6:	e011      	b.n	800121c <main+0xe4>
      	} else if(measurement_number >= 100 && measurement_number < 1000){
 80011f8:	4b70      	ldr	r3, [pc, #448]	; (80013bc <main+0x284>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b63      	cmp	r3, #99	; 0x63
 80011fe:	d909      	bls.n	8001214 <main+0xdc>
 8001200:	4b6e      	ldr	r3, [pc, #440]	; (80013bc <main+0x284>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001208:	d204      	bcs.n	8001214 <main+0xdc>
      		CDC_Transmit_FS((uint8_t*)transmit_str, 25);
 800120a:	2119      	movs	r1, #25
 800120c:	486f      	ldr	r0, [pc, #444]	; (80013cc <main+0x294>)
 800120e:	f008 fe4f 	bl	8009eb0 <CDC_Transmit_FS>
 8001212:	e003      	b.n	800121c <main+0xe4>
      	} else {
      		CDC_Transmit_FS((uint8_t*)transmit_str, 26);
 8001214:	211a      	movs	r1, #26
 8001216:	486d      	ldr	r0, [pc, #436]	; (80013cc <main+0x294>)
 8001218:	f008 fe4a 	bl	8009eb0 <CDC_Transmit_FS>
      	}
      	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, ADC_CHANNELS_NUM);
 800121c:	2209      	movs	r2, #9
 800121e:	4962      	ldr	r1, [pc, #392]	; (80013a8 <main+0x270>)
 8001220:	4862      	ldr	r0, [pc, #392]	; (80013ac <main+0x274>)
 8001222:	f001 f8c9 	bl	80023b8 <HAL_ADC_Start_DMA>
      	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800122a:	4869      	ldr	r0, [pc, #420]	; (80013d0 <main+0x298>)
 800122c:	f002 f846 	bl	80032bc <HAL_GPIO_TogglePin>
      	flag_tim = 0;
 8001230:	4b61      	ldr	r3, [pc, #388]	; (80013b8 <main+0x280>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_adc == 1)
 8001236:	4b67      	ldr	r3, [pc, #412]	; (80013d4 <main+0x29c>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b01      	cmp	r3, #1
 800123c:	f040 8092 	bne.w	8001364 <main+0x22c>
	  {
		  average_voltage = 0;
 8001240:	4b5f      	ldr	r3, [pc, #380]	; (80013c0 <main+0x288>)
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
		  temp = 0;
 8001248:	4b5e      	ldr	r3, [pc, #376]	; (80013c4 <main+0x28c>)
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
		  for (uint8_t i = 0; i < ADC_CHANNELS_NUM; i++)
 8001250:	2300      	movs	r3, #0
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	e075      	b.n	8001342 <main+0x20a>
		  {
			  if(i == 8){
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b08      	cmp	r3, #8
 800125a:	d144      	bne.n	80012e6 <main+0x1ae>
				  temp = ((adcData[i] * 3.3) / 4095);
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	4a52      	ldr	r2, [pc, #328]	; (80013a8 <main+0x270>)
 8001260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f8cd 	bl	8000404 <__aeabi_i2d>
 800126a:	a34b      	add	r3, pc, #300	; (adr r3, 8001398 <main+0x260>)
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	f7ff f932 	bl	80004d8 <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	a348      	add	r3, pc, #288	; (adr r3, 80013a0 <main+0x268>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff fa53 	bl	800072c <__aeabi_ddiv>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	f7ff fbfb 	bl	8000a88 <__aeabi_d2f>
 8001292:	4603      	mov	r3, r0
 8001294:	4a4b      	ldr	r2, [pc, #300]	; (80013c4 <main+0x28c>)
 8001296:	6013      	str	r3, [r2, #0]
				  temp = ((tV_25 - temp) / tSlope) + 25;
 8001298:	4b4a      	ldr	r3, [pc, #296]	; (80013c4 <main+0x28c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	484e      	ldr	r0, [pc, #312]	; (80013d8 <main+0x2a0>)
 80012a0:	f7ff fc46 	bl	8000b30 <__aeabi_fsub>
 80012a4:	4603      	mov	r3, r0
 80012a6:	494d      	ldr	r1, [pc, #308]	; (80013dc <main+0x2a4>)
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fdff 	bl	8000eac <__aeabi_fdiv>
 80012ae:	4603      	mov	r3, r0
 80012b0:	494b      	ldr	r1, [pc, #300]	; (80013e0 <main+0x2a8>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fc3e 	bl	8000b34 <__addsf3>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <main+0x28c>)
 80012be:	601a      	str	r2, [r3, #0]
				  if(temp > 28){
 80012c0:	4b40      	ldr	r3, [pc, #256]	; (80013c4 <main+0x28c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4947      	ldr	r1, [pc, #284]	; (80013e4 <main+0x2ac>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fef8 	bl	80010bc <__aeabi_fcmpgt>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d034      	beq.n	800133c <main+0x204>
					  logging_wrn(measurement_number, second, temp);
 80012d2:	4b3a      	ldr	r3, [pc, #232]	; (80013bc <main+0x284>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a37      	ldr	r2, [pc, #220]	; (80013b4 <main+0x27c>)
 80012d8:	6811      	ldr	r1, [r2, #0]
 80012da:	4a3a      	ldr	r2, [pc, #232]	; (80013c4 <main+0x28c>)
 80012dc:	6812      	ldr	r2, [r2, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fa90 	bl	8001804 <logging_wrn>
 80012e4:	e02a      	b.n	800133c <main+0x204>
				  }
			  } else {
				  average_voltage += ((adcData[i] * 3.3) / 4095);
 80012e6:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <main+0x288>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f89c 	bl	8000428 <__aeabi_f2d>
 80012f0:	4604      	mov	r4, r0
 80012f2:	460d      	mov	r5, r1
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	4a2c      	ldr	r2, [pc, #176]	; (80013a8 <main+0x270>)
 80012f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f881 	bl	8000404 <__aeabi_i2d>
 8001302:	a325      	add	r3, pc, #148	; (adr r3, 8001398 <main+0x260>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	f7ff f8e6 	bl	80004d8 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	a322      	add	r3, pc, #136	; (adr r3, 80013a0 <main+0x268>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	f7ff fa07 	bl	800072c <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4620      	mov	r0, r4
 8001324:	4629      	mov	r1, r5
 8001326:	f7fe ff21 	bl	800016c <__adddf3>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fba9 	bl	8000a88 <__aeabi_d2f>
 8001336:	4603      	mov	r3, r0
 8001338:	4a21      	ldr	r2, [pc, #132]	; (80013c0 <main+0x288>)
 800133a:	6013      	str	r3, [r2, #0]
		  for (uint8_t i = 0; i < ADC_CHANNELS_NUM; i++)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	3301      	adds	r3, #1
 8001340:	71fb      	strb	r3, [r7, #7]
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b08      	cmp	r3, #8
 8001346:	d986      	bls.n	8001256 <main+0x11e>
			  }
		  }
		  average_voltage /= 8;
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <main+0x288>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fdab 	bl	8000eac <__aeabi_fdiv>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <main+0x288>)
 800135c:	601a      	str	r2, [r3, #0]
		  flag_adc = 0;
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <main+0x29c>)
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_receive == 1){
 8001364:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <main+0x2b0>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	f47f af03 	bne.w	8001174 <main+0x3c>

		  switch(command_code)
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <main+0x2b4>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b31      	cmp	r3, #49	; 0x31
 8001374:	d002      	beq.n	800137c <main+0x244>
 8001376:	2b32      	cmp	r3, #50	; 0x32
 8001378:	d006      	beq.n	8001388 <main+0x250>
 800137a:	e008      	b.n	800138e <main+0x256>
		  {
		  case '1':
			  print_log_inf_usb(measurement_number);
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <main+0x284>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fa85 	bl	8001890 <print_log_inf_usb>
			  break;
 8001386:	e002      	b.n	800138e <main+0x256>
		  case '2':
			  print_log_wrn_usb();
 8001388:	f000 fbd2 	bl	8001b30 <print_log_wrn_usb>
			  break;
 800138c:	bf00      	nop
		  }
	      flag_receive = 0;
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <main+0x2b0>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
	  if(flag_tim == 1)
 8001394:	e6ee      	b.n	8001174 <main+0x3c>
 8001396:	bf00      	nop
 8001398:	66666666 	.word	0x66666666
 800139c:	400a6666 	.word	0x400a6666
 80013a0:	00000000 	.word	0x00000000
 80013a4:	40affe00 	.word	0x40affe00
 80013a8:	20000424 	.word	0x20000424
 80013ac:	20000368 	.word	0x20000368
 80013b0:	200003dc 	.word	0x200003dc
 80013b4:	2000048c 	.word	0x2000048c
 80013b8:	20000489 	.word	0x20000489
 80013bc:	20000498 	.word	0x20000498
 80013c0:	20000490 	.word	0x20000490
 80013c4:	20000494 	.word	0x20000494
 80013c8:	0800d498 	.word	0x0800d498
 80013cc:	20000438 	.word	0x20000438
 80013d0:	40011000 	.word	0x40011000
 80013d4:	20000488 	.word	0x20000488
 80013d8:	3fab851f 	.word	0x3fab851f
 80013dc:	3b8ce704 	.word	0x3b8ce704
 80013e0:	41c80000 	.word	0x41c80000
 80013e4:	41e00000 	.word	0x41e00000
 80013e8:	2000049c 	.word	0x2000049c
 80013ec:	2000049d 	.word	0x2000049d

080013f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b094      	sub	sp, #80	; 0x50
 80013f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013fa:	2228      	movs	r2, #40	; 0x28
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f009 f95e 	bl	800a6c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001420:	2301      	movs	r3, #1
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142e:	2301      	movs	r3, #1
 8001430:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001432:	2302      	movs	r3, #2
 8001434:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001436:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800143a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800143c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001440:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001446:	4618      	mov	r0, r3
 8001448:	f003 fcc0 	bl	8004dcc <HAL_RCC_OscConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001452:	f000 fc7f 	bl	8001d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001456:	230f      	movs	r3, #15
 8001458:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001466:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2102      	movs	r1, #2
 8001472:	4618      	mov	r0, r3
 8001474:	f003 ff2c 	bl	80052d0 <HAL_RCC_ClockConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800147e:	f000 fc69 	bl	8001d54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001482:	2312      	movs	r3, #18
 8001484:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800148a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4618      	mov	r0, r3
 8001494:	f004 f878 	bl	8005588 <HAL_RCCEx_PeriphCLKConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800149e:	f000 fc59 	bl	8001d54 <Error_Handler>
  }
}
 80014a2:	bf00      	nop
 80014a4:	3750      	adds	r7, #80	; 0x50
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014bc:	4b51      	ldr	r3, [pc, #324]	; (8001604 <MX_ADC1_Init+0x158>)
 80014be:	4a52      	ldr	r2, [pc, #328]	; (8001608 <MX_ADC1_Init+0x15c>)
 80014c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014c2:	4b50      	ldr	r3, [pc, #320]	; (8001604 <MX_ADC1_Init+0x158>)
 80014c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014ca:	4b4e      	ldr	r3, [pc, #312]	; (8001604 <MX_ADC1_Init+0x158>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014d0:	4b4c      	ldr	r3, [pc, #304]	; (8001604 <MX_ADC1_Init+0x158>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d6:	4b4b      	ldr	r3, [pc, #300]	; (8001604 <MX_ADC1_Init+0x158>)
 80014d8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80014dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014de:	4b49      	ldr	r3, [pc, #292]	; (8001604 <MX_ADC1_Init+0x158>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 9;
 80014e4:	4b47      	ldr	r3, [pc, #284]	; (8001604 <MX_ADC1_Init+0x158>)
 80014e6:	2209      	movs	r2, #9
 80014e8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ea:	4846      	ldr	r0, [pc, #280]	; (8001604 <MX_ADC1_Init+0x158>)
 80014ec:	f000 fe8c 	bl	8002208 <HAL_ADC_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80014f6:	f000 fc2d 	bl	8001d54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014fe:	2301      	movs	r3, #1
 8001500:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001502:	2304      	movs	r3, #4
 8001504:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	4619      	mov	r1, r3
 800150a:	483e      	ldr	r0, [pc, #248]	; (8001604 <MX_ADC1_Init+0x158>)
 800150c:	f001 f844 	bl	8002598 <HAL_ADC_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001516:	f000 fc1d 	bl	8001d54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800151a:	2301      	movs	r3, #1
 800151c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800151e:	2302      	movs	r3, #2
 8001520:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	4619      	mov	r1, r3
 8001526:	4837      	ldr	r0, [pc, #220]	; (8001604 <MX_ADC1_Init+0x158>)
 8001528:	f001 f836 	bl	8002598 <HAL_ADC_ConfigChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001532:	f000 fc0f 	bl	8001d54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001536:	2302      	movs	r3, #2
 8001538:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800153a:	2303      	movs	r3, #3
 800153c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	4619      	mov	r1, r3
 8001542:	4830      	ldr	r0, [pc, #192]	; (8001604 <MX_ADC1_Init+0x158>)
 8001544:	f001 f828 	bl	8002598 <HAL_ADC_ConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800154e:	f000 fc01 	bl	8001d54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001552:	2303      	movs	r3, #3
 8001554:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001556:	2304      	movs	r3, #4
 8001558:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4829      	ldr	r0, [pc, #164]	; (8001604 <MX_ADC1_Init+0x158>)
 8001560:	f001 f81a 	bl	8002598 <HAL_ADC_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800156a:	f000 fbf3 	bl	8001d54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800156e:	2304      	movs	r3, #4
 8001570:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001572:	2305      	movs	r3, #5
 8001574:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	4619      	mov	r1, r3
 800157a:	4822      	ldr	r0, [pc, #136]	; (8001604 <MX_ADC1_Init+0x158>)
 800157c:	f001 f80c 	bl	8002598 <HAL_ADC_ConfigChannel>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001586:	f000 fbe5 	bl	8001d54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800158a:	2305      	movs	r3, #5
 800158c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800158e:	2306      	movs	r3, #6
 8001590:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	4619      	mov	r1, r3
 8001596:	481b      	ldr	r0, [pc, #108]	; (8001604 <MX_ADC1_Init+0x158>)
 8001598:	f000 fffe 	bl	8002598 <HAL_ADC_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80015a2:	f000 fbd7 	bl	8001d54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80015a6:	2306      	movs	r3, #6
 80015a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80015aa:	2307      	movs	r3, #7
 80015ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	4814      	ldr	r0, [pc, #80]	; (8001604 <MX_ADC1_Init+0x158>)
 80015b4:	f000 fff0 	bl	8002598 <HAL_ADC_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80015be:	f000 fbc9 	bl	8001d54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80015c2:	2307      	movs	r3, #7
 80015c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80015c6:	2308      	movs	r3, #8
 80015c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <MX_ADC1_Init+0x158>)
 80015d0:	f000 ffe2 	bl	8002598 <HAL_ADC_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80015da:	f000 fbbb 	bl	8001d54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80015de:	2310      	movs	r3, #16
 80015e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80015e2:	2309      	movs	r3, #9
 80015e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	4619      	mov	r1, r3
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <MX_ADC1_Init+0x158>)
 80015ec:	f000 ffd4 	bl	8002598 <HAL_ADC_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80015f6:	f000 fbad 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000368 	.word	0x20000368
 8001608:	40012400 	.word	0x40012400

0800160c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	f107 0308 	add.w	r3, r7, #8
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	463b      	mov	r3, r7
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_TIM1_Init+0x9c>)
 800162a:	4a20      	ldr	r2, [pc, #128]	; (80016ac <MX_TIM1_Init+0xa0>)
 800162c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <MX_TIM1_Init+0x9c>)
 8001630:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001634:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <MX_TIM1_Init+0x9c>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <MX_TIM1_Init+0x9c>)
 800163e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001642:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001644:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <MX_TIM1_Init+0x9c>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <MX_TIM1_Init+0x9c>)
 800164c:	2200      	movs	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001650:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <MX_TIM1_Init+0x9c>)
 8001652:	2200      	movs	r2, #0
 8001654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001656:	4814      	ldr	r0, [pc, #80]	; (80016a8 <MX_TIM1_Init+0x9c>)
 8001658:	f004 f84c 	bl	80056f4 <HAL_TIM_Base_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001662:	f000 fb77 	bl	8001d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	4619      	mov	r1, r3
 8001672:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_TIM1_Init+0x9c>)
 8001674:	f004 f9e8 	bl	8005a48 <HAL_TIM_ConfigClockSource>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800167e:	f000 fb69 	bl	8001d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800168a:	463b      	mov	r3, r7
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <MX_TIM1_Init+0x9c>)
 8001690:	f004 fbbe 	bl	8005e10 <HAL_TIMEx_MasterConfigSynchronization>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800169a:	f000 fb5b 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200003dc 	.word	0x200003dc
 80016ac:	40012c00 	.word	0x40012c00

080016b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_DMA_Init+0x38>)
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <MX_DMA_Init+0x38>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6153      	str	r3, [r2, #20]
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_DMA_Init+0x38>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	200b      	movs	r0, #11
 80016d4:	f001 fa31 	bl	8002b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016d8:	200b      	movs	r0, #11
 80016da:	f001 fa4a 	bl	8002b72 <HAL_NVIC_EnableIRQ>

}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000

080016ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <MX_GPIO_Init+0x90>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a1d      	ldr	r2, [pc, #116]	; (800177c <MX_GPIO_Init+0x90>)
 8001706:	f043 0310 	orr.w	r3, r3, #16
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <MX_GPIO_Init+0x90>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0310 	and.w	r3, r3, #16
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <MX_GPIO_Init+0x90>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a17      	ldr	r2, [pc, #92]	; (800177c <MX_GPIO_Init+0x90>)
 800171e:	f043 0320 	orr.w	r3, r3, #32
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <MX_GPIO_Init+0x90>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0320 	and.w	r3, r3, #32
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <MX_GPIO_Init+0x90>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a11      	ldr	r2, [pc, #68]	; (800177c <MX_GPIO_Init+0x90>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_GPIO_Init+0x90>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800174e:	480c      	ldr	r0, [pc, #48]	; (8001780 <MX_GPIO_Init+0x94>)
 8001750:	f001 fd9c 	bl	800328c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2302      	movs	r3, #2
 8001764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001766:	f107 0310 	add.w	r3, r7, #16
 800176a:	4619      	mov	r1, r3
 800176c:	4804      	ldr	r0, [pc, #16]	; (8001780 <MX_GPIO_Init+0x94>)
 800176e:	f001 fc09 	bl	8002f84 <HAL_GPIO_Init>

}
 8001772:	bf00      	nop
 8001774:	3720      	adds	r7, #32
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	40011000 	.word	0x40011000

08001784 <array_shift_int>:

/* USER CODE BEGIN 4 */

void array_shift_int(unsigned int arr[]){
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
    for(int i = ARR_LOG - 1; i > 0; --i){
 800178c:	2307      	movs	r3, #7
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	e00f      	b.n	80017b2 <array_shift_int+0x2e>
        arr[i] = arr[i - 1];
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001798:	3b01      	subs	r3, #1
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	441a      	add	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	440b      	add	r3, r1
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	601a      	str	r2, [r3, #0]
    for(int i = ARR_LOG - 1; i > 0; --i){
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	dcec      	bgt.n	8001792 <array_shift_int+0xe>
    }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <array_shift_float>:
void array_shift_float(float arr[]){
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
    for(int i = ARR_LOG - 1; i > 0; --i){
 80017cc:	2307      	movs	r3, #7
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	e00f      	b.n	80017f2 <array_shift_float+0x2e>
        arr[i] = arr[i - 1];
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017d8:	3b01      	subs	r3, #1
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	441a      	add	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	440b      	add	r3, r1
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	601a      	str	r2, [r3, #0]
    for(int i = ARR_LOG - 1; i > 0; --i){
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	dcec      	bgt.n	80017d2 <array_shift_float+0xe>
    }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <logging_wrn>:

void logging_wrn(const unsigned int number_log, const unsigned int second_log, const float temp_log)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
	array_shift_int(arr_number_log_wrn);
 8001810:	480a      	ldr	r0, [pc, #40]	; (800183c <logging_wrn+0x38>)
 8001812:	f7ff ffb7 	bl	8001784 <array_shift_int>
	array_shift_int(arr_second_log_wrn);
 8001816:	480a      	ldr	r0, [pc, #40]	; (8001840 <logging_wrn+0x3c>)
 8001818:	f7ff ffb4 	bl	8001784 <array_shift_int>
	array_shift_float(arr_temp_log_wrn);
 800181c:	4809      	ldr	r0, [pc, #36]	; (8001844 <logging_wrn+0x40>)
 800181e:	f7ff ffd1 	bl	80017c4 <array_shift_float>

	arr_number_log_wrn[0] = number_log;
 8001822:	4a06      	ldr	r2, [pc, #24]	; (800183c <logging_wrn+0x38>)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6013      	str	r3, [r2, #0]
	arr_second_log_wrn[0] = second_log;
 8001828:	4a05      	ldr	r2, [pc, #20]	; (8001840 <logging_wrn+0x3c>)
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	6013      	str	r3, [r2, #0]
	arr_temp_log_wrn[0] = temp_log;
 800182e:	4a05      	ldr	r2, [pc, #20]	; (8001844 <logging_wrn+0x40>)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000520 	.word	0x20000520
 8001840:	20000500 	.word	0x20000500
 8001844:	20000540 	.word	0x20000540

08001848 <logging>:
void logging(const unsigned int number_log, const unsigned int second_log, const float voltage_log, const float temp_log)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]

	array_shift_int(arr_second_log);
 8001856:	480b      	ldr	r0, [pc, #44]	; (8001884 <logging+0x3c>)
 8001858:	f7ff ff94 	bl	8001784 <array_shift_int>
	array_shift_float(arr_voltage_log);
 800185c:	480a      	ldr	r0, [pc, #40]	; (8001888 <logging+0x40>)
 800185e:	f7ff ffb1 	bl	80017c4 <array_shift_float>
	array_shift_float(arr_temp_log);
 8001862:	480a      	ldr	r0, [pc, #40]	; (800188c <logging+0x44>)
 8001864:	f7ff ffae 	bl	80017c4 <array_shift_float>

	arr_second_log[0] = second_log;
 8001868:	4a06      	ldr	r2, [pc, #24]	; (8001884 <logging+0x3c>)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	6013      	str	r3, [r2, #0]
	arr_voltage_log[0] = voltage_log;
 800186e:	4a06      	ldr	r2, [pc, #24]	; (8001888 <logging+0x40>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6013      	str	r3, [r2, #0]
	arr_temp_log[0] = temp_log;
 8001874:	4a05      	ldr	r2, [pc, #20]	; (800188c <logging+0x44>)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	6013      	str	r3, [r2, #0]
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200004a0 	.word	0x200004a0
 8001888:	200004c0 	.word	0x200004c0
 800188c:	200004e0 	.word	0x200004e0

08001890 <print_log_inf_usb>:

void print_log_inf_usb(unsigned int number_log){
 8001890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001894:	b08f      	sub	sp, #60	; 0x3c
 8001896:	af0a      	add	r7, sp, #40	; 0x28
 8001898:	60f8      	str	r0, [r7, #12]

	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 800189a:	4b9a      	ldr	r3, [pc, #616]	; (8001b04 <print_log_inf_usb+0x274>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	60bb      	str	r3, [r7, #8]
			"number: %u\t%u s\t%.2f V\t%.2f T\r\n",
			number_log, arr_second_log[0], arr_voltage_log[0], arr_temp_log[0],
 80018a0:	4b99      	ldr	r3, [pc, #612]	; (8001b08 <print_log_inf_usb+0x278>)
 80018a2:	681b      	ldr	r3, [r3, #0]
	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fdbf 	bl	8000428 <__aeabi_f2d>
 80018aa:	4604      	mov	r4, r0
 80018ac:	460d      	mov	r5, r1
			number_log, arr_second_log[0], arr_voltage_log[0], arr_temp_log[0],
 80018ae:	4b97      	ldr	r3, [pc, #604]	; (8001b0c <print_log_inf_usb+0x27c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fdb8 	bl	8000428 <__aeabi_f2d>
 80018b8:	4680      	mov	r8, r0
 80018ba:	4689      	mov	r9, r1
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1e5e      	subs	r6, r3, #1
 80018c0:	4b90      	ldr	r3, [pc, #576]	; (8001b04 <print_log_inf_usb+0x274>)
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	607a      	str	r2, [r7, #4]
			number_log - 1, arr_second_log[1], arr_voltage_log[1], arr_temp_log[1]);
 80018c6:	4b90      	ldr	r3, [pc, #576]	; (8001b08 <print_log_inf_usb+0x278>)
 80018c8:	685b      	ldr	r3, [r3, #4]
	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fdac 	bl	8000428 <__aeabi_f2d>
 80018d0:	4682      	mov	sl, r0
 80018d2:	468b      	mov	fp, r1
			number_log - 1, arr_second_log[1], arr_voltage_log[1], arr_temp_log[1]);
 80018d4:	4b8d      	ldr	r3, [pc, #564]	; (8001b0c <print_log_inf_usb+0x27c>)
 80018d6:	685b      	ldr	r3, [r3, #4]
	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fda5 	bl	8000428 <__aeabi_f2d>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80018e6:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	9205      	str	r2, [sp, #20]
 80018ee:	9604      	str	r6, [sp, #16]
 80018f0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80018f4:	e9cd 4500 	strd	r4, r5, [sp]
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	4984      	ldr	r1, [pc, #528]	; (8001b10 <print_log_inf_usb+0x280>)
 80018fe:	4885      	ldr	r0, [pc, #532]	; (8001b14 <print_log_inf_usb+0x284>)
 8001900:	f009 fb46 	bl	800af90 <siprintf>
	if(number_log < 10){
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b09      	cmp	r3, #9
 8001908:	d804      	bhi.n	8001914 <print_log_inf_usb+0x84>
		CDC_Transmit_FS((uint8_t*)transmit_str, 61);
 800190a:	213d      	movs	r1, #61	; 0x3d
 800190c:	4881      	ldr	r0, [pc, #516]	; (8001b14 <print_log_inf_usb+0x284>)
 800190e:	f008 facf 	bl	8009eb0 <CDC_Transmit_FS>
 8001912:	e00e      	b.n	8001932 <print_log_inf_usb+0xa2>
	} else if (number_log >= 10 && number_log < 100){
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b09      	cmp	r3, #9
 8001918:	d907      	bls.n	800192a <print_log_inf_usb+0x9a>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2b63      	cmp	r3, #99	; 0x63
 800191e:	d804      	bhi.n	800192a <print_log_inf_usb+0x9a>
		CDC_Transmit_FS((uint8_t*)transmit_str, 63);
 8001920:	213f      	movs	r1, #63	; 0x3f
 8001922:	487c      	ldr	r0, [pc, #496]	; (8001b14 <print_log_inf_usb+0x284>)
 8001924:	f008 fac4 	bl	8009eb0 <CDC_Transmit_FS>
 8001928:	e003      	b.n	8001932 <print_log_inf_usb+0xa2>
	} else {
		CDC_Transmit_FS((uint8_t*)transmit_str, 68);
 800192a:	2144      	movs	r1, #68	; 0x44
 800192c:	4879      	ldr	r0, [pc, #484]	; (8001b14 <print_log_inf_usb+0x284>)
 800192e:	f008 fabf 	bl	8009eb0 <CDC_Transmit_FS>
	}
	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3b02      	subs	r3, #2
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	4b72      	ldr	r3, [pc, #456]	; (8001b04 <print_log_inf_usb+0x274>)
 800193a:	6899      	ldr	r1, [r3, #8]
 800193c:	6079      	str	r1, [r7, #4]
			"number: %u\t%u s\t%.2f V\t%.2f T\r\n",
			number_log - 2, arr_second_log[2], arr_voltage_log[2], arr_temp_log[2],
 800193e:	4b72      	ldr	r3, [pc, #456]	; (8001b08 <print_log_inf_usb+0x278>)
 8001940:	689b      	ldr	r3, [r3, #8]
	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fd70 	bl	8000428 <__aeabi_f2d>
 8001948:	4604      	mov	r4, r0
 800194a:	460d      	mov	r5, r1
			number_log - 2, arr_second_log[2], arr_voltage_log[2], arr_temp_log[2],
 800194c:	4b6f      	ldr	r3, [pc, #444]	; (8001b0c <print_log_inf_usb+0x27c>)
 800194e:	689b      	ldr	r3, [r3, #8]
	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fd69 	bl	8000428 <__aeabi_f2d>
 8001956:	4680      	mov	r8, r0
 8001958:	4689      	mov	r9, r1
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1ede      	subs	r6, r3, #3
 800195e:	4b69      	ldr	r3, [pc, #420]	; (8001b04 <print_log_inf_usb+0x274>)
 8001960:	68d8      	ldr	r0, [r3, #12]
 8001962:	6038      	str	r0, [r7, #0]
			number_log - 3, arr_second_log[3], arr_voltage_log[3], arr_temp_log[3]);
 8001964:	4b68      	ldr	r3, [pc, #416]	; (8001b08 <print_log_inf_usb+0x278>)
 8001966:	68db      	ldr	r3, [r3, #12]
	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fd5d 	bl	8000428 <__aeabi_f2d>
 800196e:	4682      	mov	sl, r0
 8001970:	468b      	mov	fp, r1
			number_log - 3, arr_second_log[3], arr_voltage_log[3], arr_temp_log[3]);
 8001972:	4b66      	ldr	r3, [pc, #408]	; (8001b0c <print_log_inf_usb+0x27c>)
 8001974:	68db      	ldr	r3, [r3, #12]
	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fd56 	bl	8000428 <__aeabi_f2d>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001984:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001988:	6838      	ldr	r0, [r7, #0]
 800198a:	9005      	str	r0, [sp, #20]
 800198c:	9604      	str	r6, [sp, #16]
 800198e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001992:	e9cd 4500 	strd	r4, r5, [sp]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	495d      	ldr	r1, [pc, #372]	; (8001b10 <print_log_inf_usb+0x280>)
 800199c:	485d      	ldr	r0, [pc, #372]	; (8001b14 <print_log_inf_usb+0x284>)
 800199e:	f009 faf7 	bl	800af90 <siprintf>
	if(number_log < 10){
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2b09      	cmp	r3, #9
 80019a6:	d804      	bhi.n	80019b2 <print_log_inf_usb+0x122>
		CDC_Transmit_FS((uint8_t*)transmit_str, 61);
 80019a8:	213d      	movs	r1, #61	; 0x3d
 80019aa:	485a      	ldr	r0, [pc, #360]	; (8001b14 <print_log_inf_usb+0x284>)
 80019ac:	f008 fa80 	bl	8009eb0 <CDC_Transmit_FS>
 80019b0:	e00e      	b.n	80019d0 <print_log_inf_usb+0x140>
	} else if (number_log >= 10 && number_log < 100){
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b09      	cmp	r3, #9
 80019b6:	d907      	bls.n	80019c8 <print_log_inf_usb+0x138>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b63      	cmp	r3, #99	; 0x63
 80019bc:	d804      	bhi.n	80019c8 <print_log_inf_usb+0x138>
		CDC_Transmit_FS((uint8_t*)transmit_str, 63);
 80019be:	213f      	movs	r1, #63	; 0x3f
 80019c0:	4854      	ldr	r0, [pc, #336]	; (8001b14 <print_log_inf_usb+0x284>)
 80019c2:	f008 fa75 	bl	8009eb0 <CDC_Transmit_FS>
 80019c6:	e003      	b.n	80019d0 <print_log_inf_usb+0x140>
	} else {
		CDC_Transmit_FS((uint8_t*)transmit_str, 68);
 80019c8:	2144      	movs	r1, #68	; 0x44
 80019ca:	4852      	ldr	r0, [pc, #328]	; (8001b14 <print_log_inf_usb+0x284>)
 80019cc:	f008 fa70 	bl	8009eb0 <CDC_Transmit_FS>
	}
	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3b04      	subs	r3, #4
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	4b4b      	ldr	r3, [pc, #300]	; (8001b04 <print_log_inf_usb+0x274>)
 80019d8:	6919      	ldr	r1, [r3, #16]
 80019da:	6079      	str	r1, [r7, #4]
			"number: %u\t%u s\t%.2f V\t%.2f T\r\n",
			number_log - 4, arr_second_log[4], arr_voltage_log[4], arr_temp_log[4],
 80019dc:	4b4a      	ldr	r3, [pc, #296]	; (8001b08 <print_log_inf_usb+0x278>)
 80019de:	691b      	ldr	r3, [r3, #16]
	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fd21 	bl	8000428 <__aeabi_f2d>
 80019e6:	4604      	mov	r4, r0
 80019e8:	460d      	mov	r5, r1
			number_log - 4, arr_second_log[4], arr_voltage_log[4], arr_temp_log[4],
 80019ea:	4b48      	ldr	r3, [pc, #288]	; (8001b0c <print_log_inf_usb+0x27c>)
 80019ec:	691b      	ldr	r3, [r3, #16]
	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fd1a 	bl	8000428 <__aeabi_f2d>
 80019f4:	4680      	mov	r8, r0
 80019f6:	4689      	mov	r9, r1
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1f5e      	subs	r6, r3, #5
 80019fc:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <print_log_inf_usb+0x274>)
 80019fe:	6958      	ldr	r0, [r3, #20]
 8001a00:	6038      	str	r0, [r7, #0]
			number_log - 5, arr_second_log[5], arr_voltage_log[5], arr_temp_log[5]);
 8001a02:	4b41      	ldr	r3, [pc, #260]	; (8001b08 <print_log_inf_usb+0x278>)
 8001a04:	695b      	ldr	r3, [r3, #20]
	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fd0e 	bl	8000428 <__aeabi_f2d>
 8001a0c:	4682      	mov	sl, r0
 8001a0e:	468b      	mov	fp, r1
			number_log - 5, arr_second_log[5], arr_voltage_log[5], arr_temp_log[5]);
 8001a10:	4b3e      	ldr	r3, [pc, #248]	; (8001b0c <print_log_inf_usb+0x27c>)
 8001a12:	695b      	ldr	r3, [r3, #20]
	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd07 	bl	8000428 <__aeabi_f2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001a22:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001a26:	6838      	ldr	r0, [r7, #0]
 8001a28:	9005      	str	r0, [sp, #20]
 8001a2a:	9604      	str	r6, [sp, #16]
 8001a2c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001a30:	e9cd 4500 	strd	r4, r5, [sp]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	4935      	ldr	r1, [pc, #212]	; (8001b10 <print_log_inf_usb+0x280>)
 8001a3a:	4836      	ldr	r0, [pc, #216]	; (8001b14 <print_log_inf_usb+0x284>)
 8001a3c:	f009 faa8 	bl	800af90 <siprintf>
	if(number_log < 10){
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b09      	cmp	r3, #9
 8001a44:	d804      	bhi.n	8001a50 <print_log_inf_usb+0x1c0>
		CDC_Transmit_FS((uint8_t*)transmit_str, 61);
 8001a46:	213d      	movs	r1, #61	; 0x3d
 8001a48:	4832      	ldr	r0, [pc, #200]	; (8001b14 <print_log_inf_usb+0x284>)
 8001a4a:	f008 fa31 	bl	8009eb0 <CDC_Transmit_FS>
 8001a4e:	e00e      	b.n	8001a6e <print_log_inf_usb+0x1de>
	} else if (number_log >= 10 && number_log < 100){
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b09      	cmp	r3, #9
 8001a54:	d907      	bls.n	8001a66 <print_log_inf_usb+0x1d6>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b63      	cmp	r3, #99	; 0x63
 8001a5a:	d804      	bhi.n	8001a66 <print_log_inf_usb+0x1d6>
		CDC_Transmit_FS((uint8_t*)transmit_str, 63);
 8001a5c:	213f      	movs	r1, #63	; 0x3f
 8001a5e:	482d      	ldr	r0, [pc, #180]	; (8001b14 <print_log_inf_usb+0x284>)
 8001a60:	f008 fa26 	bl	8009eb0 <CDC_Transmit_FS>
 8001a64:	e003      	b.n	8001a6e <print_log_inf_usb+0x1de>
	} else {
		CDC_Transmit_FS((uint8_t*)transmit_str, 68);
 8001a66:	2144      	movs	r1, #68	; 0x44
 8001a68:	482a      	ldr	r0, [pc, #168]	; (8001b14 <print_log_inf_usb+0x284>)
 8001a6a:	f008 fa21 	bl	8009eb0 <CDC_Transmit_FS>
	}
	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	3b06      	subs	r3, #6
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <print_log_inf_usb+0x274>)
 8001a76:	6999      	ldr	r1, [r3, #24]
 8001a78:	6079      	str	r1, [r7, #4]
			"number: %u\t%u s\t%.2f V\t%.2f T\r\n",
			number_log - 6, arr_second_log[6], arr_voltage_log[6], arr_temp_log[6],
 8001a7a:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <print_log_inf_usb+0x278>)
 8001a7c:	699b      	ldr	r3, [r3, #24]
	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fcd2 	bl	8000428 <__aeabi_f2d>
 8001a84:	4604      	mov	r4, r0
 8001a86:	460d      	mov	r5, r1
			number_log - 6, arr_second_log[6], arr_voltage_log[6], arr_temp_log[6],
 8001a88:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <print_log_inf_usb+0x27c>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fccb 	bl	8000428 <__aeabi_f2d>
 8001a92:	4680      	mov	r8, r0
 8001a94:	4689      	mov	r9, r1
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1fde      	subs	r6, r3, #7
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <print_log_inf_usb+0x274>)
 8001a9c:	69d8      	ldr	r0, [r3, #28]
 8001a9e:	6038      	str	r0, [r7, #0]
			number_log - 7, arr_second_log[7], arr_voltage_log[7], arr_temp_log[7]);
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <print_log_inf_usb+0x278>)
 8001aa2:	69db      	ldr	r3, [r3, #28]
	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fcbf 	bl	8000428 <__aeabi_f2d>
 8001aaa:	4682      	mov	sl, r0
 8001aac:	468b      	mov	fp, r1
			number_log - 7, arr_second_log[7], arr_voltage_log[7], arr_temp_log[7]);
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <print_log_inf_usb+0x27c>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
	sprintf(transmit_str, "number: %u\t%u s\t%.2f V\t%.2f T\r\n"
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fcb8 	bl	8000428 <__aeabi_f2d>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001ac0:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001ac4:	6838      	ldr	r0, [r7, #0]
 8001ac6:	9005      	str	r0, [sp, #20]
 8001ac8:	9604      	str	r6, [sp, #16]
 8001aca:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ace:	e9cd 4500 	strd	r4, r5, [sp]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	490e      	ldr	r1, [pc, #56]	; (8001b10 <print_log_inf_usb+0x280>)
 8001ad8:	480e      	ldr	r0, [pc, #56]	; (8001b14 <print_log_inf_usb+0x284>)
 8001ada:	f009 fa59 	bl	800af90 <siprintf>
	if(number_log < 10){
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2b09      	cmp	r3, #9
 8001ae2:	d804      	bhi.n	8001aee <print_log_inf_usb+0x25e>
		CDC_Transmit_FS((uint8_t*)transmit_str, 61);
 8001ae4:	213d      	movs	r1, #61	; 0x3d
 8001ae6:	480b      	ldr	r0, [pc, #44]	; (8001b14 <print_log_inf_usb+0x284>)
 8001ae8:	f008 f9e2 	bl	8009eb0 <CDC_Transmit_FS>
	} else if (number_log >= 10 && number_log < 100){
		CDC_Transmit_FS((uint8_t*)transmit_str, 63);
	} else {
		CDC_Transmit_FS((uint8_t*)transmit_str, 68);
	}
}
 8001aec:	e018      	b.n	8001b20 <print_log_inf_usb+0x290>
	} else if (number_log >= 10 && number_log < 100){
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2b09      	cmp	r3, #9
 8001af2:	d911      	bls.n	8001b18 <print_log_inf_usb+0x288>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2b63      	cmp	r3, #99	; 0x63
 8001af8:	d80e      	bhi.n	8001b18 <print_log_inf_usb+0x288>
		CDC_Transmit_FS((uint8_t*)transmit_str, 63);
 8001afa:	213f      	movs	r1, #63	; 0x3f
 8001afc:	4805      	ldr	r0, [pc, #20]	; (8001b14 <print_log_inf_usb+0x284>)
 8001afe:	f008 f9d7 	bl	8009eb0 <CDC_Transmit_FS>
}
 8001b02:	e00d      	b.n	8001b20 <print_log_inf_usb+0x290>
 8001b04:	200004a0 	.word	0x200004a0
 8001b08:	200004c0 	.word	0x200004c0
 8001b0c:	200004e0 	.word	0x200004e0
 8001b10:	0800d4b0 	.word	0x0800d4b0
 8001b14:	20000438 	.word	0x20000438
		CDC_Transmit_FS((uint8_t*)transmit_str, 68);
 8001b18:	2144      	movs	r1, #68	; 0x44
 8001b1a:	4804      	ldr	r0, [pc, #16]	; (8001b2c <print_log_inf_usb+0x29c>)
 8001b1c:	f008 f9c8 	bl	8009eb0 <CDC_Transmit_FS>
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000438 	.word	0x20000438

08001b30 <print_log_wrn_usb>:


void print_log_wrn_usb(){
 8001b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b32:	b08b      	sub	sp, #44	; 0x2c
 8001b34:	af06      	add	r7, sp, #24
	sprintf(transmit_str, "number_wrn: %u\t%u s\t%.2f T\r\n"
 8001b36:	4b82      	ldr	r3, [pc, #520]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	4b81      	ldr	r3, [pc, #516]	; (8001d44 <print_log_wrn_usb+0x214>)
 8001b3e:	6819      	ldr	r1, [r3, #0]
 8001b40:	60b9      	str	r1, [r7, #8]
			"number_wrn: %u\t%u s\t%.2f T\r\n",
			arr_number_log_wrn[0], arr_second_log_wrn[0], arr_temp_log_wrn[0],
 8001b42:	4b81      	ldr	r3, [pc, #516]	; (8001d48 <print_log_wrn_usb+0x218>)
 8001b44:	681b      	ldr	r3, [r3, #0]
	sprintf(transmit_str, "number_wrn: %u\t%u s\t%.2f T\r\n"
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fc6e 	bl	8000428 <__aeabi_f2d>
 8001b4c:	4604      	mov	r4, r0
 8001b4e:	460d      	mov	r5, r1
 8001b50:	4b7b      	ldr	r3, [pc, #492]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001b52:	685e      	ldr	r6, [r3, #4]
 8001b54:	4b7b      	ldr	r3, [pc, #492]	; (8001d44 <print_log_wrn_usb+0x214>)
 8001b56:	6858      	ldr	r0, [r3, #4]
 8001b58:	6078      	str	r0, [r7, #4]
			arr_number_log_wrn[1], arr_second_log_wrn[1], arr_temp_log_wrn[1]);
 8001b5a:	4b7b      	ldr	r3, [pc, #492]	; (8001d48 <print_log_wrn_usb+0x218>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
	sprintf(transmit_str, "number_wrn: %u\t%u s\t%.2f T\r\n"
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fc62 	bl	8000428 <__aeabi_f2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	9003      	str	r0, [sp, #12]
 8001b70:	9602      	str	r6, [sp, #8]
 8001b72:	e9cd 4500 	strd	r4, r5, [sp]
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4974      	ldr	r1, [pc, #464]	; (8001d4c <print_log_wrn_usb+0x21c>)
 8001b7c:	4874      	ldr	r0, [pc, #464]	; (8001d50 <print_log_wrn_usb+0x220>)
 8001b7e:	f009 fa07 	bl	800af90 <siprintf>
	if(arr_number_log_wrn[0] < 10){
 8001b82:	4b6f      	ldr	r3, [pc, #444]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b09      	cmp	r3, #9
 8001b88:	d804      	bhi.n	8001b94 <print_log_wrn_usb+0x64>
		CDC_Transmit_FS((uint8_t*)transmit_str, 55);
 8001b8a:	2137      	movs	r1, #55	; 0x37
 8001b8c:	4870      	ldr	r0, [pc, #448]	; (8001d50 <print_log_wrn_usb+0x220>)
 8001b8e:	f008 f98f 	bl	8009eb0 <CDC_Transmit_FS>
 8001b92:	e010      	b.n	8001bb6 <print_log_wrn_usb+0x86>
	} else if (arr_number_log_wrn[0] >= 10 && arr_number_log_wrn[0] < 100){
 8001b94:	4b6a      	ldr	r3, [pc, #424]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b09      	cmp	r3, #9
 8001b9a:	d908      	bls.n	8001bae <print_log_wrn_usb+0x7e>
 8001b9c:	4b68      	ldr	r3, [pc, #416]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b63      	cmp	r3, #99	; 0x63
 8001ba2:	d804      	bhi.n	8001bae <print_log_wrn_usb+0x7e>
		CDC_Transmit_FS((uint8_t*)transmit_str, 57);
 8001ba4:	2139      	movs	r1, #57	; 0x39
 8001ba6:	486a      	ldr	r0, [pc, #424]	; (8001d50 <print_log_wrn_usb+0x220>)
 8001ba8:	f008 f982 	bl	8009eb0 <CDC_Transmit_FS>
 8001bac:	e003      	b.n	8001bb6 <print_log_wrn_usb+0x86>
	} else {
		CDC_Transmit_FS((uint8_t*)transmit_str, 62);
 8001bae:	213e      	movs	r1, #62	; 0x3e
 8001bb0:	4867      	ldr	r0, [pc, #412]	; (8001d50 <print_log_wrn_usb+0x220>)
 8001bb2:	f008 f97d 	bl	8009eb0 <CDC_Transmit_FS>
	}
	sprintf(transmit_str, "number_wrn: %u\t%u s\t%.2f T\r\n"
 8001bb6:	4b62      	ldr	r3, [pc, #392]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	4b61      	ldr	r3, [pc, #388]	; (8001d44 <print_log_wrn_usb+0x214>)
 8001bbe:	6899      	ldr	r1, [r3, #8]
 8001bc0:	60b9      	str	r1, [r7, #8]
			"number_wrn: %u\t%u s\t%.2f T\r\n",
			arr_number_log_wrn[2], arr_second_log_wrn[2], arr_temp_log_wrn[2],
 8001bc2:	4b61      	ldr	r3, [pc, #388]	; (8001d48 <print_log_wrn_usb+0x218>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
	sprintf(transmit_str, "number_wrn: %u\t%u s\t%.2f T\r\n"
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fc2e 	bl	8000428 <__aeabi_f2d>
 8001bcc:	4604      	mov	r4, r0
 8001bce:	460d      	mov	r5, r1
 8001bd0:	4b5b      	ldr	r3, [pc, #364]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001bd2:	68de      	ldr	r6, [r3, #12]
 8001bd4:	4b5b      	ldr	r3, [pc, #364]	; (8001d44 <print_log_wrn_usb+0x214>)
 8001bd6:	68d8      	ldr	r0, [r3, #12]
 8001bd8:	6078      	str	r0, [r7, #4]
			arr_number_log_wrn[3], arr_second_log_wrn[3], arr_temp_log_wrn[3]);
 8001bda:	4b5b      	ldr	r3, [pc, #364]	; (8001d48 <print_log_wrn_usb+0x218>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
	sprintf(transmit_str, "number_wrn: %u\t%u s\t%.2f T\r\n"
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fc22 	bl	8000428 <__aeabi_f2d>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	9003      	str	r0, [sp, #12]
 8001bf0:	9602      	str	r6, [sp, #8]
 8001bf2:	e9cd 4500 	strd	r4, r5, [sp]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4954      	ldr	r1, [pc, #336]	; (8001d4c <print_log_wrn_usb+0x21c>)
 8001bfc:	4854      	ldr	r0, [pc, #336]	; (8001d50 <print_log_wrn_usb+0x220>)
 8001bfe:	f009 f9c7 	bl	800af90 <siprintf>
	if(arr_number_log_wrn[0] < 10){
 8001c02:	4b4f      	ldr	r3, [pc, #316]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b09      	cmp	r3, #9
 8001c08:	d804      	bhi.n	8001c14 <print_log_wrn_usb+0xe4>
		CDC_Transmit_FS((uint8_t*)transmit_str, 55);
 8001c0a:	2137      	movs	r1, #55	; 0x37
 8001c0c:	4850      	ldr	r0, [pc, #320]	; (8001d50 <print_log_wrn_usb+0x220>)
 8001c0e:	f008 f94f 	bl	8009eb0 <CDC_Transmit_FS>
 8001c12:	e010      	b.n	8001c36 <print_log_wrn_usb+0x106>
	} else if (arr_number_log_wrn[0] >= 10 && arr_number_log_wrn[0] < 100){
 8001c14:	4b4a      	ldr	r3, [pc, #296]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b09      	cmp	r3, #9
 8001c1a:	d908      	bls.n	8001c2e <print_log_wrn_usb+0xfe>
 8001c1c:	4b48      	ldr	r3, [pc, #288]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b63      	cmp	r3, #99	; 0x63
 8001c22:	d804      	bhi.n	8001c2e <print_log_wrn_usb+0xfe>
		CDC_Transmit_FS((uint8_t*)transmit_str, 57);
 8001c24:	2139      	movs	r1, #57	; 0x39
 8001c26:	484a      	ldr	r0, [pc, #296]	; (8001d50 <print_log_wrn_usb+0x220>)
 8001c28:	f008 f942 	bl	8009eb0 <CDC_Transmit_FS>
 8001c2c:	e003      	b.n	8001c36 <print_log_wrn_usb+0x106>
	} else {
		CDC_Transmit_FS((uint8_t*)transmit_str, 62);
 8001c2e:	213e      	movs	r1, #62	; 0x3e
 8001c30:	4847      	ldr	r0, [pc, #284]	; (8001d50 <print_log_wrn_usb+0x220>)
 8001c32:	f008 f93d 	bl	8009eb0 <CDC_Transmit_FS>
	}
	sprintf(transmit_str, "number_wrn: %u\t%u s\t%.2f T\r\n"
 8001c36:	4b42      	ldr	r3, [pc, #264]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	4b41      	ldr	r3, [pc, #260]	; (8001d44 <print_log_wrn_usb+0x214>)
 8001c3e:	6919      	ldr	r1, [r3, #16]
 8001c40:	60b9      	str	r1, [r7, #8]
			"number_wrn: %u\t%u s\t%.2f T\r\n",
			arr_number_log_wrn[4], arr_second_log_wrn[4], arr_temp_log_wrn[4],
 8001c42:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <print_log_wrn_usb+0x218>)
 8001c44:	691b      	ldr	r3, [r3, #16]
	sprintf(transmit_str, "number_wrn: %u\t%u s\t%.2f T\r\n"
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fbee 	bl	8000428 <__aeabi_f2d>
 8001c4c:	4604      	mov	r4, r0
 8001c4e:	460d      	mov	r5, r1
 8001c50:	4b3b      	ldr	r3, [pc, #236]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001c52:	695e      	ldr	r6, [r3, #20]
 8001c54:	4b3b      	ldr	r3, [pc, #236]	; (8001d44 <print_log_wrn_usb+0x214>)
 8001c56:	6958      	ldr	r0, [r3, #20]
 8001c58:	6078      	str	r0, [r7, #4]
			arr_number_log_wrn[5], arr_second_log_wrn[5], arr_temp_log_wrn[5]);
 8001c5a:	4b3b      	ldr	r3, [pc, #236]	; (8001d48 <print_log_wrn_usb+0x218>)
 8001c5c:	695b      	ldr	r3, [r3, #20]
	sprintf(transmit_str, "number_wrn: %u\t%u s\t%.2f T\r\n"
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fbe2 	bl	8000428 <__aeabi_f2d>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	9003      	str	r0, [sp, #12]
 8001c70:	9602      	str	r6, [sp, #8]
 8001c72:	e9cd 4500 	strd	r4, r5, [sp]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4934      	ldr	r1, [pc, #208]	; (8001d4c <print_log_wrn_usb+0x21c>)
 8001c7c:	4834      	ldr	r0, [pc, #208]	; (8001d50 <print_log_wrn_usb+0x220>)
 8001c7e:	f009 f987 	bl	800af90 <siprintf>
	if(arr_number_log_wrn[0] < 10){
 8001c82:	4b2f      	ldr	r3, [pc, #188]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b09      	cmp	r3, #9
 8001c88:	d804      	bhi.n	8001c94 <print_log_wrn_usb+0x164>
		CDC_Transmit_FS((uint8_t*)transmit_str, 55);
 8001c8a:	2137      	movs	r1, #55	; 0x37
 8001c8c:	4830      	ldr	r0, [pc, #192]	; (8001d50 <print_log_wrn_usb+0x220>)
 8001c8e:	f008 f90f 	bl	8009eb0 <CDC_Transmit_FS>
 8001c92:	e010      	b.n	8001cb6 <print_log_wrn_usb+0x186>
	} else if (arr_number_log_wrn[0] >= 10 && arr_number_log_wrn[0] < 100){
 8001c94:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b09      	cmp	r3, #9
 8001c9a:	d908      	bls.n	8001cae <print_log_wrn_usb+0x17e>
 8001c9c:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b63      	cmp	r3, #99	; 0x63
 8001ca2:	d804      	bhi.n	8001cae <print_log_wrn_usb+0x17e>
		CDC_Transmit_FS((uint8_t*)transmit_str, 57);
 8001ca4:	2139      	movs	r1, #57	; 0x39
 8001ca6:	482a      	ldr	r0, [pc, #168]	; (8001d50 <print_log_wrn_usb+0x220>)
 8001ca8:	f008 f902 	bl	8009eb0 <CDC_Transmit_FS>
 8001cac:	e003      	b.n	8001cb6 <print_log_wrn_usb+0x186>
	} else {
		CDC_Transmit_FS((uint8_t*)transmit_str, 62);
 8001cae:	213e      	movs	r1, #62	; 0x3e
 8001cb0:	4827      	ldr	r0, [pc, #156]	; (8001d50 <print_log_wrn_usb+0x220>)
 8001cb2:	f008 f8fd 	bl	8009eb0 <CDC_Transmit_FS>
	}
	sprintf(transmit_str, "number_wrn: %u\t%u s\t%.2f T\r\n"
 8001cb6:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <print_log_wrn_usb+0x214>)
 8001cbe:	6999      	ldr	r1, [r3, #24]
 8001cc0:	60b9      	str	r1, [r7, #8]
			"number_wrn: %u\t%u s\t%.2f T\r\n",
			arr_number_log_wrn[6], arr_second_log_wrn[6], arr_temp_log_wrn[6],
 8001cc2:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <print_log_wrn_usb+0x218>)
 8001cc4:	699b      	ldr	r3, [r3, #24]
	sprintf(transmit_str, "number_wrn: %u\t%u s\t%.2f T\r\n"
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fbae 	bl	8000428 <__aeabi_f2d>
 8001ccc:	4604      	mov	r4, r0
 8001cce:	460d      	mov	r5, r1
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001cd2:	69de      	ldr	r6, [r3, #28]
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <print_log_wrn_usb+0x214>)
 8001cd6:	69d8      	ldr	r0, [r3, #28]
 8001cd8:	6078      	str	r0, [r7, #4]
			arr_number_log_wrn[7], arr_second_log_wrn[7], arr_temp_log_wrn[7]);
 8001cda:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <print_log_wrn_usb+0x218>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
	sprintf(transmit_str, "number_wrn: %u\t%u s\t%.2f T\r\n"
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fba2 	bl	8000428 <__aeabi_f2d>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	9003      	str	r0, [sp, #12]
 8001cf0:	9602      	str	r6, [sp, #8]
 8001cf2:	e9cd 4500 	strd	r4, r5, [sp]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4914      	ldr	r1, [pc, #80]	; (8001d4c <print_log_wrn_usb+0x21c>)
 8001cfc:	4814      	ldr	r0, [pc, #80]	; (8001d50 <print_log_wrn_usb+0x220>)
 8001cfe:	f009 f947 	bl	800af90 <siprintf>
	if(arr_number_log_wrn[0] < 10){
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b09      	cmp	r3, #9
 8001d08:	d804      	bhi.n	8001d14 <print_log_wrn_usb+0x1e4>
		CDC_Transmit_FS((uint8_t*)transmit_str, 55);
 8001d0a:	2137      	movs	r1, #55	; 0x37
 8001d0c:	4810      	ldr	r0, [pc, #64]	; (8001d50 <print_log_wrn_usb+0x220>)
 8001d0e:	f008 f8cf 	bl	8009eb0 <CDC_Transmit_FS>
	} else if (arr_number_log_wrn[0] >= 10 && arr_number_log_wrn[0] < 100){
		CDC_Transmit_FS((uint8_t*)transmit_str, 57);
	} else {
		CDC_Transmit_FS((uint8_t*)transmit_str, 62);
	}
}
 8001d12:	e010      	b.n	8001d36 <print_log_wrn_usb+0x206>
	} else if (arr_number_log_wrn[0] >= 10 && arr_number_log_wrn[0] < 100){
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b09      	cmp	r3, #9
 8001d1a:	d908      	bls.n	8001d2e <print_log_wrn_usb+0x1fe>
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <print_log_wrn_usb+0x210>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b63      	cmp	r3, #99	; 0x63
 8001d22:	d804      	bhi.n	8001d2e <print_log_wrn_usb+0x1fe>
		CDC_Transmit_FS((uint8_t*)transmit_str, 57);
 8001d24:	2139      	movs	r1, #57	; 0x39
 8001d26:	480a      	ldr	r0, [pc, #40]	; (8001d50 <print_log_wrn_usb+0x220>)
 8001d28:	f008 f8c2 	bl	8009eb0 <CDC_Transmit_FS>
}
 8001d2c:	e003      	b.n	8001d36 <print_log_wrn_usb+0x206>
		CDC_Transmit_FS((uint8_t*)transmit_str, 62);
 8001d2e:	213e      	movs	r1, #62	; 0x3e
 8001d30:	4807      	ldr	r0, [pc, #28]	; (8001d50 <print_log_wrn_usb+0x220>)
 8001d32:	f008 f8bd 	bl	8009eb0 <CDC_Transmit_FS>
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000520 	.word	0x20000520
 8001d44:	20000500 	.word	0x20000500
 8001d48:	20000540 	.word	0x20000540
 8001d4c:	0800d4f0 	.word	0x0800d4f0
 8001d50:	20000438 	.word	0x20000438

08001d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d58:	b672      	cpsid	i
}
 8001d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <Error_Handler+0x8>
	...

08001d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <HAL_MspInit+0x5c>)
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <HAL_MspInit+0x5c>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6193      	str	r3, [r2, #24]
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_MspInit+0x5c>)
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_MspInit+0x5c>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <HAL_MspInit+0x5c>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	61d3      	str	r3, [r2, #28]
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_MspInit+0x5c>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <HAL_MspInit+0x60>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <HAL_MspInit+0x60>)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010000 	.word	0x40010000

08001dc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0310 	add.w	r3, r7, #16
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a28      	ldr	r2, [pc, #160]	; (8001e80 <HAL_ADC_MspInit+0xbc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d149      	bne.n	8001e78 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_ADC_MspInit+0xc0>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	4a26      	ldr	r2, [pc, #152]	; (8001e84 <HAL_ADC_MspInit+0xc0>)
 8001dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dee:	6193      	str	r3, [r2, #24]
 8001df0:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_ADC_MspInit+0xc0>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_ADC_MspInit+0xc0>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4a20      	ldr	r2, [pc, #128]	; (8001e84 <HAL_ADC_MspInit+0xc0>)
 8001e02:	f043 0304 	orr.w	r3, r3, #4
 8001e06:	6193      	str	r3, [r2, #24]
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <HAL_ADC_MspInit+0xc0>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e14:	23ff      	movs	r3, #255	; 0xff
 8001e16:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	4619      	mov	r1, r3
 8001e22:	4819      	ldr	r0, [pc, #100]	; (8001e88 <HAL_ADC_MspInit+0xc4>)
 8001e24:	f001 f8ae 	bl	8002f84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_ADC_MspInit+0xc8>)
 8001e2a:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <HAL_ADC_MspInit+0xcc>)
 8001e2c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e2e:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HAL_ADC_MspInit+0xc8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e34:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <HAL_ADC_MspInit+0xc8>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e3a:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_ADC_MspInit+0xc8>)
 8001e3c:	2280      	movs	r2, #128	; 0x80
 8001e3e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_ADC_MspInit+0xc8>)
 8001e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_ADC_MspInit+0xc8>)
 8001e4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001e50:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_ADC_MspInit+0xc8>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_ADC_MspInit+0xc8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e5c:	480b      	ldr	r0, [pc, #44]	; (8001e8c <HAL_ADC_MspInit+0xc8>)
 8001e5e:	f000 fea3 	bl	8002ba8 <HAL_DMA_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001e68:	f7ff ff74 	bl	8001d54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <HAL_ADC_MspInit+0xc8>)
 8001e70:	621a      	str	r2, [r3, #32]
 8001e72:	4a06      	ldr	r2, [pc, #24]	; (8001e8c <HAL_ADC_MspInit+0xc8>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e78:	bf00      	nop
 8001e7a:	3720      	adds	r7, #32
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40012400 	.word	0x40012400
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40010800 	.word	0x40010800
 8001e8c:	20000398 	.word	0x20000398
 8001e90:	40020008 	.word	0x40020008

08001e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	; (8001ed8 <HAL_TIM_Base_MspInit+0x44>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d113      	bne.n	8001ece <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <HAL_TIM_Base_MspInit+0x48>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <HAL_TIM_Base_MspInit+0x48>)
 8001eac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eb0:	6193      	str	r3, [r2, #24]
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_TIM_Base_MspInit+0x48>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2019      	movs	r0, #25
 8001ec4:	f000 fe39 	bl	8002b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ec8:	2019      	movs	r0, #25
 8001eca:	f000 fe52 	bl	8002b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40012c00 	.word	0x40012c00
 8001edc:	40021000 	.word	0x40021000

08001ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <NMI_Handler+0x4>

08001ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <HardFault_Handler+0x4>

08001eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <MemManage_Handler+0x4>

08001ef2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <BusFault_Handler+0x4>

08001ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <UsageFault_Handler+0x4>

08001efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr

08001f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f26:	f000 f953 	bl	80021d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <DMA1_Channel1_IRQHandler+0x10>)
 8001f36:	f000 fef1 	bl	8002d1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000398 	.word	0x20000398

08001f44 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001f4a:	f001 faf5 	bl	8003538 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20001204 	.word	0x20001204

08001f58 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <TIM1_UP_IRQHandler+0x10>)
 8001f5e:	f003 fc6b 	bl	8005838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200003dc 	.word	0x200003dc

08001f6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
	return 1;
 8001f70:	2301      	movs	r3, #1
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <_kill>:

int _kill(int pid, int sig)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f84:	f008 fb72 	bl	800a66c <__errno>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2216      	movs	r2, #22
 8001f8c:	601a      	str	r2, [r3, #0]
	return -1;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <_exit>:

void _exit (int status)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fa2:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ffe7 	bl	8001f7a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fac:	e7fe      	b.n	8001fac <_exit+0x12>

08001fae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e00a      	b.n	8001fd6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fc0:	f3af 8000 	nop.w
 8001fc4:	4601      	mov	r1, r0
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	60ba      	str	r2, [r7, #8]
 8001fcc:	b2ca      	uxtb	r2, r1
 8001fce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	dbf0      	blt.n	8001fc0 <_read+0x12>
	}

return len;
 8001fde:	687b      	ldr	r3, [r7, #4]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	e009      	b.n	800200e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	60ba      	str	r2, [r7, #8]
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	3301      	adds	r3, #1
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	429a      	cmp	r2, r3
 8002014:	dbf1      	blt.n	8001ffa <_write+0x12>
	}
	return len;
 8002016:	687b      	ldr	r3, [r7, #4]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <_close>:

int _close(int file)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	return -1;
 8002028:	f04f 33ff 	mov.w	r3, #4294967295
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr

08002036 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002046:	605a      	str	r2, [r3, #4]
	return 0;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <_isatty>:

int _isatty(int file)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	return 1;
 800205c:	2301      	movs	r3, #1
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
	return 0;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002088:	4a14      	ldr	r2, [pc, #80]	; (80020dc <_sbrk+0x5c>)
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <_sbrk+0x60>)
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d102      	bne.n	80020a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <_sbrk+0x64>)
 800209e:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <_sbrk+0x68>)
 80020a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <_sbrk+0x64>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d207      	bcs.n	80020c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b0:	f008 fadc 	bl	800a66c <__errno>
 80020b4:	4603      	mov	r3, r0
 80020b6:	220c      	movs	r2, #12
 80020b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
 80020be:	e009      	b.n	80020d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <_sbrk+0x64>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <_sbrk+0x64>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <_sbrk+0x64>)
 80020d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020d2:	68fb      	ldr	r3, [r7, #12]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20005000 	.word	0x20005000
 80020e0:	00000400 	.word	0x00000400
 80020e4:	20000560 	.word	0x20000560
 80020e8:	20001728 	.word	0x20001728

080020ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020f8:	f7ff fff8 	bl	80020ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020fc:	480b      	ldr	r0, [pc, #44]	; (800212c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020fe:	490c      	ldr	r1, [pc, #48]	; (8002130 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002100:	4a0c      	ldr	r2, [pc, #48]	; (8002134 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002104:	e002      	b.n	800210c <LoopCopyDataInit>

08002106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210a:	3304      	adds	r3, #4

0800210c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800210c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002110:	d3f9      	bcc.n	8002106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002112:	4a09      	ldr	r2, [pc, #36]	; (8002138 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002114:	4c09      	ldr	r4, [pc, #36]	; (800213c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002118:	e001      	b.n	800211e <LoopFillZerobss>

0800211a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800211c:	3204      	adds	r2, #4

0800211e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002120:	d3fb      	bcc.n	800211a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002122:	f008 faa9 	bl	800a678 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002126:	f7ff f807 	bl	8001138 <main>
  bx lr
 800212a:	4770      	bx	lr
  ldr r0, =_sdata
 800212c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002130:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8002134:	0800d97c 	.word	0x0800d97c
  ldr r2, =_sbss
 8002138:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 800213c:	20001724 	.word	0x20001724

08002140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002140:	e7fe      	b.n	8002140 <ADC1_2_IRQHandler>
	...

08002144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_Init+0x28>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a07      	ldr	r2, [pc, #28]	; (800216c <HAL_Init+0x28>)
 800214e:	f043 0310 	orr.w	r3, r3, #16
 8002152:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002154:	2003      	movs	r0, #3
 8002156:	f000 fce5 	bl	8002b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215a:	200f      	movs	r0, #15
 800215c:	f000 f808 	bl	8002170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002160:	f7ff fdfe 	bl	8001d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40022000 	.word	0x40022000

08002170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_InitTick+0x54>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_InitTick+0x58>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002186:	fbb3 f3f1 	udiv	r3, r3, r1
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	4618      	mov	r0, r3
 8002190:	f000 fcfd 	bl	8002b8e <HAL_SYSTICK_Config>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e00e      	b.n	80021bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b0f      	cmp	r3, #15
 80021a2:	d80a      	bhi.n	80021ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a4:	2200      	movs	r2, #0
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	f000 fcc5 	bl	8002b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b0:	4a06      	ldr	r2, [pc, #24]	; (80021cc <HAL_InitTick+0x5c>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e000      	b.n	80021bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000000 	.word	0x20000000
 80021c8:	20000008 	.word	0x20000008
 80021cc:	20000004 	.word	0x20000004

080021d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_IncTick+0x1c>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_IncTick+0x20>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	4a03      	ldr	r2, [pc, #12]	; (80021f0 <HAL_IncTick+0x20>)
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	20000008 	.word	0x20000008
 80021f0:	20000564 	.word	0x20000564

080021f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return uwTick;
 80021f8:	4b02      	ldr	r3, [pc, #8]	; (8002204 <HAL_GetTick+0x10>)
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	20000564 	.word	0x20000564

08002208 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e0be      	b.n	80023a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	2b00      	cmp	r3, #0
 8002236:	d109      	bne.n	800224c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff fdbc 	bl	8001dc4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 faf5 	bl	800283c <ADC_ConversionStop_Disable>
 8002252:	4603      	mov	r3, r0
 8002254:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	2b00      	cmp	r3, #0
 8002260:	f040 8099 	bne.w	8002396 <HAL_ADC_Init+0x18e>
 8002264:	7dfb      	ldrb	r3, [r7, #23]
 8002266:	2b00      	cmp	r3, #0
 8002268:	f040 8095 	bne.w	8002396 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002274:	f023 0302 	bic.w	r3, r3, #2
 8002278:	f043 0202 	orr.w	r2, r3, #2
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002288:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	7b1b      	ldrb	r3, [r3, #12]
 800228e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002290:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	4313      	orrs	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a0:	d003      	beq.n	80022aa <HAL_ADC_Init+0xa2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d102      	bne.n	80022b0 <HAL_ADC_Init+0xa8>
 80022aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ae:	e000      	b.n	80022b2 <HAL_ADC_Init+0xaa>
 80022b0:	2300      	movs	r3, #0
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7d1b      	ldrb	r3, [r3, #20]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d119      	bne.n	80022f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	7b1b      	ldrb	r3, [r3, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d109      	bne.n	80022dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	035a      	lsls	r2, r3, #13
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	e00b      	b.n	80022f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	f043 0220 	orr.w	r2, r3, #32
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	f043 0201 	orr.w	r2, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	430a      	orrs	r2, r1
 8002306:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <HAL_ADC_Init+0x1a8>)
 8002310:	4013      	ands	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	68b9      	ldr	r1, [r7, #8]
 8002318:	430b      	orrs	r3, r1
 800231a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002324:	d003      	beq.n	800232e <HAL_ADC_Init+0x126>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d104      	bne.n	8002338 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	3b01      	subs	r3, #1
 8002334:	051b      	lsls	r3, r3, #20
 8002336:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	430a      	orrs	r2, r1
 800234a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <HAL_ADC_Init+0x1ac>)
 8002354:	4013      	ands	r3, r2
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	429a      	cmp	r2, r3
 800235a:	d10b      	bne.n	8002374 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	f023 0303 	bic.w	r3, r3, #3
 800236a:	f043 0201 	orr.w	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002372:	e018      	b.n	80023a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	f023 0312 	bic.w	r3, r3, #18
 800237c:	f043 0210 	orr.w	r2, r3, #16
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002394:	e007      	b.n	80023a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239a:	f043 0210 	orr.w	r2, r3, #16
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	ffe1f7fd 	.word	0xffe1f7fd
 80023b4:	ff1f0efe 	.word	0xff1f0efe

080023b8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a64      	ldr	r2, [pc, #400]	; (8002560 <HAL_ADC_Start_DMA+0x1a8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d004      	beq.n	80023dc <HAL_ADC_Start_DMA+0x24>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a63      	ldr	r2, [pc, #396]	; (8002564 <HAL_ADC_Start_DMA+0x1ac>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d106      	bne.n	80023ea <HAL_ADC_Start_DMA+0x32>
 80023dc:	4b60      	ldr	r3, [pc, #384]	; (8002560 <HAL_ADC_Start_DMA+0x1a8>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f040 80b3 	bne.w	8002550 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_ADC_Start_DMA+0x40>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e0ae      	b.n	8002556 <HAL_ADC_Start_DMA+0x19e>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f9c1 	bl	8002788 <ADC_Enable>
 8002406:	4603      	mov	r3, r0
 8002408:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800240a:	7dfb      	ldrb	r3, [r7, #23]
 800240c:	2b00      	cmp	r3, #0
 800240e:	f040 809a 	bne.w	8002546 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800241a:	f023 0301 	bic.w	r3, r3, #1
 800241e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a4e      	ldr	r2, [pc, #312]	; (8002564 <HAL_ADC_Start_DMA+0x1ac>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d105      	bne.n	800243c <HAL_ADC_Start_DMA+0x84>
 8002430:	4b4b      	ldr	r3, [pc, #300]	; (8002560 <HAL_ADC_Start_DMA+0x1a8>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d115      	bne.n	8002468 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002452:	2b00      	cmp	r3, #0
 8002454:	d026      	beq.n	80024a4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800245e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002466:	e01d      	b.n	80024a4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a39      	ldr	r2, [pc, #228]	; (8002560 <HAL_ADC_Start_DMA+0x1a8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d004      	beq.n	8002488 <HAL_ADC_Start_DMA+0xd0>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a38      	ldr	r2, [pc, #224]	; (8002564 <HAL_ADC_Start_DMA+0x1ac>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d10d      	bne.n	80024a4 <HAL_ADC_Start_DMA+0xec>
 8002488:	4b35      	ldr	r3, [pc, #212]	; (8002560 <HAL_ADC_Start_DMA+0x1a8>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800249c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d006      	beq.n	80024be <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	f023 0206 	bic.w	r2, r3, #6
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80024bc:	e002      	b.n	80024c4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4a25      	ldr	r2, [pc, #148]	; (8002568 <HAL_ADC_Start_DMA+0x1b0>)
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4a24      	ldr	r2, [pc, #144]	; (800256c <HAL_ADC_Start_DMA+0x1b4>)
 80024da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4a23      	ldr	r2, [pc, #140]	; (8002570 <HAL_ADC_Start_DMA+0x1b8>)
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0202 	mvn.w	r2, #2
 80024ec:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024fc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a18      	ldr	r0, [r3, #32]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	334c      	adds	r3, #76	; 0x4c
 8002508:	4619      	mov	r1, r3
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f000 fba5 	bl	8002c5c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800251c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002520:	d108      	bne.n	8002534 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002530:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002532:	e00f      	b.n	8002554 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002542:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002544:	e006      	b.n	8002554 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800254e:	e001      	b.n	8002554 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002554:	7dfb      	ldrb	r3, [r7, #23]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40012400 	.word	0x40012400
 8002564:	40012800 	.word	0x40012800
 8002568:	080028bf 	.word	0x080028bf
 800256c:	0800293b 	.word	0x0800293b
 8002570:	08002957 	.word	0x08002957

08002574 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x20>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e0dc      	b.n	8002772 <HAL_ADC_ConfigChannel+0x1da>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b06      	cmp	r3, #6
 80025c6:	d81c      	bhi.n	8002602 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	3b05      	subs	r3, #5
 80025da:	221f      	movs	r2, #31
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	4019      	ands	r1, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3b05      	subs	r3, #5
 80025f4:	fa00 f203 	lsl.w	r2, r0, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	635a      	str	r2, [r3, #52]	; 0x34
 8002600:	e03c      	b.n	800267c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b0c      	cmp	r3, #12
 8002608:	d81c      	bhi.n	8002644 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	3b23      	subs	r3, #35	; 0x23
 800261c:	221f      	movs	r2, #31
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	4019      	ands	r1, r3
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	3b23      	subs	r3, #35	; 0x23
 8002636:	fa00 f203 	lsl.w	r2, r0, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
 8002642:	e01b      	b.n	800267c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	3b41      	subs	r3, #65	; 0x41
 8002656:	221f      	movs	r2, #31
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	4019      	ands	r1, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	3b41      	subs	r3, #65	; 0x41
 8002670:	fa00 f203 	lsl.w	r2, r0, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b09      	cmp	r3, #9
 8002682:	d91c      	bls.n	80026be <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68d9      	ldr	r1, [r3, #12]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	4613      	mov	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	3b1e      	subs	r3, #30
 8002696:	2207      	movs	r2, #7
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	4019      	ands	r1, r3
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	6898      	ldr	r0, [r3, #8]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	3b1e      	subs	r3, #30
 80026b0:	fa00 f203 	lsl.w	r2, r0, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	60da      	str	r2, [r3, #12]
 80026bc:	e019      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6919      	ldr	r1, [r3, #16]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	2207      	movs	r2, #7
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	4019      	ands	r1, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	6898      	ldr	r0, [r3, #8]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	fa00 f203 	lsl.w	r2, r0, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d003      	beq.n	8002702 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026fe:	2b11      	cmp	r3, #17
 8002700:	d132      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1d      	ldr	r2, [pc, #116]	; (800277c <HAL_ADC_ConfigChannel+0x1e4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d125      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d126      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002728:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b10      	cmp	r3, #16
 8002730:	d11a      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002732:	4b13      	ldr	r3, [pc, #76]	; (8002780 <HAL_ADC_ConfigChannel+0x1e8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a13      	ldr	r2, [pc, #76]	; (8002784 <HAL_ADC_ConfigChannel+0x1ec>)
 8002738:	fba2 2303 	umull	r2, r3, r2, r3
 800273c:	0c9a      	lsrs	r2, r3, #18
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002748:	e002      	b.n	8002750 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	3b01      	subs	r3, #1
 800274e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f9      	bne.n	800274a <HAL_ADC_ConfigChannel+0x1b2>
 8002756:	e007      	b.n	8002768 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	f043 0220 	orr.w	r2, r3, #32
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002770:	7bfb      	ldrb	r3, [r7, #15]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	40012400 	.word	0x40012400
 8002780:	20000000 	.word	0x20000000
 8002784:	431bde83 	.word	0x431bde83

08002788 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d040      	beq.n	8002828 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0201 	orr.w	r2, r2, #1
 80027b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027b6:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <ADC_Enable+0xac>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a1f      	ldr	r2, [pc, #124]	; (8002838 <ADC_Enable+0xb0>)
 80027bc:	fba2 2303 	umull	r2, r3, r2, r3
 80027c0:	0c9b      	lsrs	r3, r3, #18
 80027c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027c4:	e002      	b.n	80027cc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f9      	bne.n	80027c6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027d2:	f7ff fd0f 	bl	80021f4 <HAL_GetTick>
 80027d6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027d8:	e01f      	b.n	800281a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027da:	f7ff fd0b 	bl	80021f4 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d918      	bls.n	800281a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d011      	beq.n	800281a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	f043 0210 	orr.w	r2, r3, #16
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	f043 0201 	orr.w	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e007      	b.n	800282a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b01      	cmp	r3, #1
 8002826:	d1d8      	bne.n	80027da <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000000 	.word	0x20000000
 8002838:	431bde83 	.word	0x431bde83

0800283c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b01      	cmp	r3, #1
 8002854:	d12e      	bne.n	80028b4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0201 	bic.w	r2, r2, #1
 8002864:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002866:	f7ff fcc5 	bl	80021f4 <HAL_GetTick>
 800286a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800286c:	e01b      	b.n	80028a6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800286e:	f7ff fcc1 	bl	80021f4 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d914      	bls.n	80028a6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b01      	cmp	r3, #1
 8002888:	d10d      	bne.n	80028a6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	f043 0210 	orr.w	r2, r3, #16
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	f043 0201 	orr.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e007      	b.n	80028b6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d0dc      	beq.n	800286e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d127      	bne.n	8002928 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80028ee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028f2:	d115      	bne.n	8002920 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d111      	bne.n	8002920 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d105      	bne.n	8002920 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	f043 0201 	orr.w	r2, r3, #1
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f7fe fbd5 	bl	80010d0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002926:	e004      	b.n	8002932 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	4798      	blx	r3
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f7ff fe13 	bl	8002574 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	f043 0204 	orr.w	r2, r3, #4
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff fe02 	bl	8002586 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <__NVIC_SetPriorityGrouping+0x44>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029a8:	4013      	ands	r3, r2
 80029aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029be:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <__NVIC_SetPriorityGrouping+0x44>)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	60d3      	str	r3, [r2, #12]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <__NVIC_GetPriorityGrouping+0x18>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	f003 0307 	and.w	r3, r3, #7
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	db0b      	blt.n	8002a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	f003 021f 	and.w	r2, r3, #31
 8002a08:	4906      	ldr	r1, [pc, #24]	; (8002a24 <__NVIC_EnableIRQ+0x34>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	2001      	movs	r0, #1
 8002a12:	fa00 f202 	lsl.w	r2, r0, r2
 8002a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	e000e100 	.word	0xe000e100

08002a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	6039      	str	r1, [r7, #0]
 8002a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	db0a      	blt.n	8002a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	490c      	ldr	r1, [pc, #48]	; (8002a74 <__NVIC_SetPriority+0x4c>)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	0112      	lsls	r2, r2, #4
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a50:	e00a      	b.n	8002a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4908      	ldr	r1, [pc, #32]	; (8002a78 <__NVIC_SetPriority+0x50>)
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	3b04      	subs	r3, #4
 8002a60:	0112      	lsls	r2, r2, #4
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	440b      	add	r3, r1
 8002a66:	761a      	strb	r2, [r3, #24]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000e100 	.word	0xe000e100
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b089      	sub	sp, #36	; 0x24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f1c3 0307 	rsb	r3, r3, #7
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	bf28      	it	cs
 8002a9a:	2304      	movcs	r3, #4
 8002a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	2b06      	cmp	r3, #6
 8002aa4:	d902      	bls.n	8002aac <NVIC_EncodePriority+0x30>
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3b03      	subs	r3, #3
 8002aaa:	e000      	b.n	8002aae <NVIC_EncodePriority+0x32>
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43da      	mvns	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	401a      	ands	r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	43d9      	mvns	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad4:	4313      	orrs	r3, r2
         );
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3724      	adds	r7, #36	; 0x24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002af0:	d301      	bcc.n	8002af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002af2:	2301      	movs	r3, #1
 8002af4:	e00f      	b.n	8002b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af6:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <SysTick_Config+0x40>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afe:	210f      	movs	r1, #15
 8002b00:	f04f 30ff 	mov.w	r0, #4294967295
 8002b04:	f7ff ff90 	bl	8002a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <SysTick_Config+0x40>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0e:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <SysTick_Config+0x40>)
 8002b10:	2207      	movs	r2, #7
 8002b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	e000e010 	.word	0xe000e010

08002b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ff2d 	bl	800298c <__NVIC_SetPriorityGrouping>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b4c:	f7ff ff42 	bl	80029d4 <__NVIC_GetPriorityGrouping>
 8002b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	6978      	ldr	r0, [r7, #20]
 8002b58:	f7ff ff90 	bl	8002a7c <NVIC_EncodePriority>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff5f 	bl	8002a28 <__NVIC_SetPriority>
}
 8002b6a:	bf00      	nop
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	4603      	mov	r3, r0
 8002b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ff35 	bl	80029f0 <__NVIC_EnableIRQ>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff ffa2 	bl	8002ae0 <SysTick_Config>
 8002b9c:	4603      	mov	r3, r0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e043      	b.n	8002c46 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <HAL_DMA_Init+0xa8>)
 8002bc6:	4413      	add	r3, r2
 8002bc8:	4a22      	ldr	r2, [pc, #136]	; (8002c54 <HAL_DMA_Init+0xac>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	009a      	lsls	r2, r3, #2
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a1f      	ldr	r2, [pc, #124]	; (8002c58 <HAL_DMA_Init+0xb0>)
 8002bda:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002bf2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002bf6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	bffdfff8 	.word	0xbffdfff8
 8002c54:	cccccccd 	.word	0xcccccccd
 8002c58:	40020000 	.word	0x40020000

08002c5c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
 8002c68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_DMA_Start_IT+0x20>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e04b      	b.n	8002d14 <HAL_DMA_Start_IT+0xb8>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d13a      	bne.n	8002d06 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f937 	bl	8002f28 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 020e 	orr.w	r2, r2, #14
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	e00f      	b.n	8002cf4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0204 	bic.w	r2, r2, #4
 8002ce2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 020a 	orr.w	r2, r2, #10
 8002cf2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	e005      	b.n	8002d12 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	2204      	movs	r2, #4
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d04f      	beq.n	8002de4 <HAL_DMA_IRQHandler+0xc8>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d04a      	beq.n	8002de4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d107      	bne.n	8002d6c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0204 	bic.w	r2, r2, #4
 8002d6a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a66      	ldr	r2, [pc, #408]	; (8002f0c <HAL_DMA_IRQHandler+0x1f0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d029      	beq.n	8002dca <HAL_DMA_IRQHandler+0xae>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a65      	ldr	r2, [pc, #404]	; (8002f10 <HAL_DMA_IRQHandler+0x1f4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d022      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xaa>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a63      	ldr	r2, [pc, #396]	; (8002f14 <HAL_DMA_IRQHandler+0x1f8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01a      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0xa4>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a62      	ldr	r2, [pc, #392]	; (8002f18 <HAL_DMA_IRQHandler+0x1fc>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d012      	beq.n	8002dba <HAL_DMA_IRQHandler+0x9e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a60      	ldr	r2, [pc, #384]	; (8002f1c <HAL_DMA_IRQHandler+0x200>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00a      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x98>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a5f      	ldr	r2, [pc, #380]	; (8002f20 <HAL_DMA_IRQHandler+0x204>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d102      	bne.n	8002dae <HAL_DMA_IRQHandler+0x92>
 8002da8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002dac:	e00e      	b.n	8002dcc <HAL_DMA_IRQHandler+0xb0>
 8002dae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002db2:	e00b      	b.n	8002dcc <HAL_DMA_IRQHandler+0xb0>
 8002db4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002db8:	e008      	b.n	8002dcc <HAL_DMA_IRQHandler+0xb0>
 8002dba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002dbe:	e005      	b.n	8002dcc <HAL_DMA_IRQHandler+0xb0>
 8002dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dc4:	e002      	b.n	8002dcc <HAL_DMA_IRQHandler+0xb0>
 8002dc6:	2340      	movs	r3, #64	; 0x40
 8002dc8:	e000      	b.n	8002dcc <HAL_DMA_IRQHandler+0xb0>
 8002dca:	2304      	movs	r3, #4
 8002dcc:	4a55      	ldr	r2, [pc, #340]	; (8002f24 <HAL_DMA_IRQHandler+0x208>)
 8002dce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 8094 	beq.w	8002f02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002de2:	e08e      	b.n	8002f02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	2202      	movs	r2, #2
 8002dea:	409a      	lsls	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d056      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x186>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d051      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10b      	bne.n	8002e24 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 020a 	bic.w	r2, r2, #10
 8002e1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a38      	ldr	r2, [pc, #224]	; (8002f0c <HAL_DMA_IRQHandler+0x1f0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d029      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x166>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a37      	ldr	r2, [pc, #220]	; (8002f10 <HAL_DMA_IRQHandler+0x1f4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d022      	beq.n	8002e7e <HAL_DMA_IRQHandler+0x162>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a35      	ldr	r2, [pc, #212]	; (8002f14 <HAL_DMA_IRQHandler+0x1f8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01a      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x15c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a34      	ldr	r2, [pc, #208]	; (8002f18 <HAL_DMA_IRQHandler+0x1fc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d012      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x156>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a32      	ldr	r2, [pc, #200]	; (8002f1c <HAL_DMA_IRQHandler+0x200>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00a      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x150>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a31      	ldr	r2, [pc, #196]	; (8002f20 <HAL_DMA_IRQHandler+0x204>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d102      	bne.n	8002e66 <HAL_DMA_IRQHandler+0x14a>
 8002e60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e64:	e00e      	b.n	8002e84 <HAL_DMA_IRQHandler+0x168>
 8002e66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e6a:	e00b      	b.n	8002e84 <HAL_DMA_IRQHandler+0x168>
 8002e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e70:	e008      	b.n	8002e84 <HAL_DMA_IRQHandler+0x168>
 8002e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e76:	e005      	b.n	8002e84 <HAL_DMA_IRQHandler+0x168>
 8002e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e7c:	e002      	b.n	8002e84 <HAL_DMA_IRQHandler+0x168>
 8002e7e:	2320      	movs	r3, #32
 8002e80:	e000      	b.n	8002e84 <HAL_DMA_IRQHandler+0x168>
 8002e82:	2302      	movs	r3, #2
 8002e84:	4a27      	ldr	r2, [pc, #156]	; (8002f24 <HAL_DMA_IRQHandler+0x208>)
 8002e86:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d034      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ea0:	e02f      	b.n	8002f02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d028      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x1e8>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d023      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 020e 	bic.w	r2, r2, #14
 8002eca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d004      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4798      	blx	r3
    }
  }
  return;
 8002f02:	bf00      	nop
 8002f04:	bf00      	nop
}
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40020008 	.word	0x40020008
 8002f10:	4002001c 	.word	0x4002001c
 8002f14:	40020030 	.word	0x40020030
 8002f18:	40020044 	.word	0x40020044
 8002f1c:	40020058 	.word	0x40020058
 8002f20:	4002006c 	.word	0x4002006c
 8002f24:	40020000 	.word	0x40020000

08002f28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3e:	2101      	movs	r1, #1
 8002f40:	fa01 f202 	lsl.w	r2, r1, r2
 8002f44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b10      	cmp	r3, #16
 8002f54:	d108      	bne.n	8002f68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f66:	e007      	b.n	8002f78 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	60da      	str	r2, [r3, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr
	...

08002f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b08b      	sub	sp, #44	; 0x2c
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f92:	2300      	movs	r3, #0
 8002f94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f96:	e169      	b.n	800326c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f98:	2201      	movs	r2, #1
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69fa      	ldr	r2, [r7, #28]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	f040 8158 	bne.w	8003266 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4a9a      	ldr	r2, [pc, #616]	; (8003224 <HAL_GPIO_Init+0x2a0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d05e      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002fc0:	4a98      	ldr	r2, [pc, #608]	; (8003224 <HAL_GPIO_Init+0x2a0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d875      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002fc6:	4a98      	ldr	r2, [pc, #608]	; (8003228 <HAL_GPIO_Init+0x2a4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d058      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002fcc:	4a96      	ldr	r2, [pc, #600]	; (8003228 <HAL_GPIO_Init+0x2a4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d86f      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002fd2:	4a96      	ldr	r2, [pc, #600]	; (800322c <HAL_GPIO_Init+0x2a8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d052      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002fd8:	4a94      	ldr	r2, [pc, #592]	; (800322c <HAL_GPIO_Init+0x2a8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d869      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002fde:	4a94      	ldr	r2, [pc, #592]	; (8003230 <HAL_GPIO_Init+0x2ac>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d04c      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002fe4:	4a92      	ldr	r2, [pc, #584]	; (8003230 <HAL_GPIO_Init+0x2ac>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d863      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002fea:	4a92      	ldr	r2, [pc, #584]	; (8003234 <HAL_GPIO_Init+0x2b0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d046      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002ff0:	4a90      	ldr	r2, [pc, #576]	; (8003234 <HAL_GPIO_Init+0x2b0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d85d      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002ff6:	2b12      	cmp	r3, #18
 8002ff8:	d82a      	bhi.n	8003050 <HAL_GPIO_Init+0xcc>
 8002ffa:	2b12      	cmp	r3, #18
 8002ffc:	d859      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <HAL_GPIO_Init+0x80>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	0800307f 	.word	0x0800307f
 8003008:	08003059 	.word	0x08003059
 800300c:	0800306b 	.word	0x0800306b
 8003010:	080030ad 	.word	0x080030ad
 8003014:	080030b3 	.word	0x080030b3
 8003018:	080030b3 	.word	0x080030b3
 800301c:	080030b3 	.word	0x080030b3
 8003020:	080030b3 	.word	0x080030b3
 8003024:	080030b3 	.word	0x080030b3
 8003028:	080030b3 	.word	0x080030b3
 800302c:	080030b3 	.word	0x080030b3
 8003030:	080030b3 	.word	0x080030b3
 8003034:	080030b3 	.word	0x080030b3
 8003038:	080030b3 	.word	0x080030b3
 800303c:	080030b3 	.word	0x080030b3
 8003040:	080030b3 	.word	0x080030b3
 8003044:	080030b3 	.word	0x080030b3
 8003048:	08003061 	.word	0x08003061
 800304c:	08003075 	.word	0x08003075
 8003050:	4a79      	ldr	r2, [pc, #484]	; (8003238 <HAL_GPIO_Init+0x2b4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003056:	e02c      	b.n	80030b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	623b      	str	r3, [r7, #32]
          break;
 800305e:	e029      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	3304      	adds	r3, #4
 8003066:	623b      	str	r3, [r7, #32]
          break;
 8003068:	e024      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	3308      	adds	r3, #8
 8003070:	623b      	str	r3, [r7, #32]
          break;
 8003072:	e01f      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	330c      	adds	r3, #12
 800307a:	623b      	str	r3, [r7, #32]
          break;
 800307c:	e01a      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d102      	bne.n	800308c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003086:	2304      	movs	r3, #4
 8003088:	623b      	str	r3, [r7, #32]
          break;
 800308a:	e013      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d105      	bne.n	80030a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003094:	2308      	movs	r3, #8
 8003096:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	611a      	str	r2, [r3, #16]
          break;
 800309e:	e009      	b.n	80030b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030a0:	2308      	movs	r3, #8
 80030a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	615a      	str	r2, [r3, #20]
          break;
 80030aa:	e003      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030ac:	2300      	movs	r3, #0
 80030ae:	623b      	str	r3, [r7, #32]
          break;
 80030b0:	e000      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          break;
 80030b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2bff      	cmp	r3, #255	; 0xff
 80030b8:	d801      	bhi.n	80030be <HAL_GPIO_Init+0x13a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	e001      	b.n	80030c2 <HAL_GPIO_Init+0x13e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2bff      	cmp	r3, #255	; 0xff
 80030c8:	d802      	bhi.n	80030d0 <HAL_GPIO_Init+0x14c>
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	e002      	b.n	80030d6 <HAL_GPIO_Init+0x152>
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	3b08      	subs	r3, #8
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	210f      	movs	r1, #15
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	fa01 f303 	lsl.w	r3, r1, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	401a      	ands	r2, r3
 80030e8:	6a39      	ldr	r1, [r7, #32]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	fa01 f303 	lsl.w	r3, r1, r3
 80030f0:	431a      	orrs	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 80b1 	beq.w	8003266 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003104:	4b4d      	ldr	r3, [pc, #308]	; (800323c <HAL_GPIO_Init+0x2b8>)
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	4a4c      	ldr	r2, [pc, #304]	; (800323c <HAL_GPIO_Init+0x2b8>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6193      	str	r3, [r2, #24]
 8003110:	4b4a      	ldr	r3, [pc, #296]	; (800323c <HAL_GPIO_Init+0x2b8>)
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800311c:	4a48      	ldr	r2, [pc, #288]	; (8003240 <HAL_GPIO_Init+0x2bc>)
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	3302      	adds	r3, #2
 8003124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003128:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	220f      	movs	r2, #15
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4013      	ands	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a40      	ldr	r2, [pc, #256]	; (8003244 <HAL_GPIO_Init+0x2c0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d013      	beq.n	8003170 <HAL_GPIO_Init+0x1ec>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a3f      	ldr	r2, [pc, #252]	; (8003248 <HAL_GPIO_Init+0x2c4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00d      	beq.n	800316c <HAL_GPIO_Init+0x1e8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a3e      	ldr	r2, [pc, #248]	; (800324c <HAL_GPIO_Init+0x2c8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d007      	beq.n	8003168 <HAL_GPIO_Init+0x1e4>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a3d      	ldr	r2, [pc, #244]	; (8003250 <HAL_GPIO_Init+0x2cc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d101      	bne.n	8003164 <HAL_GPIO_Init+0x1e0>
 8003160:	2303      	movs	r3, #3
 8003162:	e006      	b.n	8003172 <HAL_GPIO_Init+0x1ee>
 8003164:	2304      	movs	r3, #4
 8003166:	e004      	b.n	8003172 <HAL_GPIO_Init+0x1ee>
 8003168:	2302      	movs	r3, #2
 800316a:	e002      	b.n	8003172 <HAL_GPIO_Init+0x1ee>
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <HAL_GPIO_Init+0x1ee>
 8003170:	2300      	movs	r3, #0
 8003172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003174:	f002 0203 	and.w	r2, r2, #3
 8003178:	0092      	lsls	r2, r2, #2
 800317a:	4093      	lsls	r3, r2
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003182:	492f      	ldr	r1, [pc, #188]	; (8003240 <HAL_GPIO_Init+0x2bc>)
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	3302      	adds	r3, #2
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d006      	beq.n	80031aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800319c:	4b2d      	ldr	r3, [pc, #180]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	492c      	ldr	r1, [pc, #176]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	608b      	str	r3, [r1, #8]
 80031a8:	e006      	b.n	80031b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031aa:	4b2a      	ldr	r3, [pc, #168]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	4928      	ldr	r1, [pc, #160]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d006      	beq.n	80031d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031c4:	4b23      	ldr	r3, [pc, #140]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	4922      	ldr	r1, [pc, #136]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60cb      	str	r3, [r1, #12]
 80031d0:	e006      	b.n	80031e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031d2:	4b20      	ldr	r3, [pc, #128]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	43db      	mvns	r3, r3
 80031da:	491e      	ldr	r1, [pc, #120]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031dc:	4013      	ands	r3, r2
 80031de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d006      	beq.n	80031fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031ec:	4b19      	ldr	r3, [pc, #100]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	4918      	ldr	r1, [pc, #96]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]
 80031f8:	e006      	b.n	8003208 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031fa:	4b16      	ldr	r3, [pc, #88]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	43db      	mvns	r3, r3
 8003202:	4914      	ldr	r1, [pc, #80]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 8003204:	4013      	ands	r3, r2
 8003206:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d021      	beq.n	8003258 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003214:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	490e      	ldr	r1, [pc, #56]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	600b      	str	r3, [r1, #0]
 8003220:	e021      	b.n	8003266 <HAL_GPIO_Init+0x2e2>
 8003222:	bf00      	nop
 8003224:	10320000 	.word	0x10320000
 8003228:	10310000 	.word	0x10310000
 800322c:	10220000 	.word	0x10220000
 8003230:	10210000 	.word	0x10210000
 8003234:	10120000 	.word	0x10120000
 8003238:	10110000 	.word	0x10110000
 800323c:	40021000 	.word	0x40021000
 8003240:	40010000 	.word	0x40010000
 8003244:	40010800 	.word	0x40010800
 8003248:	40010c00 	.word	0x40010c00
 800324c:	40011000 	.word	0x40011000
 8003250:	40011400 	.word	0x40011400
 8003254:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_GPIO_Init+0x304>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	43db      	mvns	r3, r3
 8003260:	4909      	ldr	r1, [pc, #36]	; (8003288 <HAL_GPIO_Init+0x304>)
 8003262:	4013      	ands	r3, r2
 8003264:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	3301      	adds	r3, #1
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	fa22 f303 	lsr.w	r3, r2, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	f47f ae8e 	bne.w	8002f98 <HAL_GPIO_Init+0x14>
  }
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	372c      	adds	r7, #44	; 0x2c
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	40010400 	.word	0x40010400

0800328c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]
 8003298:	4613      	mov	r3, r2
 800329a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800329c:	787b      	ldrb	r3, [r7, #1]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032a2:	887a      	ldrh	r2, [r7, #2]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032a8:	e003      	b.n	80032b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032aa:	887b      	ldrh	r3, [r7, #2]
 80032ac:	041a      	lsls	r2, r3, #16
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	611a      	str	r2, [r3, #16]
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032ce:	887a      	ldrh	r2, [r7, #2]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4013      	ands	r3, r2
 80032d4:	041a      	lsls	r2, r3, #16
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	43d9      	mvns	r1, r3
 80032da:	887b      	ldrh	r3, [r7, #2]
 80032dc:	400b      	ands	r3, r1
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	611a      	str	r2, [r3, #16]
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f0:	b08b      	sub	sp, #44	; 0x2c
 80032f2:	af06      	add	r7, sp, #24
 80032f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0f1      	b.n	80034e4 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d106      	bne.n	800331a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f006 feff 	bl	800a118 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2203      	movs	r2, #3
 800331e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f002 fe08 	bl	8005f3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	603b      	str	r3, [r7, #0]
 8003332:	687e      	ldr	r6, [r7, #4]
 8003334:	466d      	mov	r5, sp
 8003336:	f106 0410 	add.w	r4, r6, #16
 800333a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800333c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	602b      	str	r3, [r5, #0]
 8003342:	1d33      	adds	r3, r6, #4
 8003344:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003346:	6838      	ldr	r0, [r7, #0]
 8003348:	f002 fdd2 	bl	8005ef0 <USB_CoreInit>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2202      	movs	r2, #2
 8003356:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e0c2      	b.n	80034e4 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f002 fe03 	bl	8005f70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800336a:	2300      	movs	r3, #0
 800336c:	73fb      	strb	r3, [r7, #15]
 800336e:	e040      	b.n	80033f2 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	440b      	add	r3, r1
 8003380:	3301      	adds	r3, #1
 8003382:	2201      	movs	r2, #1
 8003384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	440b      	add	r3, r1
 8003396:	7bfa      	ldrb	r2, [r7, #15]
 8003398:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	440b      	add	r3, r1
 80033aa:	3303      	adds	r3, #3
 80033ac:	2200      	movs	r2, #0
 80033ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033b0:	7bfa      	ldrb	r2, [r7, #15]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	440b      	add	r3, r1
 80033be:	3338      	adds	r3, #56	; 0x38
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033c4:	7bfa      	ldrb	r2, [r7, #15]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	440b      	add	r3, r1
 80033d2:	333c      	adds	r3, #60	; 0x3c
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033d8:	7bfa      	ldrb	r2, [r7, #15]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	440b      	add	r3, r1
 80033e6:	3340      	adds	r3, #64	; 0x40
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	3301      	adds	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
 80033f2:	7bfa      	ldrb	r2, [r7, #15]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d3b9      	bcc.n	8003370 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]
 8003400:	e044      	b.n	800348c <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003402:	7bfa      	ldrb	r2, [r7, #15]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	440b      	add	r3, r1
 8003410:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003414:	2200      	movs	r2, #0
 8003416:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003418:	7bfa      	ldrb	r2, [r7, #15]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	440b      	add	r3, r1
 8003426:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800342a:	7bfa      	ldrb	r2, [r7, #15]
 800342c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	440b      	add	r3, r1
 800343c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	440b      	add	r3, r1
 8003452:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800345a:	7bfa      	ldrb	r2, [r7, #15]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	440b      	add	r3, r1
 8003468:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003470:	7bfa      	ldrb	r2, [r7, #15]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	440b      	add	r3, r1
 800347e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	3301      	adds	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
 800348c:	7bfa      	ldrb	r2, [r7, #15]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	429a      	cmp	r2, r3
 8003494:	d3b5      	bcc.n	8003402 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	687e      	ldr	r6, [r7, #4]
 800349e:	466d      	mov	r5, sp
 80034a0:	f106 0410 	add.w	r4, r6, #16
 80034a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	602b      	str	r3, [r5, #0]
 80034ac:	1d33      	adds	r3, r6, #4
 80034ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034b0:	6838      	ldr	r0, [r7, #0]
 80034b2:	f002 fd69 	bl	8005f88 <USB_DevInit>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e00d      	b.n	80034e4 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f004 ffea 	bl	80084b6 <USB_DevDisconnect>

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_PCD_Start+0x16>
 80034fe:	2302      	movs	r3, #2
 8003500:	e016      	b.n	8003530 <HAL_PCD_Start+0x44>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f002 fcfe 	bl	8005f10 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003514:	2101      	movs	r1, #1
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f007 f871 	bl	800a5fe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f004 ffbe 	bl	80084a2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f004 ffc0 	bl	80084ca <USB_ReadInterrupts>
 800354a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fb1b 	bl	8003b92 <PCD_EP_ISR_Handler>

    return;
 800355c:	e119      	b.n	8003792 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003564:	2b00      	cmp	r3, #0
 8003566:	d013      	beq.n	8003590 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003570:	b29a      	uxth	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800357a:	b292      	uxth	r2, r2
 800357c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f006 fe44 	bl	800a20e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003586:	2100      	movs	r1, #0
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f905 	bl	8003798 <HAL_PCD_SetAddress>

    return;
 800358e:	e100      	b.n	8003792 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00c      	beq.n	80035b4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035ac:	b292      	uxth	r2, r2
 80035ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80035b2:	e0ee      	b.n	8003792 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00c      	beq.n	80035d8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035d0:	b292      	uxth	r2, r2
 80035d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80035d6:	e0dc      	b.n	8003792 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d027      	beq.n	8003632 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0204 	bic.w	r2, r2, #4
 80035f4:	b292      	uxth	r2, r2
 80035f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003602:	b29a      	uxth	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0208 	bic.w	r2, r2, #8
 800360c:	b292      	uxth	r2, r2
 800360e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f006 fe34 	bl	800a280 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003620:	b29a      	uxth	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800362a:	b292      	uxth	r2, r2
 800362c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003630:	e0af      	b.n	8003792 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 8083 	beq.w	8003744 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800363e:	2300      	movs	r3, #0
 8003640:	77fb      	strb	r3, [r7, #31]
 8003642:	e010      	b.n	8003666 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	7ffb      	ldrb	r3, [r7, #31]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	441a      	add	r2, r3
 8003650:	7ffb      	ldrb	r3, [r7, #31]
 8003652:	8812      	ldrh	r2, [r2, #0]
 8003654:	b292      	uxth	r2, r2
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	3320      	adds	r3, #32
 800365a:	443b      	add	r3, r7
 800365c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003660:	7ffb      	ldrb	r3, [r7, #31]
 8003662:	3301      	adds	r3, #1
 8003664:	77fb      	strb	r3, [r7, #31]
 8003666:	7ffb      	ldrb	r3, [r7, #31]
 8003668:	2b07      	cmp	r3, #7
 800366a:	d9eb      	bls.n	8003644 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003674:	b29a      	uxth	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	b292      	uxth	r2, r2
 8003680:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800368c:	b29a      	uxth	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0201 	bic.w	r2, r2, #1
 8003696:	b292      	uxth	r2, r2
 8003698:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800369c:	bf00      	nop
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f6      	beq.n	800369e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c2:	b292      	uxth	r2, r2
 80036c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80036c8:	2300      	movs	r3, #0
 80036ca:	77fb      	strb	r3, [r7, #31]
 80036cc:	e00f      	b.n	80036ee <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80036ce:	7ffb      	ldrb	r3, [r7, #31]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	4611      	mov	r1, r2
 80036d6:	7ffa      	ldrb	r2, [r7, #31]
 80036d8:	0092      	lsls	r2, r2, #2
 80036da:	440a      	add	r2, r1
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	3320      	adds	r3, #32
 80036e0:	443b      	add	r3, r7
 80036e2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80036e6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80036e8:	7ffb      	ldrb	r3, [r7, #31]
 80036ea:	3301      	adds	r3, #1
 80036ec:	77fb      	strb	r3, [r7, #31]
 80036ee:	7ffb      	ldrb	r3, [r7, #31]
 80036f0:	2b07      	cmp	r3, #7
 80036f2:	d9ec      	bls.n	80036ce <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0208 	orr.w	r2, r2, #8
 8003706:	b292      	uxth	r2, r2
 8003708:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003714:	b29a      	uxth	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800371e:	b292      	uxth	r2, r2
 8003720:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800372c:	b29a      	uxth	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0204 	orr.w	r2, r2, #4
 8003736:	b292      	uxth	r2, r2
 8003738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f006 fd85 	bl	800a24c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003742:	e026      	b.n	8003792 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00f      	beq.n	800376e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003756:	b29a      	uxth	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003760:	b292      	uxth	r2, r2
 8003762:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f006 fd43 	bl	800a1f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800376c:	e011      	b.n	8003792 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00c      	beq.n	8003792 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003780:	b29a      	uxth	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800378a:	b292      	uxth	r2, r2
 800378c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003790:	bf00      	nop
  }
}
 8003792:	3720      	adds	r7, #32
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_PCD_SetAddress+0x1a>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e013      	b.n	80037da <HAL_PCD_SetAddress+0x42>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	78fa      	ldrb	r2, [r7, #3]
 80037be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	78fa      	ldrb	r2, [r7, #3]
 80037c8:	4611      	mov	r1, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f004 fe56 	bl	800847c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	4608      	mov	r0, r1
 80037ec:	4611      	mov	r1, r2
 80037ee:	461a      	mov	r2, r3
 80037f0:	4603      	mov	r3, r0
 80037f2:	70fb      	strb	r3, [r7, #3]
 80037f4:	460b      	mov	r3, r1
 80037f6:	803b      	strh	r3, [r7, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003800:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003804:	2b00      	cmp	r3, #0
 8003806:	da0e      	bge.n	8003826 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	4413      	add	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	705a      	strb	r2, [r3, #1]
 8003824:	e00e      	b.n	8003844 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003826:	78fb      	ldrb	r3, [r7, #3]
 8003828:	f003 0207 	and.w	r2, r3, #7
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	4413      	add	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	b2da      	uxtb	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003850:	883a      	ldrh	r2, [r7, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	78ba      	ldrb	r2, [r7, #2]
 800385a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800385c:	78bb      	ldrb	r3, [r7, #2]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d102      	bne.n	8003868 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_PCD_EP_Open+0x94>
 8003872:	2302      	movs	r3, #2
 8003874:	e00e      	b.n	8003894 <HAL_PCD_EP_Open+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68f9      	ldr	r1, [r7, #12]
 8003884:	4618      	mov	r0, r3
 8003886:	f002 fb9f 	bl	8005fc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003892:	7afb      	ldrb	r3, [r7, #11]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	da0e      	bge.n	80038ce <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4413      	add	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	705a      	strb	r2, [r3, #1]
 80038cc:	e00e      	b.n	80038ec <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	f003 0207 	and.w	r2, r3, #7
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_PCD_EP_Close+0x6a>
 8003902:	2302      	movs	r3, #2
 8003904:	e00e      	b.n	8003924 <HAL_PCD_EP_Close+0x88>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68f9      	ldr	r1, [r7, #12]
 8003914:	4618      	mov	r0, r3
 8003916:	f002 ff17 	bl	8006748 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	460b      	mov	r3, r1
 800393a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800393c:	7afb      	ldrb	r3, [r7, #11]
 800393e:	f003 0207 	and.w	r2, r3, #7
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4413      	add	r3, r2
 8003952:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2200      	movs	r2, #0
 8003964:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2200      	movs	r2, #0
 800396a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800396c:	7afb      	ldrb	r3, [r7, #11]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	b2da      	uxtb	r2, r3
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6979      	ldr	r1, [r7, #20]
 800397e:	4618      	mov	r0, r3
 8003980:	f003 f8ce 	bl	8006b20 <USB_EPStartXfer>

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	460b      	mov	r3, r1
 8003998:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	f003 0207 	and.w	r2, r3, #7
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	440b      	add	r3, r1
 80039ac:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80039b0:	681b      	ldr	r3, [r3, #0]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	460b      	mov	r3, r1
 80039ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039cc:	7afb      	ldrb	r3, [r7, #11]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4413      	add	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2200      	movs	r2, #0
 8003a00:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2201      	movs	r2, #1
 8003a06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a08:	7afb      	ldrb	r3, [r7, #11]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6979      	ldr	r1, [r7, #20]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f003 f880 	bl	8006b20 <USB_EPStartXfer>

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	460b      	mov	r3, r1
 8003a34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a36:	78fb      	ldrb	r3, [r7, #3]
 8003a38:	f003 0207 	and.w	r2, r3, #7
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d901      	bls.n	8003a48 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e04c      	b.n	8003ae2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	da0e      	bge.n	8003a6e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	4413      	add	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	705a      	strb	r2, [r3, #1]
 8003a6c:	e00c      	b.n	8003a88 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a6e:	78fa      	ldrb	r2, [r7, #3]
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	4413      	add	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a8e:	78fb      	ldrb	r3, [r7, #3]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_PCD_EP_SetStall+0x7e>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e01c      	b.n	8003ae2 <HAL_PCD_EP_SetStall+0xb8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68f9      	ldr	r1, [r7, #12]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f004 fbe3 	bl	8008282 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d108      	bne.n	8003ad8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f004 fd08 	bl	80084e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	460b      	mov	r3, r1
 8003af4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	f003 020f 	and.w	r2, r3, #15
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d901      	bls.n	8003b08 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e040      	b.n	8003b8a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	da0e      	bge.n	8003b2e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	4413      	add	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	705a      	strb	r2, [r3, #1]
 8003b2c:	e00e      	b.n	8003b4c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	f003 0207 	and.w	r2, r3, #7
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	4413      	add	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_PCD_EP_ClrStall+0x82>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e00e      	b.n	8003b8a <HAL_PCD_EP_ClrStall+0xa0>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68f9      	ldr	r1, [r7, #12]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f004 fbd1 	bl	8008322 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b096      	sub	sp, #88	; 0x58
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b9a:	e3bf      	b.n	800431c <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ba4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003ba8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003bb6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f040 8179 	bne.w	8003eb2 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003bc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d152      	bne.n	8003c72 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bdc:	81fb      	strh	r3, [r7, #14]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	89fb      	ldrh	r3, [r7, #14]
 8003be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3328      	adds	r3, #40	; 0x28
 8003bf4:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	461a      	mov	r2, r3
 8003c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	4413      	add	r3, r2
 8003c0a:	3302      	adds	r3, #2
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6812      	ldr	r2, [r2, #0]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c24:	695a      	ldr	r2, [r3, #20]
 8003c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	441a      	add	r2, r3
 8003c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c2e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003c30:	2100      	movs	r1, #0
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f006 fac3 	bl	800a1be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 836b 	beq.w	800431c <PCD_EP_ISR_Handler+0x78a>
 8003c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f040 8366 	bne.w	800431c <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	b292      	uxth	r2, r2
 8003c64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c70:	e354      	b.n	800431c <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c78:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003c84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d034      	beq.n	8003cfa <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3306      	adds	r3, #6
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cba:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cc8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ccc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	f004 fc5a 	bl	8008588 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	823b      	strh	r3, [r7, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	8a3a      	ldrh	r2, [r7, #16]
 8003cea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cee:	b292      	uxth	r2, r2
 8003cf0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f006 fa36 	bl	800a164 <HAL_PCD_SetupStageCallback>
 8003cf8:	e310      	b.n	800431c <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003cfa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f280 830c 	bge.w	800431c <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d10:	4013      	ands	r3, r2
 8003d12:	83fb      	strh	r3, [r7, #30]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	8bfa      	ldrh	r2, [r7, #30]
 8003d1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d1e:	b292      	uxth	r2, r2
 8003d20:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4413      	add	r3, r2
 8003d36:	3306      	adds	r3, #6
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d4c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d019      	beq.n	8003d8a <PCD_EP_ISR_Handler+0x1f8>
 8003d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d015      	beq.n	8003d8a <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d64:	6959      	ldr	r1, [r3, #20]
 8003d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d68:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d6c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	f004 fc0a 	bl	8008588 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d76:	695a      	ldr	r2, [r3, #20]
 8003d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	441a      	add	r2, r3
 8003d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d80:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003d82:	2100      	movs	r1, #0
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f006 f9ff 	bl	800a188 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003d94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f040 82bd 	bne.w	800431c <PCD_EP_ISR_Handler+0x78a>
 8003da2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003da6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003daa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dae:	f000 82b5 	beq.w	800431c <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	61bb      	str	r3, [r7, #24]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	801a      	strh	r2, [r3, #0]
 8003de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	2b3e      	cmp	r3, #62	; 0x3e
 8003de8:	d91d      	bls.n	8003e26 <PCD_EP_ISR_Handler+0x294>
 8003dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	647b      	str	r3, [r7, #68]	; 0x44
 8003df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <PCD_EP_ISR_Handler+0x272>
 8003dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e00:	3b01      	subs	r3, #1
 8003e02:	647b      	str	r3, [r7, #68]	; 0x44
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	029b      	lsls	r3, r3, #10
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	4313      	orrs	r3, r2
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	801a      	strh	r2, [r3, #0]
 8003e24:	e026      	b.n	8003e74 <PCD_EP_ISR_Handler+0x2e2>
 8003e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <PCD_EP_ISR_Handler+0x2b2>
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	801a      	strh	r2, [r3, #0]
 8003e42:	e017      	b.n	8003e74 <PCD_EP_ISR_Handler+0x2e2>
 8003e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <PCD_EP_ISR_Handler+0x2cc>
 8003e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	029b      	lsls	r3, r3, #10
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e84:	827b      	strh	r3, [r7, #18]
 8003e86:	8a7b      	ldrh	r3, [r7, #18]
 8003e88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003e8c:	827b      	strh	r3, [r7, #18]
 8003e8e:	8a7b      	ldrh	r3, [r7, #18]
 8003e90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e94:	827b      	strh	r3, [r7, #18]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	8a7b      	ldrh	r3, [r7, #18]
 8003e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	8013      	strh	r3, [r2, #0]
 8003eb0:	e234      	b.n	800431c <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ec6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f280 80fc 	bge.w	80040c8 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003efe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f02:	b292      	uxth	r2, r2
 8003f04:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003f06:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	4413      	add	r3, r2
 8003f1a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f1e:	7b1b      	ldrb	r3, [r3, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d125      	bne.n	8003f70 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	461a      	mov	r2, r3
 8003f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	4413      	add	r3, r2
 8003f38:	3306      	adds	r3, #6
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f4c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003f50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8092 	beq.w	800407e <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f60:	6959      	ldr	r1, [r3, #20]
 8003f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f64:	88da      	ldrh	r2, [r3, #6]
 8003f66:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003f6a:	f004 fb0d 	bl	8008588 <USB_ReadPMA>
 8003f6e:	e086      	b.n	800407e <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f72:	78db      	ldrb	r3, [r3, #3]
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d10a      	bne.n	8003f8e <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003f78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f9d9 	bl	8004338 <HAL_PCD_EP_DB_Receive>
 8003f86:	4603      	mov	r3, r0
 8003f88:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003f8c:	e077      	b.n	800407e <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	441a      	add	r2, r3
 8003fba:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d024      	beq.n	8004036 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4413      	add	r3, r2
 8004000:	3302      	adds	r3, #2
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004014:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004018:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800401c:	2b00      	cmp	r3, #0
 800401e:	d02e      	beq.n	800407e <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004026:	6959      	ldr	r1, [r3, #20]
 8004028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800402a:	891a      	ldrh	r2, [r3, #8]
 800402c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004030:	f004 faaa 	bl	8008588 <USB_ReadPMA>
 8004034:	e023      	b.n	800407e <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800403e:	b29b      	uxth	r3, r3
 8004040:	461a      	mov	r2, r3
 8004042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	3306      	adds	r3, #6
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6812      	ldr	r2, [r2, #0]
 8004052:	4413      	add	r3, r2
 8004054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800405e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004062:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004066:	2b00      	cmp	r3, #0
 8004068:	d009      	beq.n	800407e <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004070:	6959      	ldr	r1, [r3, #20]
 8004072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004074:	895a      	ldrh	r2, [r3, #10]
 8004076:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800407a:	f004 fa85 	bl	8008588 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800407e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004080:	69da      	ldr	r2, [r3, #28]
 8004082:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004086:	441a      	add	r2, r3
 8004088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800408a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800408c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800408e:	695a      	ldr	r2, [r3, #20]
 8004090:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004094:	441a      	add	r2, r3
 8004096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004098:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800409a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <PCD_EP_ISR_Handler+0x51c>
 80040a2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80040a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d206      	bcs.n	80040bc <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80040ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	4619      	mov	r1, r3
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f006 f867 	bl	800a188 <HAL_PCD_DataOutStageCallback>
 80040ba:	e005      	b.n	80040c8 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040c2:	4618      	mov	r0, r3
 80040c4:	f002 fd2c 	bl	8006b20 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80040c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80040cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8123 	beq.w	800431c <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80040d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	4413      	add	r3, r2
 80040e8:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004104:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	441a      	add	r2, r3
 8004116:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800411a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800411e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004122:	b29b      	uxth	r3, r3
 8004124:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004128:	78db      	ldrb	r3, [r3, #3]
 800412a:	2b01      	cmp	r3, #1
 800412c:	f040 80a2 	bne.w	8004274 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8004130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004132:	2200      	movs	r2, #0
 8004134:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004138:	7b1b      	ldrb	r3, [r3, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 8093 	beq.w	8004266 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004140:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004148:	2b00      	cmp	r3, #0
 800414a:	d046      	beq.n	80041da <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800414c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800414e:	785b      	ldrb	r3, [r3, #1]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d126      	bne.n	80041a2 <PCD_EP_ISR_Handler+0x610>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004162:	b29b      	uxth	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	4413      	add	r3, r2
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
 800416c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	011a      	lsls	r2, r3, #4
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	4413      	add	r3, r2
 8004176:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800417a:	623b      	str	r3, [r7, #32]
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004186:	b29a      	uxth	r2, r3
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	801a      	strh	r2, [r3, #0]
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	b29b      	uxth	r3, r3
 8004192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800419a:	b29a      	uxth	r2, r3
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	801a      	strh	r2, [r3, #0]
 80041a0:	e061      	b.n	8004266 <PCD_EP_ISR_Handler+0x6d4>
 80041a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d15d      	bne.n	8004266 <PCD_EP_ISR_Handler+0x6d4>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041be:	4413      	add	r3, r2
 80041c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	011a      	lsls	r2, r3, #4
 80041c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ca:	4413      	add	r3, r2
 80041cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	2200      	movs	r2, #0
 80041d6:	801a      	strh	r2, [r3, #0]
 80041d8:	e045      	b.n	8004266 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e2:	785b      	ldrb	r3, [r3, #1]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d126      	bne.n	8004236 <PCD_EP_ISR_Handler+0x6a4>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	637b      	str	r3, [r7, #52]	; 0x34
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041fc:	4413      	add	r3, r2
 80041fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	011a      	lsls	r2, r3, #4
 8004206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004208:	4413      	add	r3, r2
 800420a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800420e:	633b      	str	r3, [r7, #48]	; 0x30
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	b29b      	uxth	r3, r3
 8004216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800421a:	b29a      	uxth	r2, r3
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	801a      	strh	r2, [r3, #0]
 8004220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	b29b      	uxth	r3, r3
 8004226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800422a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800422e:	b29a      	uxth	r2, r3
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	801a      	strh	r2, [r3, #0]
 8004234:	e017      	b.n	8004266 <PCD_EP_ISR_Handler+0x6d4>
 8004236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d113      	bne.n	8004266 <PCD_EP_ISR_Handler+0x6d4>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004246:	b29b      	uxth	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800424c:	4413      	add	r3, r2
 800424e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	011a      	lsls	r2, r3, #4
 8004256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004258:	4413      	add	r3, r2
 800425a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800425e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004262:	2200      	movs	r2, #0
 8004264:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	4619      	mov	r1, r3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f005 ffa6 	bl	800a1be <HAL_PCD_DataInStageCallback>
 8004272:	e053      	b.n	800431c <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004274:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d146      	bne.n	800430e <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004288:	b29b      	uxth	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	4413      	add	r3, r2
 8004294:	3302      	adds	r3, #2
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80042ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ae:	699a      	ldr	r2, [r3, #24]
 80042b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d907      	bls.n	80042c8 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80042b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ba:	699a      	ldr	r2, [r3, #24]
 80042bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80042c0:	1ad2      	subs	r2, r2, r3
 80042c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c4:	619a      	str	r2, [r3, #24]
 80042c6:	e002      	b.n	80042ce <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80042c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ca:	2200      	movs	r2, #0
 80042cc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80042ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	4619      	mov	r1, r3
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f005 ff6e 	bl	800a1be <HAL_PCD_DataInStageCallback>
 80042e2:	e01b      	b.n	800431c <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80042e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e6:	695a      	ldr	r2, [r3, #20]
 80042e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80042ec:	441a      	add	r2, r3
 80042ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80042f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f4:	69da      	ldr	r2, [r3, #28]
 80042f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80042fa:	441a      	add	r2, r3
 80042fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042fe:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004306:	4618      	mov	r0, r3
 8004308:	f002 fc0a 	bl	8006b20 <USB_EPStartXfer>
 800430c:	e006      	b.n	800431c <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800430e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004312:	461a      	mov	r2, r3
 8004314:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f91b 	bl	8004552 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004324:	b29b      	uxth	r3, r3
 8004326:	b21b      	sxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	f6ff ac37 	blt.w	8003b9c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3758      	adds	r7, #88	; 0x58
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	4613      	mov	r3, r2
 8004344:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d07e      	beq.n	800444e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004358:	b29b      	uxth	r3, r3
 800435a:	461a      	mov	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4413      	add	r3, r2
 8004364:	3302      	adds	r3, #2
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	6812      	ldr	r2, [r2, #0]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004378:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	8b7b      	ldrh	r3, [r7, #26]
 8004380:	429a      	cmp	r2, r3
 8004382:	d306      	bcc.n	8004392 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	699a      	ldr	r2, [r3, #24]
 8004388:	8b7b      	ldrh	r3, [r7, #26]
 800438a:	1ad2      	subs	r2, r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	619a      	str	r2, [r3, #24]
 8004390:	e002      	b.n	8004398 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2200      	movs	r2, #0
 8004396:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d123      	bne.n	80043e8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	833b      	strh	r3, [r7, #24]
 80043bc:	8b3b      	ldrh	r3, [r7, #24]
 80043be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043c2:	833b      	strh	r3, [r7, #24]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	441a      	add	r2, r3
 80043d2:	8b3b      	ldrh	r3, [r7, #24]
 80043d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80043e8:	88fb      	ldrh	r3, [r7, #6]
 80043ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d01f      	beq.n	8004432 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440c:	82fb      	strh	r3, [r7, #22]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	441a      	add	r2, r3
 800441c:	8afb      	ldrh	r3, [r7, #22]
 800441e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800442a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800442e:	b29b      	uxth	r3, r3
 8004430:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004432:	8b7b      	ldrh	r3, [r7, #26]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 8087 	beq.w	8004548 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	6959      	ldr	r1, [r3, #20]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	891a      	ldrh	r2, [r3, #8]
 8004446:	8b7b      	ldrh	r3, [r7, #26]
 8004448:	f004 f89e 	bl	8008588 <USB_ReadPMA>
 800444c:	e07c      	b.n	8004548 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004456:	b29b      	uxth	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4413      	add	r3, r2
 8004462:	3306      	adds	r3, #6
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004476:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	699a      	ldr	r2, [r3, #24]
 800447c:	8b7b      	ldrh	r3, [r7, #26]
 800447e:	429a      	cmp	r2, r3
 8004480:	d306      	bcc.n	8004490 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	699a      	ldr	r2, [r3, #24]
 8004486:	8b7b      	ldrh	r3, [r7, #26]
 8004488:	1ad2      	subs	r2, r2, r3
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	619a      	str	r2, [r3, #24]
 800448e:	e002      	b.n	8004496 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	2200      	movs	r2, #0
 8004494:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d123      	bne.n	80044e6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b8:	83fb      	strh	r3, [r7, #30]
 80044ba:	8bfb      	ldrh	r3, [r7, #30]
 80044bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80044c0:	83fb      	strh	r3, [r7, #30]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	441a      	add	r2, r3
 80044d0:	8bfb      	ldrh	r3, [r7, #30]
 80044d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d11f      	bne.n	8004530 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	b29b      	uxth	r3, r3
 8004502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450a:	83bb      	strh	r3, [r7, #28]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	461a      	mov	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	441a      	add	r2, r3
 800451a:	8bbb      	ldrh	r3, [r7, #28]
 800451c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004528:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800452c:	b29b      	uxth	r3, r3
 800452e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004530:	8b7b      	ldrh	r3, [r7, #26]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d008      	beq.n	8004548 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	6959      	ldr	r1, [r3, #20]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	895a      	ldrh	r2, [r3, #10]
 8004542:	8b7b      	ldrh	r3, [r7, #26]
 8004544:	f004 f820 	bl	8008588 <USB_ReadPMA>
    }
  }

  return count;
 8004548:	8b7b      	ldrh	r3, [r7, #26]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b0a4      	sub	sp, #144	; 0x90
 8004556:	af00      	add	r7, sp, #0
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	4613      	mov	r3, r2
 800455e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 81dd 	beq.w	8004926 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004574:	b29b      	uxth	r3, r3
 8004576:	461a      	mov	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	4413      	add	r3, r2
 8004580:	3302      	adds	r3, #2
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	6812      	ldr	r2, [r2, #0]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004594:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	699a      	ldr	r2, [r3, #24]
 800459c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d907      	bls.n	80045b4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80045ac:	1ad2      	subs	r2, r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	619a      	str	r2, [r3, #24]
 80045b2:	e002      	b.n	80045ba <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2200      	movs	r2, #0
 80045b8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f040 80b9 	bne.w	8004736 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	785b      	ldrb	r3, [r3, #1]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d126      	bne.n	800461a <HAL_PCD_EP_DB_Transmit+0xc8>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045da:	b29b      	uxth	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e0:	4413      	add	r3, r2
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	011a      	lsls	r2, r3, #4
 80045ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ec:	4413      	add	r3, r2
 80045ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80045f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045fe:	b29a      	uxth	r2, r3
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004602:	801a      	strh	r2, [r3, #0]
 8004604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	b29b      	uxth	r3, r3
 800460a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800460e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004612:	b29a      	uxth	r2, r3
 8004614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004616:	801a      	strh	r2, [r3, #0]
 8004618:	e01a      	b.n	8004650 <HAL_PCD_EP_DB_Transmit+0xfe>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	785b      	ldrb	r3, [r3, #1]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d116      	bne.n	8004650 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	637b      	str	r3, [r7, #52]	; 0x34
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004630:	b29b      	uxth	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004636:	4413      	add	r3, r2
 8004638:	637b      	str	r3, [r7, #52]	; 0x34
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	011a      	lsls	r2, r3, #4
 8004640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004642:	4413      	add	r3, r2
 8004644:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004648:	633b      	str	r3, [r7, #48]	; 0x30
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	2200      	movs	r2, #0
 800464e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	785b      	ldrb	r3, [r3, #1]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d126      	bne.n	80046ac <HAL_PCD_EP_DB_Transmit+0x15a>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	61fb      	str	r3, [r7, #28]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800466c:	b29b      	uxth	r3, r3
 800466e:	461a      	mov	r2, r3
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	4413      	add	r3, r2
 8004674:	61fb      	str	r3, [r7, #28]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	011a      	lsls	r2, r3, #4
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	4413      	add	r3, r2
 8004680:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004684:	61bb      	str	r3, [r7, #24]
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	b29b      	uxth	r3, r3
 800468c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004690:	b29a      	uxth	r2, r3
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	801a      	strh	r2, [r3, #0]
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	b29b      	uxth	r3, r3
 800469c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	801a      	strh	r2, [r3, #0]
 80046aa:	e017      	b.n	80046dc <HAL_PCD_EP_DB_Transmit+0x18a>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	785b      	ldrb	r3, [r3, #1]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d113      	bne.n	80046dc <HAL_PCD_EP_DB_Transmit+0x18a>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046bc:	b29b      	uxth	r3, r3
 80046be:	461a      	mov	r2, r3
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	4413      	add	r3, r2
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	011a      	lsls	r2, r3, #4
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	4413      	add	r3, r2
 80046d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046d4:	623b      	str	r3, [r7, #32]
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	2200      	movs	r2, #0
 80046da:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	4619      	mov	r1, r3
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f005 fd6b 	bl	800a1be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046e8:	88fb      	ldrh	r3, [r7, #6]
 80046ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 82fc 	beq.w	8004cec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470e:	82fb      	strh	r3, [r7, #22]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	441a      	add	r2, r3
 800471e:	8afb      	ldrh	r3, [r7, #22]
 8004720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004728:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800472c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004730:	b29b      	uxth	r3, r3
 8004732:	8013      	strh	r3, [r2, #0]
 8004734:	e2da      	b.n	8004cec <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004736:	88fb      	ldrh	r3, [r7, #6]
 8004738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d021      	beq.n	8004784 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	b29b      	uxth	r3, r3
 8004752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	441a      	add	r2, r3
 800476c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800477c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004780:	b29b      	uxth	r3, r3
 8004782:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800478a:	2b01      	cmp	r3, #1
 800478c:	f040 82ae 	bne.w	8004cec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	695a      	ldr	r2, [r3, #20]
 8004794:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004798:	441a      	add	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	69da      	ldr	r2, [r3, #28]
 80047a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80047a6:	441a      	add	r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	6a1a      	ldr	r2, [r3, #32]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d30b      	bcc.n	80047d0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	6a1a      	ldr	r2, [r3, #32]
 80047c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047c8:	1ad2      	subs	r2, r2, r3
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	621a      	str	r2, [r3, #32]
 80047ce:	e017      	b.n	8004800 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d108      	bne.n	80047ea <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80047d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80047dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80047e8:	e00a      	b.n	8004800 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2200      	movs	r2, #0
 80047fe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	785b      	ldrb	r3, [r3, #1]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d165      	bne.n	80048d4 <HAL_PCD_EP_DB_Transmit+0x382>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004816:	b29b      	uxth	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481c:	4413      	add	r3, r2
 800481e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	011a      	lsls	r2, r3, #4
 8004826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004828:	4413      	add	r3, r2
 800482a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800482e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	b29b      	uxth	r3, r3
 8004836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800483a:	b29a      	uxth	r2, r3
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	801a      	strh	r2, [r3, #0]
 8004840:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004844:	2b3e      	cmp	r3, #62	; 0x3e
 8004846:	d91d      	bls.n	8004884 <HAL_PCD_EP_DB_Transmit+0x332>
 8004848:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004850:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	2b00      	cmp	r3, #0
 800485a:	d102      	bne.n	8004862 <HAL_PCD_EP_DB_Transmit+0x310>
 800485c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800485e:	3b01      	subs	r3, #1
 8004860:	64bb      	str	r3, [r7, #72]	; 0x48
 8004862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b29a      	uxth	r2, r3
 8004868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800486a:	b29b      	uxth	r3, r3
 800486c:	029b      	lsls	r3, r3, #10
 800486e:	b29b      	uxth	r3, r3
 8004870:	4313      	orrs	r3, r2
 8004872:	b29b      	uxth	r3, r3
 8004874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800487c:	b29a      	uxth	r2, r3
 800487e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004880:	801a      	strh	r2, [r3, #0]
 8004882:	e044      	b.n	800490e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004884:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10a      	bne.n	80048a2 <HAL_PCD_EP_DB_Transmit+0x350>
 800488c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	b29b      	uxth	r3, r3
 8004892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800489a:	b29a      	uxth	r2, r3
 800489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489e:	801a      	strh	r2, [r3, #0]
 80048a0:	e035      	b.n	800490e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80048a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80048aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_PCD_EP_DB_Transmit+0x36a>
 80048b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b8:	3301      	adds	r3, #1
 80048ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80048bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	029b      	lsls	r3, r3, #10
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	4313      	orrs	r3, r2
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d0:	801a      	strh	r2, [r3, #0]
 80048d2:	e01c      	b.n	800490e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	785b      	ldrb	r3, [r3, #1]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d118      	bne.n	800490e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	647b      	str	r3, [r7, #68]	; 0x44
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048f0:	4413      	add	r3, r2
 80048f2:	647b      	str	r3, [r7, #68]	; 0x44
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	011a      	lsls	r2, r3, #4
 80048fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048fc:	4413      	add	r3, r2
 80048fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004902:	643b      	str	r3, [r7, #64]	; 0x40
 8004904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004908:	b29a      	uxth	r2, r3
 800490a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800490c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6818      	ldr	r0, [r3, #0]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	6959      	ldr	r1, [r3, #20]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	891a      	ldrh	r2, [r3, #8]
 800491a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800491e:	b29b      	uxth	r3, r3
 8004920:	f003 fded 	bl	80084fe <USB_WritePMA>
 8004924:	e1e2      	b.n	8004cec <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800492e:	b29b      	uxth	r3, r3
 8004930:	461a      	mov	r2, r3
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	4413      	add	r3, r2
 800493a:	3306      	adds	r3, #6
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	6812      	ldr	r2, [r2, #0]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800494e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800495a:	429a      	cmp	r2, r3
 800495c:	d307      	bcc.n	800496e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	699a      	ldr	r2, [r3, #24]
 8004962:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004966:	1ad2      	subs	r2, r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	619a      	str	r2, [r3, #24]
 800496c:	e002      	b.n	8004974 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2200      	movs	r2, #0
 8004972:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	2b00      	cmp	r3, #0
 800497a:	f040 80c0 	bne.w	8004afe <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	785b      	ldrb	r3, [r3, #1]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d126      	bne.n	80049d4 <HAL_PCD_EP_DB_Transmit+0x482>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004994:	b29b      	uxth	r3, r3
 8004996:	461a      	mov	r2, r3
 8004998:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800499a:	4413      	add	r3, r2
 800499c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	011a      	lsls	r2, r3, #4
 80049a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049a6:	4413      	add	r3, r2
 80049a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80049ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049bc:	801a      	strh	r2, [r3, #0]
 80049be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049d0:	801a      	strh	r2, [r3, #0]
 80049d2:	e01a      	b.n	8004a0a <HAL_PCD_EP_DB_Transmit+0x4b8>
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	785b      	ldrb	r3, [r3, #1]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d116      	bne.n	8004a0a <HAL_PCD_EP_DB_Transmit+0x4b8>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	667b      	str	r3, [r7, #100]	; 0x64
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	461a      	mov	r2, r3
 80049ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049f0:	4413      	add	r3, r2
 80049f2:	667b      	str	r3, [r7, #100]	; 0x64
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	011a      	lsls	r2, r3, #4
 80049fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049fc:	4413      	add	r3, r2
 80049fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a02:	663b      	str	r3, [r7, #96]	; 0x60
 8004a04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a06:	2200      	movs	r2, #0
 8004a08:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	677b      	str	r3, [r7, #116]	; 0x74
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	785b      	ldrb	r3, [r3, #1]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d12b      	bne.n	8004a70 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a2c:	4413      	add	r3, r2
 8004a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	011a      	lsls	r2, r3, #4
 8004a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a38:	4413      	add	r3, r2
 8004a3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a54:	801a      	strh	r2, [r3, #0]
 8004a56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a6c:	801a      	strh	r2, [r3, #0]
 8004a6e:	e017      	b.n	8004aa0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	785b      	ldrb	r3, [r3, #1]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d113      	bne.n	8004aa0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a86:	4413      	add	r3, r2
 8004a88:	677b      	str	r3, [r7, #116]	; 0x74
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	011a      	lsls	r2, r3, #4
 8004a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a92:	4413      	add	r3, r2
 8004a94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a98:	673b      	str	r3, [r7, #112]	; 0x70
 8004a9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f005 fb89 	bl	800a1be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004aac:	88fb      	ldrh	r3, [r7, #6]
 8004aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f040 811a 	bne.w	8004cec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	441a      	add	r2, r3
 8004ae4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	8013      	strh	r3, [r2, #0]
 8004afc:	e0f6      	b.n	8004cec <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d121      	bne.n	8004b4c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	441a      	add	r2, r3
 8004b34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	f040 80ca 	bne.w	8004cec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	695a      	ldr	r2, [r3, #20]
 8004b5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b60:	441a      	add	r2, r3
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	69da      	ldr	r2, [r3, #28]
 8004b6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b6e:	441a      	add	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	6a1a      	ldr	r2, [r3, #32]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d30b      	bcc.n	8004b98 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	6a1a      	ldr	r2, [r3, #32]
 8004b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b90:	1ad2      	subs	r2, r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	621a      	str	r2, [r3, #32]
 8004b96:	e017      	b.n	8004bc8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d108      	bne.n	8004bb2 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004ba0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004ba4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004bb0:	e00a      	b.n	8004bc8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	657b      	str	r3, [r7, #84]	; 0x54
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	785b      	ldrb	r3, [r3, #1]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d165      	bne.n	8004ca2 <HAL_PCD_EP_DB_Transmit+0x750>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	461a      	mov	r2, r3
 8004be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bea:	4413      	add	r3, r2
 8004bec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	011a      	lsls	r2, r3, #4
 8004bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bfc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c0c:	801a      	strh	r2, [r3, #0]
 8004c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c12:	2b3e      	cmp	r3, #62	; 0x3e
 8004c14:	d91d      	bls.n	8004c52 <HAL_PCD_EP_DB_Transmit+0x700>
 8004c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c22:	f003 031f 	and.w	r3, r3, #31
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d102      	bne.n	8004c30 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004c2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	029b      	lsls	r3, r3, #10
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c4e:	801a      	strh	r2, [r3, #0]
 8004c50:	e041      	b.n	8004cd6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10a      	bne.n	8004c70 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004c5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c6c:	801a      	strh	r2, [r3, #0]
 8004c6e:	e032      	b.n	8004cd6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c74:	085b      	lsrs	r3, r3, #1
 8004c76:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_PCD_EP_DB_Transmit+0x738>
 8004c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c86:	3301      	adds	r3, #1
 8004c88:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	029b      	lsls	r3, r3, #10
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c9e:	801a      	strh	r2, [r3, #0]
 8004ca0:	e019      	b.n	8004cd6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	785b      	ldrb	r3, [r3, #1]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d115      	bne.n	8004cd6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb8:	4413      	add	r3, r2
 8004cba:	657b      	str	r3, [r7, #84]	; 0x54
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	011a      	lsls	r2, r3, #4
 8004cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cca:	653b      	str	r3, [r7, #80]	; 0x50
 8004ccc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cd4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	6959      	ldr	r1, [r3, #20]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	895a      	ldrh	r2, [r3, #10]
 8004ce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	f003 fc09 	bl	80084fe <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d06:	82bb      	strh	r3, [r7, #20]
 8004d08:	8abb      	ldrh	r3, [r7, #20]
 8004d0a:	f083 0310 	eor.w	r3, r3, #16
 8004d0e:	82bb      	strh	r3, [r7, #20]
 8004d10:	8abb      	ldrh	r3, [r7, #20]
 8004d12:	f083 0320 	eor.w	r3, r3, #32
 8004d16:	82bb      	strh	r3, [r7, #20]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	441a      	add	r2, r3
 8004d26:	8abb      	ldrh	r3, [r7, #20]
 8004d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3790      	adds	r7, #144	; 0x90
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b087      	sub	sp, #28
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	607b      	str	r3, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	817b      	strh	r3, [r7, #10]
 8004d54:	4613      	mov	r3, r2
 8004d56:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004d58:	897b      	ldrh	r3, [r7, #10]
 8004d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00b      	beq.n	8004d7c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d64:	897b      	ldrh	r3, [r7, #10]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	e009      	b.n	8004d90 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d7c:	897a      	ldrh	r2, [r7, #10]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004d90:	893b      	ldrh	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d107      	bne.n	8004da6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	80da      	strh	r2, [r3, #6]
 8004da4:	e00b      	b.n	8004dbe <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2201      	movs	r2, #1
 8004daa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	0c1b      	lsrs	r3, r3, #16
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr
	...

08004dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e272      	b.n	80052c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 8087 	beq.w	8004efa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004dec:	4b92      	ldr	r3, [pc, #584]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f003 030c 	and.w	r3, r3, #12
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d00c      	beq.n	8004e12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004df8:	4b8f      	ldr	r3, [pc, #572]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f003 030c 	and.w	r3, r3, #12
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d112      	bne.n	8004e2a <HAL_RCC_OscConfig+0x5e>
 8004e04:	4b8c      	ldr	r3, [pc, #560]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e10:	d10b      	bne.n	8004e2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e12:	4b89      	ldr	r3, [pc, #548]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d06c      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x12c>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d168      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e24c      	b.n	80052c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e32:	d106      	bne.n	8004e42 <HAL_RCC_OscConfig+0x76>
 8004e34:	4b80      	ldr	r3, [pc, #512]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a7f      	ldr	r2, [pc, #508]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	e02e      	b.n	8004ea0 <HAL_RCC_OscConfig+0xd4>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10c      	bne.n	8004e64 <HAL_RCC_OscConfig+0x98>
 8004e4a:	4b7b      	ldr	r3, [pc, #492]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a7a      	ldr	r2, [pc, #488]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	4b78      	ldr	r3, [pc, #480]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a77      	ldr	r2, [pc, #476]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	e01d      	b.n	8004ea0 <HAL_RCC_OscConfig+0xd4>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e6c:	d10c      	bne.n	8004e88 <HAL_RCC_OscConfig+0xbc>
 8004e6e:	4b72      	ldr	r3, [pc, #456]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a71      	ldr	r2, [pc, #452]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	4b6f      	ldr	r3, [pc, #444]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a6e      	ldr	r2, [pc, #440]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	e00b      	b.n	8004ea0 <HAL_RCC_OscConfig+0xd4>
 8004e88:	4b6b      	ldr	r3, [pc, #428]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a6a      	ldr	r2, [pc, #424]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e92:	6013      	str	r3, [r2, #0]
 8004e94:	4b68      	ldr	r3, [pc, #416]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a67      	ldr	r2, [pc, #412]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d013      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea8:	f7fd f9a4 	bl	80021f4 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eb0:	f7fd f9a0 	bl	80021f4 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b64      	cmp	r3, #100	; 0x64
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e200      	b.n	80052c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec2:	4b5d      	ldr	r3, [pc, #372]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0f0      	beq.n	8004eb0 <HAL_RCC_OscConfig+0xe4>
 8004ece:	e014      	b.n	8004efa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed0:	f7fd f990 	bl	80021f4 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ed8:	f7fd f98c 	bl	80021f4 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b64      	cmp	r3, #100	; 0x64
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e1ec      	b.n	80052c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eea:	4b53      	ldr	r3, [pc, #332]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f0      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x10c>
 8004ef6:	e000      	b.n	8004efa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d063      	beq.n	8004fce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f06:	4b4c      	ldr	r3, [pc, #304]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f003 030c 	and.w	r3, r3, #12
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00b      	beq.n	8004f2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f12:	4b49      	ldr	r3, [pc, #292]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f003 030c 	and.w	r3, r3, #12
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d11c      	bne.n	8004f58 <HAL_RCC_OscConfig+0x18c>
 8004f1e:	4b46      	ldr	r3, [pc, #280]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d116      	bne.n	8004f58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f2a:	4b43      	ldr	r3, [pc, #268]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d005      	beq.n	8004f42 <HAL_RCC_OscConfig+0x176>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d001      	beq.n	8004f42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e1c0      	b.n	80052c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f42:	4b3d      	ldr	r3, [pc, #244]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4939      	ldr	r1, [pc, #228]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f56:	e03a      	b.n	8004fce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d020      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f60:	4b36      	ldr	r3, [pc, #216]	; (800503c <HAL_RCC_OscConfig+0x270>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f66:	f7fd f945 	bl	80021f4 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f6e:	f7fd f941 	bl	80021f4 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e1a1      	b.n	80052c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f80:	4b2d      	ldr	r3, [pc, #180]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f0      	beq.n	8004f6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8c:	4b2a      	ldr	r3, [pc, #168]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	4927      	ldr	r1, [pc, #156]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	600b      	str	r3, [r1, #0]
 8004fa0:	e015      	b.n	8004fce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fa2:	4b26      	ldr	r3, [pc, #152]	; (800503c <HAL_RCC_OscConfig+0x270>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa8:	f7fd f924 	bl	80021f4 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fb0:	f7fd f920 	bl	80021f4 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e180      	b.n	80052c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fc2:	4b1d      	ldr	r3, [pc, #116]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d03a      	beq.n	8005050 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d019      	beq.n	8005016 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fe2:	4b17      	ldr	r3, [pc, #92]	; (8005040 <HAL_RCC_OscConfig+0x274>)
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe8:	f7fd f904 	bl	80021f4 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff0:	f7fd f900 	bl	80021f4 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e160      	b.n	80052c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005002:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <HAL_RCC_OscConfig+0x26c>)
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f0      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800500e:	2001      	movs	r0, #1
 8005010:	f000 fa9c 	bl	800554c <RCC_Delay>
 8005014:	e01c      	b.n	8005050 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005016:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <HAL_RCC_OscConfig+0x274>)
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800501c:	f7fd f8ea 	bl	80021f4 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005022:	e00f      	b.n	8005044 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005024:	f7fd f8e6 	bl	80021f4 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d908      	bls.n	8005044 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e146      	b.n	80052c4 <HAL_RCC_OscConfig+0x4f8>
 8005036:	bf00      	nop
 8005038:	40021000 	.word	0x40021000
 800503c:	42420000 	.word	0x42420000
 8005040:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005044:	4b92      	ldr	r3, [pc, #584]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e9      	bne.n	8005024 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 80a6 	beq.w	80051aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800505e:	2300      	movs	r3, #0
 8005060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005062:	4b8b      	ldr	r3, [pc, #556]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10d      	bne.n	800508a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800506e:	4b88      	ldr	r3, [pc, #544]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	4a87      	ldr	r2, [pc, #540]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 8005074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005078:	61d3      	str	r3, [r2, #28]
 800507a:	4b85      	ldr	r3, [pc, #532]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005082:	60bb      	str	r3, [r7, #8]
 8005084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005086:	2301      	movs	r3, #1
 8005088:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508a:	4b82      	ldr	r3, [pc, #520]	; (8005294 <HAL_RCC_OscConfig+0x4c8>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005092:	2b00      	cmp	r3, #0
 8005094:	d118      	bne.n	80050c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005096:	4b7f      	ldr	r3, [pc, #508]	; (8005294 <HAL_RCC_OscConfig+0x4c8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a7e      	ldr	r2, [pc, #504]	; (8005294 <HAL_RCC_OscConfig+0x4c8>)
 800509c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050a2:	f7fd f8a7 	bl	80021f4 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050aa:	f7fd f8a3 	bl	80021f4 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b64      	cmp	r3, #100	; 0x64
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e103      	b.n	80052c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050bc:	4b75      	ldr	r3, [pc, #468]	; (8005294 <HAL_RCC_OscConfig+0x4c8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d106      	bne.n	80050de <HAL_RCC_OscConfig+0x312>
 80050d0:	4b6f      	ldr	r3, [pc, #444]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	4a6e      	ldr	r2, [pc, #440]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 80050d6:	f043 0301 	orr.w	r3, r3, #1
 80050da:	6213      	str	r3, [r2, #32]
 80050dc:	e02d      	b.n	800513a <HAL_RCC_OscConfig+0x36e>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10c      	bne.n	8005100 <HAL_RCC_OscConfig+0x334>
 80050e6:	4b6a      	ldr	r3, [pc, #424]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	4a69      	ldr	r2, [pc, #420]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 80050ec:	f023 0301 	bic.w	r3, r3, #1
 80050f0:	6213      	str	r3, [r2, #32]
 80050f2:	4b67      	ldr	r3, [pc, #412]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	4a66      	ldr	r2, [pc, #408]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 80050f8:	f023 0304 	bic.w	r3, r3, #4
 80050fc:	6213      	str	r3, [r2, #32]
 80050fe:	e01c      	b.n	800513a <HAL_RCC_OscConfig+0x36e>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	2b05      	cmp	r3, #5
 8005106:	d10c      	bne.n	8005122 <HAL_RCC_OscConfig+0x356>
 8005108:	4b61      	ldr	r3, [pc, #388]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	4a60      	ldr	r2, [pc, #384]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 800510e:	f043 0304 	orr.w	r3, r3, #4
 8005112:	6213      	str	r3, [r2, #32]
 8005114:	4b5e      	ldr	r3, [pc, #376]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	4a5d      	ldr	r2, [pc, #372]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 800511a:	f043 0301 	orr.w	r3, r3, #1
 800511e:	6213      	str	r3, [r2, #32]
 8005120:	e00b      	b.n	800513a <HAL_RCC_OscConfig+0x36e>
 8005122:	4b5b      	ldr	r3, [pc, #364]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	4a5a      	ldr	r2, [pc, #360]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 8005128:	f023 0301 	bic.w	r3, r3, #1
 800512c:	6213      	str	r3, [r2, #32]
 800512e:	4b58      	ldr	r3, [pc, #352]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	4a57      	ldr	r2, [pc, #348]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 8005134:	f023 0304 	bic.w	r3, r3, #4
 8005138:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d015      	beq.n	800516e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005142:	f7fd f857 	bl	80021f4 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005148:	e00a      	b.n	8005160 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514a:	f7fd f853 	bl	80021f4 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f241 3288 	movw	r2, #5000	; 0x1388
 8005158:	4293      	cmp	r3, r2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e0b1      	b.n	80052c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005160:	4b4b      	ldr	r3, [pc, #300]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0ee      	beq.n	800514a <HAL_RCC_OscConfig+0x37e>
 800516c:	e014      	b.n	8005198 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800516e:	f7fd f841 	bl	80021f4 <HAL_GetTick>
 8005172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005174:	e00a      	b.n	800518c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005176:	f7fd f83d 	bl	80021f4 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	f241 3288 	movw	r2, #5000	; 0x1388
 8005184:	4293      	cmp	r3, r2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e09b      	b.n	80052c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800518c:	4b40      	ldr	r3, [pc, #256]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1ee      	bne.n	8005176 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005198:	7dfb      	ldrb	r3, [r7, #23]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d105      	bne.n	80051aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800519e:	4b3c      	ldr	r3, [pc, #240]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	4a3b      	ldr	r2, [pc, #236]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 80051a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 8087 	beq.w	80052c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051b4:	4b36      	ldr	r3, [pc, #216]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f003 030c 	and.w	r3, r3, #12
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d061      	beq.n	8005284 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d146      	bne.n	8005256 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c8:	4b33      	ldr	r3, [pc, #204]	; (8005298 <HAL_RCC_OscConfig+0x4cc>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ce:	f7fd f811 	bl	80021f4 <HAL_GetTick>
 80051d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051d4:	e008      	b.n	80051e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d6:	f7fd f80d 	bl	80021f4 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e06d      	b.n	80052c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051e8:	4b29      	ldr	r3, [pc, #164]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1f0      	bne.n	80051d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fc:	d108      	bne.n	8005210 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051fe:	4b24      	ldr	r3, [pc, #144]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	4921      	ldr	r1, [pc, #132]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 800520c:	4313      	orrs	r3, r2
 800520e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005210:	4b1f      	ldr	r3, [pc, #124]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a19      	ldr	r1, [r3, #32]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	430b      	orrs	r3, r1
 8005222:	491b      	ldr	r1, [pc, #108]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 8005224:	4313      	orrs	r3, r2
 8005226:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005228:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <HAL_RCC_OscConfig+0x4cc>)
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522e:	f7fc ffe1 	bl	80021f4 <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005236:	f7fc ffdd 	bl	80021f4 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e03d      	b.n	80052c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005248:	4b11      	ldr	r3, [pc, #68]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0f0      	beq.n	8005236 <HAL_RCC_OscConfig+0x46a>
 8005254:	e035      	b.n	80052c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005256:	4b10      	ldr	r3, [pc, #64]	; (8005298 <HAL_RCC_OscConfig+0x4cc>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525c:	f7fc ffca 	bl	80021f4 <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005264:	f7fc ffc6 	bl	80021f4 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e026      	b.n	80052c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005276:	4b06      	ldr	r3, [pc, #24]	; (8005290 <HAL_RCC_OscConfig+0x4c4>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f0      	bne.n	8005264 <HAL_RCC_OscConfig+0x498>
 8005282:	e01e      	b.n	80052c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d107      	bne.n	800529c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e019      	b.n	80052c4 <HAL_RCC_OscConfig+0x4f8>
 8005290:	40021000 	.word	0x40021000
 8005294:	40007000 	.word	0x40007000
 8005298:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800529c:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <HAL_RCC_OscConfig+0x500>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d106      	bne.n	80052be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d001      	beq.n	80052c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40021000 	.word	0x40021000

080052d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e0d0      	b.n	8005486 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052e4:	4b6a      	ldr	r3, [pc, #424]	; (8005490 <HAL_RCC_ClockConfig+0x1c0>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d910      	bls.n	8005314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f2:	4b67      	ldr	r3, [pc, #412]	; (8005490 <HAL_RCC_ClockConfig+0x1c0>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f023 0207 	bic.w	r2, r3, #7
 80052fa:	4965      	ldr	r1, [pc, #404]	; (8005490 <HAL_RCC_ClockConfig+0x1c0>)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	4313      	orrs	r3, r2
 8005300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005302:	4b63      	ldr	r3, [pc, #396]	; (8005490 <HAL_RCC_ClockConfig+0x1c0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d001      	beq.n	8005314 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e0b8      	b.n	8005486 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d020      	beq.n	8005362 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800532c:	4b59      	ldr	r3, [pc, #356]	; (8005494 <HAL_RCC_ClockConfig+0x1c4>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	4a58      	ldr	r2, [pc, #352]	; (8005494 <HAL_RCC_ClockConfig+0x1c4>)
 8005332:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005336:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0308 	and.w	r3, r3, #8
 8005340:	2b00      	cmp	r3, #0
 8005342:	d005      	beq.n	8005350 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005344:	4b53      	ldr	r3, [pc, #332]	; (8005494 <HAL_RCC_ClockConfig+0x1c4>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	4a52      	ldr	r2, [pc, #328]	; (8005494 <HAL_RCC_ClockConfig+0x1c4>)
 800534a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800534e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005350:	4b50      	ldr	r3, [pc, #320]	; (8005494 <HAL_RCC_ClockConfig+0x1c4>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	494d      	ldr	r1, [pc, #308]	; (8005494 <HAL_RCC_ClockConfig+0x1c4>)
 800535e:	4313      	orrs	r3, r2
 8005360:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d040      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d107      	bne.n	8005386 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005376:	4b47      	ldr	r3, [pc, #284]	; (8005494 <HAL_RCC_ClockConfig+0x1c4>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d115      	bne.n	80053ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e07f      	b.n	8005486 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d107      	bne.n	800539e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800538e:	4b41      	ldr	r3, [pc, #260]	; (8005494 <HAL_RCC_ClockConfig+0x1c4>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d109      	bne.n	80053ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e073      	b.n	8005486 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800539e:	4b3d      	ldr	r3, [pc, #244]	; (8005494 <HAL_RCC_ClockConfig+0x1c4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e06b      	b.n	8005486 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053ae:	4b39      	ldr	r3, [pc, #228]	; (8005494 <HAL_RCC_ClockConfig+0x1c4>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f023 0203 	bic.w	r2, r3, #3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	4936      	ldr	r1, [pc, #216]	; (8005494 <HAL_RCC_ClockConfig+0x1c4>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053c0:	f7fc ff18 	bl	80021f4 <HAL_GetTick>
 80053c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053c6:	e00a      	b.n	80053de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053c8:	f7fc ff14 	bl	80021f4 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e053      	b.n	8005486 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053de:	4b2d      	ldr	r3, [pc, #180]	; (8005494 <HAL_RCC_ClockConfig+0x1c4>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f003 020c 	and.w	r2, r3, #12
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d1eb      	bne.n	80053c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053f0:	4b27      	ldr	r3, [pc, #156]	; (8005490 <HAL_RCC_ClockConfig+0x1c0>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d210      	bcs.n	8005420 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053fe:	4b24      	ldr	r3, [pc, #144]	; (8005490 <HAL_RCC_ClockConfig+0x1c0>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f023 0207 	bic.w	r2, r3, #7
 8005406:	4922      	ldr	r1, [pc, #136]	; (8005490 <HAL_RCC_ClockConfig+0x1c0>)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	4313      	orrs	r3, r2
 800540c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800540e:	4b20      	ldr	r3, [pc, #128]	; (8005490 <HAL_RCC_ClockConfig+0x1c0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d001      	beq.n	8005420 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e032      	b.n	8005486 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800542c:	4b19      	ldr	r3, [pc, #100]	; (8005494 <HAL_RCC_ClockConfig+0x1c4>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	4916      	ldr	r1, [pc, #88]	; (8005494 <HAL_RCC_ClockConfig+0x1c4>)
 800543a:	4313      	orrs	r3, r2
 800543c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	2b00      	cmp	r3, #0
 8005448:	d009      	beq.n	800545e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800544a:	4b12      	ldr	r3, [pc, #72]	; (8005494 <HAL_RCC_ClockConfig+0x1c4>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	490e      	ldr	r1, [pc, #56]	; (8005494 <HAL_RCC_ClockConfig+0x1c4>)
 800545a:	4313      	orrs	r3, r2
 800545c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800545e:	f000 f821 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 8005462:	4602      	mov	r2, r0
 8005464:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <HAL_RCC_ClockConfig+0x1c4>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	091b      	lsrs	r3, r3, #4
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	490a      	ldr	r1, [pc, #40]	; (8005498 <HAL_RCC_ClockConfig+0x1c8>)
 8005470:	5ccb      	ldrb	r3, [r1, r3]
 8005472:	fa22 f303 	lsr.w	r3, r2, r3
 8005476:	4a09      	ldr	r2, [pc, #36]	; (800549c <HAL_RCC_ClockConfig+0x1cc>)
 8005478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800547a:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <HAL_RCC_ClockConfig+0x1d0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f7fc fe76 	bl	8002170 <HAL_InitTick>

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40022000 	.word	0x40022000
 8005494:	40021000 	.word	0x40021000
 8005498:	0800d574 	.word	0x0800d574
 800549c:	20000000 	.word	0x20000000
 80054a0:	20000004 	.word	0x20000004

080054a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	2300      	movs	r3, #0
 80054b0:	60bb      	str	r3, [r7, #8]
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	2300      	movs	r3, #0
 80054b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80054be:	4b1e      	ldr	r3, [pc, #120]	; (8005538 <HAL_RCC_GetSysClockFreq+0x94>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 030c 	and.w	r3, r3, #12
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d002      	beq.n	80054d4 <HAL_RCC_GetSysClockFreq+0x30>
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d003      	beq.n	80054da <HAL_RCC_GetSysClockFreq+0x36>
 80054d2:	e027      	b.n	8005524 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054d4:	4b19      	ldr	r3, [pc, #100]	; (800553c <HAL_RCC_GetSysClockFreq+0x98>)
 80054d6:	613b      	str	r3, [r7, #16]
      break;
 80054d8:	e027      	b.n	800552a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	0c9b      	lsrs	r3, r3, #18
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	4a17      	ldr	r2, [pc, #92]	; (8005540 <HAL_RCC_GetSysClockFreq+0x9c>)
 80054e4:	5cd3      	ldrb	r3, [r2, r3]
 80054e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d010      	beq.n	8005514 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054f2:	4b11      	ldr	r3, [pc, #68]	; (8005538 <HAL_RCC_GetSysClockFreq+0x94>)
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	0c5b      	lsrs	r3, r3, #17
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	4a11      	ldr	r2, [pc, #68]	; (8005544 <HAL_RCC_GetSysClockFreq+0xa0>)
 80054fe:	5cd3      	ldrb	r3, [r2, r3]
 8005500:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a0d      	ldr	r2, [pc, #52]	; (800553c <HAL_RCC_GetSysClockFreq+0x98>)
 8005506:	fb03 f202 	mul.w	r2, r3, r2
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	e004      	b.n	800551e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a0c      	ldr	r2, [pc, #48]	; (8005548 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005518:	fb02 f303 	mul.w	r3, r2, r3
 800551c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	613b      	str	r3, [r7, #16]
      break;
 8005522:	e002      	b.n	800552a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005524:	4b05      	ldr	r3, [pc, #20]	; (800553c <HAL_RCC_GetSysClockFreq+0x98>)
 8005526:	613b      	str	r3, [r7, #16]
      break;
 8005528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800552a:	693b      	ldr	r3, [r7, #16]
}
 800552c:	4618      	mov	r0, r3
 800552e:	371c      	adds	r7, #28
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40021000 	.word	0x40021000
 800553c:	007a1200 	.word	0x007a1200
 8005540:	0800d584 	.word	0x0800d584
 8005544:	0800d594 	.word	0x0800d594
 8005548:	003d0900 	.word	0x003d0900

0800554c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005554:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <RCC_Delay+0x34>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a0a      	ldr	r2, [pc, #40]	; (8005584 <RCC_Delay+0x38>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	0a5b      	lsrs	r3, r3, #9
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	fb02 f303 	mul.w	r3, r2, r3
 8005566:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005568:	bf00      	nop
  }
  while (Delay --);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	1e5a      	subs	r2, r3, #1
 800556e:	60fa      	str	r2, [r7, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1f9      	bne.n	8005568 <RCC_Delay+0x1c>
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr
 8005580:	20000000 	.word	0x20000000
 8005584:	10624dd3 	.word	0x10624dd3

08005588 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	613b      	str	r3, [r7, #16]
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d07d      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80055a4:	2300      	movs	r3, #0
 80055a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055a8:	4b4f      	ldr	r3, [pc, #316]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10d      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055b4:	4b4c      	ldr	r3, [pc, #304]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	4a4b      	ldr	r2, [pc, #300]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055be:	61d3      	str	r3, [r2, #28]
 80055c0:	4b49      	ldr	r3, [pc, #292]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c8:	60bb      	str	r3, [r7, #8]
 80055ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055cc:	2301      	movs	r3, #1
 80055ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d0:	4b46      	ldr	r3, [pc, #280]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d118      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055dc:	4b43      	ldr	r3, [pc, #268]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a42      	ldr	r2, [pc, #264]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055e8:	f7fc fe04 	bl	80021f4 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ee:	e008      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055f0:	f7fc fe00 	bl	80021f4 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b64      	cmp	r3, #100	; 0x64
 80055fc:	d901      	bls.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e06d      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005602:	4b3a      	ldr	r3, [pc, #232]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800560e:	4b36      	ldr	r3, [pc, #216]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005616:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d02e      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	429a      	cmp	r2, r3
 800562a:	d027      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800562c:	4b2e      	ldr	r3, [pc, #184]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005634:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005636:	4b2e      	ldr	r3, [pc, #184]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005638:	2201      	movs	r2, #1
 800563a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800563c:	4b2c      	ldr	r3, [pc, #176]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005642:	4a29      	ldr	r2, [pc, #164]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d014      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005652:	f7fc fdcf 	bl	80021f4 <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005658:	e00a      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800565a:	f7fc fdcb 	bl	80021f4 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	f241 3288 	movw	r2, #5000	; 0x1388
 8005668:	4293      	cmp	r3, r2
 800566a:	d901      	bls.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e036      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005670:	4b1d      	ldr	r3, [pc, #116]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0ee      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800567c:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	4917      	ldr	r1, [pc, #92]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568a:	4313      	orrs	r3, r2
 800568c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800568e:	7dfb      	ldrb	r3, [r7, #23]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d105      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005694:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	4a13      	ldr	r2, [pc, #76]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800569a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800569e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d008      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056ac:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	490b      	ldr	r1, [pc, #44]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0310 	and.w	r3, r3, #16
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d008      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056ca:	4b07      	ldr	r3, [pc, #28]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	4904      	ldr	r1, [pc, #16]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	40021000 	.word	0x40021000
 80056ec:	40007000 	.word	0x40007000
 80056f0:	42420440 	.word	0x42420440

080056f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e041      	b.n	800578a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fc fbba 	bl	8001e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f000 fa74 	bl	8005c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d001      	beq.n	80057ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e03a      	b.n	8005822 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a18      	ldr	r2, [pc, #96]	; (800582c <HAL_TIM_Base_Start_IT+0x98>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00e      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x58>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d6:	d009      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x58>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a14      	ldr	r2, [pc, #80]	; (8005830 <HAL_TIM_Base_Start_IT+0x9c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d004      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x58>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a13      	ldr	r2, [pc, #76]	; (8005834 <HAL_TIM_Base_Start_IT+0xa0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d111      	bne.n	8005810 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b06      	cmp	r3, #6
 80057fc:	d010      	beq.n	8005820 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f042 0201 	orr.w	r2, r2, #1
 800580c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800580e:	e007      	b.n	8005820 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0201 	orr.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr
 800582c:	40012c00 	.word	0x40012c00
 8005830:	40000400 	.word	0x40000400
 8005834:	40000800 	.word	0x40000800

08005838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b02      	cmp	r3, #2
 800584c:	d122      	bne.n	8005894 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b02      	cmp	r3, #2
 800585a:	d11b      	bne.n	8005894 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0202 	mvn.w	r2, #2
 8005864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f9b4 	bl	8005be8 <HAL_TIM_IC_CaptureCallback>
 8005880:	e005      	b.n	800588e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f9a7 	bl	8005bd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f9b6 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0304 	and.w	r3, r3, #4
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d122      	bne.n	80058e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d11b      	bne.n	80058e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0204 	mvn.w	r2, #4
 80058b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2202      	movs	r2, #2
 80058be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f98a 	bl	8005be8 <HAL_TIM_IC_CaptureCallback>
 80058d4:	e005      	b.n	80058e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f97d 	bl	8005bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f98c 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d122      	bne.n	800593c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b08      	cmp	r3, #8
 8005902:	d11b      	bne.n	800593c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0208 	mvn.w	r2, #8
 800590c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2204      	movs	r2, #4
 8005912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f960 	bl	8005be8 <HAL_TIM_IC_CaptureCallback>
 8005928:	e005      	b.n	8005936 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f953 	bl	8005bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f962 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0310 	and.w	r3, r3, #16
 8005946:	2b10      	cmp	r3, #16
 8005948:	d122      	bne.n	8005990 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	2b10      	cmp	r3, #16
 8005956:	d11b      	bne.n	8005990 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0210 	mvn.w	r2, #16
 8005960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2208      	movs	r2, #8
 8005966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f936 	bl	8005be8 <HAL_TIM_IC_CaptureCallback>
 800597c:	e005      	b.n	800598a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f929 	bl	8005bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f938 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b01      	cmp	r3, #1
 800599c:	d10e      	bne.n	80059bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d107      	bne.n	80059bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0201 	mvn.w	r2, #1
 80059b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fb fba0 	bl	80010fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c6:	2b80      	cmp	r3, #128	; 0x80
 80059c8:	d10e      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d4:	2b80      	cmp	r3, #128	; 0x80
 80059d6:	d107      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fa7b 	bl	8005ede <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d10e      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d107      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f8fc 	bl	8005c0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f003 0320 	and.w	r3, r3, #32
 8005a1e:	2b20      	cmp	r3, #32
 8005a20:	d10e      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d107      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0220 	mvn.w	r2, #32
 8005a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fa46 	bl	8005ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a40:	bf00      	nop
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_TIM_ConfigClockSource+0x1c>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e0b4      	b.n	8005bce <HAL_TIM_ConfigClockSource+0x186>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a9c:	d03e      	beq.n	8005b1c <HAL_TIM_ConfigClockSource+0xd4>
 8005a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa2:	f200 8087 	bhi.w	8005bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aaa:	f000 8086 	beq.w	8005bba <HAL_TIM_ConfigClockSource+0x172>
 8005aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab2:	d87f      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab4:	2b70      	cmp	r3, #112	; 0x70
 8005ab6:	d01a      	beq.n	8005aee <HAL_TIM_ConfigClockSource+0xa6>
 8005ab8:	2b70      	cmp	r3, #112	; 0x70
 8005aba:	d87b      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005abc:	2b60      	cmp	r3, #96	; 0x60
 8005abe:	d050      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0x11a>
 8005ac0:	2b60      	cmp	r3, #96	; 0x60
 8005ac2:	d877      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac4:	2b50      	cmp	r3, #80	; 0x50
 8005ac6:	d03c      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0xfa>
 8005ac8:	2b50      	cmp	r3, #80	; 0x50
 8005aca:	d873      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005acc:	2b40      	cmp	r3, #64	; 0x40
 8005ace:	d058      	beq.n	8005b82 <HAL_TIM_ConfigClockSource+0x13a>
 8005ad0:	2b40      	cmp	r3, #64	; 0x40
 8005ad2:	d86f      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad4:	2b30      	cmp	r3, #48	; 0x30
 8005ad6:	d064      	beq.n	8005ba2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ad8:	2b30      	cmp	r3, #48	; 0x30
 8005ada:	d86b      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d060      	beq.n	8005ba2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	d867      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d05c      	beq.n	8005ba2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ae8:	2b10      	cmp	r3, #16
 8005aea:	d05a      	beq.n	8005ba2 <HAL_TIM_ConfigClockSource+0x15a>
 8005aec:	e062      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6818      	ldr	r0, [r3, #0]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	6899      	ldr	r1, [r3, #8]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f000 f968 	bl	8005dd2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	609a      	str	r2, [r3, #8]
      break;
 8005b1a:	e04f      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6818      	ldr	r0, [r3, #0]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	6899      	ldr	r1, [r3, #8]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f000 f951 	bl	8005dd2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b3e:	609a      	str	r2, [r3, #8]
      break;
 8005b40:	e03c      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	6859      	ldr	r1, [r3, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f000 f8c8 	bl	8005ce4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2150      	movs	r1, #80	; 0x50
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 f91f 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 8005b60:	e02c      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	6859      	ldr	r1, [r3, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f000 f8e6 	bl	8005d40 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2160      	movs	r1, #96	; 0x60
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 f90f 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 8005b80:	e01c      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	6859      	ldr	r1, [r3, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f000 f8a8 	bl	8005ce4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2140      	movs	r1, #64	; 0x40
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 f8ff 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 8005ba0:	e00c      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4619      	mov	r1, r3
 8005bac:	4610      	mov	r0, r2
 8005bae:	f000 f8f6 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 8005bb2:	e003      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb8:	e000      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bc80      	pop	{r7}
 8005be6:	4770      	bx	lr

08005be8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr

08005bfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr

08005c0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bc80      	pop	{r7}
 8005c1c:	4770      	bx	lr
	...

08005c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a29      	ldr	r2, [pc, #164]	; (8005cd8 <TIM_Base_SetConfig+0xb8>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d00b      	beq.n	8005c50 <TIM_Base_SetConfig+0x30>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3e:	d007      	beq.n	8005c50 <TIM_Base_SetConfig+0x30>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a26      	ldr	r2, [pc, #152]	; (8005cdc <TIM_Base_SetConfig+0xbc>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d003      	beq.n	8005c50 <TIM_Base_SetConfig+0x30>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a25      	ldr	r2, [pc, #148]	; (8005ce0 <TIM_Base_SetConfig+0xc0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d108      	bne.n	8005c62 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a1c      	ldr	r2, [pc, #112]	; (8005cd8 <TIM_Base_SetConfig+0xb8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00b      	beq.n	8005c82 <TIM_Base_SetConfig+0x62>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c70:	d007      	beq.n	8005c82 <TIM_Base_SetConfig+0x62>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a19      	ldr	r2, [pc, #100]	; (8005cdc <TIM_Base_SetConfig+0xbc>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d003      	beq.n	8005c82 <TIM_Base_SetConfig+0x62>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a18      	ldr	r2, [pc, #96]	; (8005ce0 <TIM_Base_SetConfig+0xc0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d108      	bne.n	8005c94 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a07      	ldr	r2, [pc, #28]	; (8005cd8 <TIM_Base_SetConfig+0xb8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d103      	bne.n	8005cc8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	615a      	str	r2, [r3, #20]
}
 8005cce:	bf00      	nop
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr
 8005cd8:	40012c00 	.word	0x40012c00
 8005cdc:	40000400 	.word	0x40000400
 8005ce0:	40000800 	.word	0x40000800

08005ce4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	f023 0201 	bic.w	r2, r3, #1
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f023 030a 	bic.w	r3, r3, #10
 8005d20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	621a      	str	r2, [r3, #32]
}
 8005d36:	bf00      	nop
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bc80      	pop	{r7}
 8005d3e:	4770      	bx	lr

08005d40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f023 0210 	bic.w	r2, r3, #16
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	031b      	lsls	r3, r3, #12
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	011b      	lsls	r3, r3, #4
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	621a      	str	r2, [r3, #32]
}
 8005d94:	bf00      	nop
 8005d96:	371c      	adds	r7, #28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bc80      	pop	{r7}
 8005d9c:	4770      	bx	lr

08005d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f043 0307 	orr.w	r3, r3, #7
 8005dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	609a      	str	r2, [r3, #8]
}
 8005dc8:	bf00      	nop
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bc80      	pop	{r7}
 8005dd0:	4770      	bx	lr

08005dd2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b087      	sub	sp, #28
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
 8005dde:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	021a      	lsls	r2, r3, #8
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	431a      	orrs	r2, r3
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	609a      	str	r2, [r3, #8]
}
 8005e06:	bf00      	nop
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bc80      	pop	{r7}
 8005e0e:	4770      	bx	lr

08005e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e046      	b.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a16      	ldr	r2, [pc, #88]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00e      	beq.n	8005e8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e74:	d009      	beq.n	8005e8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a12      	ldr	r2, [pc, #72]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d004      	beq.n	8005e8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a10      	ldr	r2, [pc, #64]	; (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d10c      	bne.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr
 8005ec0:	40012c00 	.word	0x40012c00
 8005ec4:	40000400 	.word	0x40000400
 8005ec8:	40000800 	.word	0x40000800

08005ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bc80      	pop	{r7}
 8005edc:	4770      	bx	lr

08005ede <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bc80      	pop	{r7}
 8005eee:	4770      	bx	lr

08005ef0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ef0:	b084      	sub	sp, #16
 8005ef2:	b480      	push	{r7}
 8005ef4:	b083      	sub	sp, #12
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	f107 0014 	add.w	r0, r7, #20
 8005efe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bc80      	pop	{r7}
 8005f0c:	b004      	add	sp, #16
 8005f0e:	4770      	bx	lr

08005f10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f20:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005f24:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bc80      	pop	{r7}
 8005f3a:	4770      	bx	lr

08005f3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f44:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005f48:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	43db      	mvns	r3, r3
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bc80      	pop	{r7}
 8005f6e:	4770      	bx	lr

08005f70 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr

08005f88 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f88:	b084      	sub	sp, #16
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	f107 0014 	add.w	r0, r7, #20
 8005f96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bc80      	pop	{r7}
 8005fc4:	b004      	add	sp, #16
 8005fc6:	4770      	bx	lr

08005fc8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b09d      	sub	sp, #116	; 0x74
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fee:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	78db      	ldrb	r3, [r3, #3]
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d81f      	bhi.n	800603a <USB_ActivateEndpoint+0x72>
 8005ffa:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <USB_ActivateEndpoint+0x38>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	08006011 	.word	0x08006011
 8006004:	0800602d 	.word	0x0800602d
 8006008:	08006043 	.word	0x08006043
 800600c:	0800601f 	.word	0x0800601f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006010:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006014:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006018:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800601c:	e012      	b.n	8006044 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800601e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006022:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006026:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800602a:	e00b      	b.n	8006044 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800602c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006030:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006034:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006038:	e004      	b.n	8006044 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006040:	e000      	b.n	8006044 <USB_ActivateEndpoint+0x7c>
      break;
 8006042:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	441a      	add	r2, r3
 800604e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800605e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006062:	b29b      	uxth	r3, r3
 8006064:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607c:	b29a      	uxth	r2, r3
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	4313      	orrs	r3, r2
 8006086:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	441a      	add	r2, r3
 8006094:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800609c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	7b1b      	ldrb	r3, [r3, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f040 8178 	bne.w	80063a6 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	785b      	ldrb	r3, [r3, #1]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 8084 	beq.w	80061c8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	61bb      	str	r3, [r7, #24]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	4413      	add	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	011a      	lsls	r2, r3, #4
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060e2:	617b      	str	r3, [r7, #20]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	88db      	ldrh	r3, [r3, #6]
 80060e8:	085b      	lsrs	r3, r3, #1
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	827b      	strh	r3, [r7, #18]
 8006102:	8a7b      	ldrh	r3, [r7, #18]
 8006104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01b      	beq.n	8006144 <USB_ActivateEndpoint+0x17c>
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	b29b      	uxth	r3, r3
 800611a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800611e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006122:	823b      	strh	r3, [r7, #16]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	441a      	add	r2, r3
 800612e:	8a3b      	ldrh	r3, [r7, #16]
 8006130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006140:	b29b      	uxth	r3, r3
 8006142:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	78db      	ldrb	r3, [r3, #3]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d020      	beq.n	800618e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	b29b      	uxth	r3, r3
 800615a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800615e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006162:	81bb      	strh	r3, [r7, #12]
 8006164:	89bb      	ldrh	r3, [r7, #12]
 8006166:	f083 0320 	eor.w	r3, r3, #32
 800616a:	81bb      	strh	r3, [r7, #12]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	441a      	add	r2, r3
 8006176:	89bb      	ldrh	r3, [r7, #12]
 8006178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800617c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006188:	b29b      	uxth	r3, r3
 800618a:	8013      	strh	r3, [r2, #0]
 800618c:	e2d5      	b.n	800673a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	b29b      	uxth	r3, r3
 800619c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a4:	81fb      	strh	r3, [r7, #14]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	441a      	add	r2, r3
 80061b0:	89fb      	ldrh	r3, [r7, #14]
 80061b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	8013      	strh	r3, [r2, #0]
 80061c6:	e2b8      	b.n	800673a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	633b      	str	r3, [r7, #48]	; 0x30
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	461a      	mov	r2, r3
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	4413      	add	r3, r2
 80061da:	633b      	str	r3, [r7, #48]	; 0x30
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	011a      	lsls	r2, r3, #4
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80061ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	88db      	ldrh	r3, [r3, #6]
 80061f0:	085b      	lsrs	r3, r3, #1
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006206:	b29b      	uxth	r3, r3
 8006208:	461a      	mov	r2, r3
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	4413      	add	r3, r2
 800620e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	011a      	lsls	r2, r3, #4
 8006216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006218:	4413      	add	r3, r2
 800621a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800621e:	627b      	str	r3, [r7, #36]	; 0x24
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	b29b      	uxth	r3, r3
 8006226:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800622a:	b29a      	uxth	r2, r3
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	801a      	strh	r2, [r3, #0]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	2b3e      	cmp	r3, #62	; 0x3e
 8006236:	d91d      	bls.n	8006274 <USB_ActivateEndpoint+0x2ac>
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f003 031f 	and.w	r3, r3, #31
 8006248:	2b00      	cmp	r3, #0
 800624a:	d102      	bne.n	8006252 <USB_ActivateEndpoint+0x28a>
 800624c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800624e:	3b01      	subs	r3, #1
 8006250:	66bb      	str	r3, [r7, #104]	; 0x68
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	b29a      	uxth	r2, r3
 8006258:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800625a:	b29b      	uxth	r3, r3
 800625c:	029b      	lsls	r3, r3, #10
 800625e:	b29b      	uxth	r3, r3
 8006260:	4313      	orrs	r3, r2
 8006262:	b29b      	uxth	r3, r3
 8006264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800626c:	b29a      	uxth	r2, r3
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	801a      	strh	r2, [r3, #0]
 8006272:	e026      	b.n	80062c2 <USB_ActivateEndpoint+0x2fa>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10a      	bne.n	8006292 <USB_ActivateEndpoint+0x2ca>
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	b29b      	uxth	r3, r3
 8006282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800628a:	b29a      	uxth	r2, r3
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	801a      	strh	r2, [r3, #0]
 8006290:	e017      	b.n	80062c2 <USB_ActivateEndpoint+0x2fa>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	085b      	lsrs	r3, r3, #1
 8006298:	66bb      	str	r3, [r7, #104]	; 0x68
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <USB_ActivateEndpoint+0x2e4>
 80062a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062a8:	3301      	adds	r3, #1
 80062aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	029b      	lsls	r3, r3, #10
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	4313      	orrs	r3, r2
 80062bc:	b29a      	uxth	r2, r3
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80062d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d01b      	beq.n	8006312 <USB_ActivateEndpoint+0x34a>
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f0:	843b      	strh	r3, [r7, #32]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	441a      	add	r2, r3
 80062fc:	8c3b      	ldrh	r3, [r7, #32]
 80062fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006306:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800630a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800630e:	b29b      	uxth	r3, r3
 8006310:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d124      	bne.n	8006364 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b29b      	uxth	r3, r3
 8006328:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800632c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006330:	83bb      	strh	r3, [r7, #28]
 8006332:	8bbb      	ldrh	r3, [r7, #28]
 8006334:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006338:	83bb      	strh	r3, [r7, #28]
 800633a:	8bbb      	ldrh	r3, [r7, #28]
 800633c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006340:	83bb      	strh	r3, [r7, #28]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	441a      	add	r2, r3
 800634c:	8bbb      	ldrh	r3, [r7, #28]
 800634e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800635a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635e:	b29b      	uxth	r3, r3
 8006360:	8013      	strh	r3, [r2, #0]
 8006362:	e1ea      	b.n	800673a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	881b      	ldrh	r3, [r3, #0]
 8006370:	b29b      	uxth	r3, r3
 8006372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637a:	83fb      	strh	r3, [r7, #30]
 800637c:	8bfb      	ldrh	r3, [r7, #30]
 800637e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006382:	83fb      	strh	r3, [r7, #30]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	441a      	add	r2, r3
 800638e:	8bfb      	ldrh	r3, [r7, #30]
 8006390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800639c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	8013      	strh	r3, [r2, #0]
 80063a4:	e1c9      	b.n	800673a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	78db      	ldrb	r3, [r3, #3]
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d11e      	bne.n	80063ec <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	441a      	add	r2, r3
 80063d2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80063d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063de:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80063e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	8013      	strh	r3, [r2, #0]
 80063ea:	e01d      	b.n	8006428 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80063fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006402:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	441a      	add	r2, r3
 8006410:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800641c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006424:	b29b      	uxth	r3, r3
 8006426:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006432:	b29b      	uxth	r3, r3
 8006434:	461a      	mov	r2, r3
 8006436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006438:	4413      	add	r3, r2
 800643a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	011a      	lsls	r2, r3, #4
 8006442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006444:	4413      	add	r3, r2
 8006446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800644a:	65bb      	str	r3, [r7, #88]	; 0x58
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	891b      	ldrh	r3, [r3, #8]
 8006450:	085b      	lsrs	r3, r3, #1
 8006452:	b29b      	uxth	r3, r3
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	b29a      	uxth	r2, r3
 8006458:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800645a:	801a      	strh	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	657b      	str	r3, [r7, #84]	; 0x54
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006466:	b29b      	uxth	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800646c:	4413      	add	r3, r2
 800646e:	657b      	str	r3, [r7, #84]	; 0x54
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	011a      	lsls	r2, r3, #4
 8006476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006478:	4413      	add	r3, r2
 800647a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800647e:	653b      	str	r3, [r7, #80]	; 0x50
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	895b      	ldrh	r3, [r3, #10]
 8006484:	085b      	lsrs	r3, r3, #1
 8006486:	b29b      	uxth	r3, r3
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	b29a      	uxth	r2, r3
 800648c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800648e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	785b      	ldrb	r3, [r3, #1]
 8006494:	2b00      	cmp	r3, #0
 8006496:	f040 8093 	bne.w	80065c0 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80064aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80064ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d01b      	beq.n	80064ee <USB_ActivateEndpoint+0x526>
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	441a      	add	r2, r3
 80064d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80064da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80064fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80064fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006502:	2b00      	cmp	r3, #0
 8006504:	d01b      	beq.n	800653e <USB_ActivateEndpoint+0x576>
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	441a      	add	r2, r3
 8006528:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800652a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800652e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006536:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800653a:	b29b      	uxth	r3, r3
 800653c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	b29b      	uxth	r3, r3
 800654c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006554:	873b      	strh	r3, [r7, #56]	; 0x38
 8006556:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006558:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800655c:	873b      	strh	r3, [r7, #56]	; 0x38
 800655e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006560:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006564:	873b      	strh	r3, [r7, #56]	; 0x38
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	441a      	add	r2, r3
 8006570:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800657a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800657e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006582:	b29b      	uxth	r3, r3
 8006584:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	b29b      	uxth	r3, r3
 8006594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800659c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	441a      	add	r2, r3
 80065a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80065aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	8013      	strh	r3, [r2, #0]
 80065be:	e0bc      	b.n	800673a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80065d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80065d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d01d      	beq.n	8006618 <USB_ActivateEndpoint+0x650>
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	441a      	add	r2, r3
 8006600:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800660c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006614:	b29b      	uxth	r3, r3
 8006616:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006628:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800662c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006630:	2b00      	cmp	r3, #0
 8006632:	d01d      	beq.n	8006670 <USB_ActivateEndpoint+0x6a8>
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	b29b      	uxth	r3, r3
 8006642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	441a      	add	r2, r3
 8006658:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800665c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006668:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800666c:	b29b      	uxth	r3, r3
 800666e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	78db      	ldrb	r3, [r3, #3]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d024      	beq.n	80066c2 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	b29b      	uxth	r3, r3
 8006686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800668a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800668e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006692:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006696:	f083 0320 	eor.w	r3, r3, #32
 800669a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	441a      	add	r2, r3
 80066a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80066ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066bc:	b29b      	uxth	r3, r3
 80066be:	8013      	strh	r3, [r2, #0]
 80066c0:	e01d      	b.n	80066fe <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066d8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	441a      	add	r2, r3
 80066e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80066ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006714:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	441a      	add	r2, r3
 8006722:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800672a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800672e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006736:	b29b      	uxth	r3, r3
 8006738:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800673a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800673e:	4618      	mov	r0, r3
 8006740:	3774      	adds	r7, #116	; 0x74
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr

08006748 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006748:	b480      	push	{r7}
 800674a:	b08d      	sub	sp, #52	; 0x34
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	7b1b      	ldrb	r3, [r3, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	f040 808e 	bne.w	8006878 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	785b      	ldrb	r3, [r3, #1]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d044      	beq.n	80067ee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	81bb      	strh	r3, [r7, #12]
 8006772:	89bb      	ldrh	r3, [r7, #12]
 8006774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006778:	2b00      	cmp	r3, #0
 800677a:	d01b      	beq.n	80067b4 <USB_DeactivateEndpoint+0x6c>
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	b29b      	uxth	r3, r3
 800678a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800678e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006792:	817b      	strh	r3, [r7, #10]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	441a      	add	r2, r3
 800679e:	897b      	ldrh	r3, [r7, #10]
 80067a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ca:	813b      	strh	r3, [r7, #8]
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	441a      	add	r2, r3
 80067d6:	893b      	ldrh	r3, [r7, #8]
 80067d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	8013      	strh	r3, [r2, #0]
 80067ec:	e192      	b.n	8006b14 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	827b      	strh	r3, [r7, #18]
 80067fc:	8a7b      	ldrh	r3, [r7, #18]
 80067fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d01b      	beq.n	800683e <USB_DeactivateEndpoint+0xf6>
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29b      	uxth	r3, r3
 8006814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681c:	823b      	strh	r3, [r7, #16]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	441a      	add	r2, r3
 8006828:	8a3b      	ldrh	r3, [r7, #16]
 800682a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800682e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800683a:	b29b      	uxth	r3, r3
 800683c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29b      	uxth	r3, r3
 800684c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006854:	81fb      	strh	r3, [r7, #14]
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	441a      	add	r2, r3
 8006860:	89fb      	ldrh	r3, [r7, #14]
 8006862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800686a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800686e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006872:	b29b      	uxth	r3, r3
 8006874:	8013      	strh	r3, [r2, #0]
 8006876:	e14d      	b.n	8006b14 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	785b      	ldrb	r3, [r3, #1]
 800687c:	2b00      	cmp	r3, #0
 800687e:	f040 80a5 	bne.w	80069cc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	843b      	strh	r3, [r7, #32]
 8006890:	8c3b      	ldrh	r3, [r7, #32]
 8006892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d01b      	beq.n	80068d2 <USB_DeactivateEndpoint+0x18a>
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b0:	83fb      	strh	r3, [r7, #30]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	441a      	add	r2, r3
 80068bc:	8bfb      	ldrh	r3, [r7, #30]
 80068be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	83bb      	strh	r3, [r7, #28]
 80068e0:	8bbb      	ldrh	r3, [r7, #28]
 80068e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d01b      	beq.n	8006922 <USB_DeactivateEndpoint+0x1da>
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006900:	837b      	strh	r3, [r7, #26]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	441a      	add	r2, r3
 800690c:	8b7b      	ldrh	r3, [r7, #26]
 800690e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800691a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800691e:	b29b      	uxth	r3, r3
 8006920:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	b29b      	uxth	r3, r3
 8006930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006938:	833b      	strh	r3, [r7, #24]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	441a      	add	r2, r3
 8006944:	8b3b      	ldrh	r3, [r7, #24]
 8006946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800694a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006952:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006956:	b29b      	uxth	r3, r3
 8006958:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	b29b      	uxth	r3, r3
 8006968:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800696c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006970:	82fb      	strh	r3, [r7, #22]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	441a      	add	r2, r3
 800697c:	8afb      	ldrh	r3, [r7, #22]
 800697e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800698e:	b29b      	uxth	r3, r3
 8006990:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a8:	82bb      	strh	r3, [r7, #20]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	441a      	add	r2, r3
 80069b4:	8abb      	ldrh	r3, [r7, #20]
 80069b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	8013      	strh	r3, [r2, #0]
 80069ca:	e0a3      	b.n	8006b14 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80069da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01b      	beq.n	8006a1c <USB_DeactivateEndpoint+0x2d4>
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	441a      	add	r2, r3
 8006a06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006a2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01b      	beq.n	8006a6c <USB_DeactivateEndpoint+0x324>
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4a:	853b      	strh	r3, [r7, #40]	; 0x28
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	441a      	add	r2, r3
 8006a56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a82:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	441a      	add	r2, r3
 8006a8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aba:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	441a      	add	r2, r3
 8006ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af2:	847b      	strh	r3, [r7, #34]	; 0x22
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	441a      	add	r2, r3
 8006afe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3734      	adds	r7, #52	; 0x34
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bc80      	pop	{r7}
 8006b1e:	4770      	bx	lr

08006b20 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b0c2      	sub	sp, #264	; 0x108
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b2e:	6018      	str	r0, [r3, #0]
 8006b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b38:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	785b      	ldrb	r3, [r3, #1]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	f040 86b7 	bne.w	80078ba <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	699a      	ldr	r2, [r3, #24]
 8006b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d908      	bls.n	8006b7a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b78:	e007      	b.n	8006b8a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	7b1b      	ldrb	r3, [r3, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d13a      	bne.n	8006c10 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6959      	ldr	r1, [r3, #20]
 8006ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	88da      	ldrh	r2, [r3, #6]
 8006bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006bbc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006bc0:	6800      	ldr	r0, [r0, #0]
 8006bc2:	f001 fc9c 	bl	80084fe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	613b      	str	r3, [r7, #16]
 8006bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	461a      	mov	r2, r3
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	4413      	add	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]
 8006bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	011a      	lsls	r2, r3, #4
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c00:	60fb      	str	r3, [r7, #12]
 8006c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	801a      	strh	r2, [r3, #0]
 8006c0c:	f000 be1f 	b.w	800784e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	78db      	ldrb	r3, [r3, #3]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	f040 8462 	bne.w	80074e6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6a1a      	ldr	r2, [r3, #32]
 8006c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	f240 83df 	bls.w	80073fe <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c66:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	441a      	add	r2, r3
 8006c84:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c90:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6a1a      	ldr	r2, [r3, #32]
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cac:	1ad2      	subs	r2, r2, r3
 8006cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 81c7 	beq.w	8007070 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	633b      	str	r3, [r7, #48]	; 0x30
 8006cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	785b      	ldrb	r3, [r3, #1]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d177      	bne.n	8006dee <USB_EPStartXfer+0x2ce>
 8006cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1e:	4413      	add	r3, r2
 8006d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	011a      	lsls	r2, r3, #4
 8006d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d32:	4413      	add	r3, r2
 8006d34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d38:	627b      	str	r3, [r7, #36]	; 0x24
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	801a      	strh	r2, [r3, #0]
 8006d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d4e:	2b3e      	cmp	r3, #62	; 0x3e
 8006d50:	d921      	bls.n	8006d96 <USB_EPStartXfer+0x276>
 8006d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d56:	095b      	lsrs	r3, r3, #5
 8006d58:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d60:	f003 031f 	and.w	r3, r3, #31
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d104      	bne.n	8006d72 <USB_EPStartXfer+0x252>
 8006d68:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	029b      	lsls	r3, r3, #10
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	4313      	orrs	r3, r2
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	801a      	strh	r2, [r3, #0]
 8006d94:	e050      	b.n	8006e38 <USB_EPStartXfer+0x318>
 8006d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10a      	bne.n	8006db4 <USB_EPStartXfer+0x294>
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	801a      	strh	r2, [r3, #0]
 8006db2:	e041      	b.n	8006e38 <USB_EPStartXfer+0x318>
 8006db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db8:	085b      	lsrs	r3, r3, #1
 8006dba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d004      	beq.n	8006dd4 <USB_EPStartXfer+0x2b4>
 8006dca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006dce:	3301      	adds	r3, #1
 8006dd0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	029b      	lsls	r3, r3, #10
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	4313      	orrs	r3, r2
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	801a      	strh	r2, [r3, #0]
 8006dec:	e024      	b.n	8006e38 <USB_EPStartXfer+0x318>
 8006dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	785b      	ldrb	r3, [r3, #1]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d11c      	bne.n	8006e38 <USB_EPStartXfer+0x318>
 8006dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	461a      	mov	r2, r3
 8006e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e12:	4413      	add	r3, r2
 8006e14:	633b      	str	r3, [r7, #48]	; 0x30
 8006e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	011a      	lsls	r2, r3, #4
 8006e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e26:	4413      	add	r3, r2
 8006e28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	895b      	ldrh	r3, [r3, #10]
 8006e44:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6959      	ldr	r1, [r3, #20]
 8006e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e5e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e62:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e66:	6800      	ldr	r0, [r0, #0]
 8006e68:	f001 fb49 	bl	80084fe <USB_WritePMA>
            ep->xfer_buff += len;
 8006e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695a      	ldr	r2, [r3, #20]
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7c:	441a      	add	r2, r3
 8006e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6a1a      	ldr	r2, [r3, #32]
 8006e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d90f      	bls.n	8006ec6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6a1a      	ldr	r2, [r3, #32]
 8006eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb6:	1ad2      	subs	r2, r2, r3
 8006eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	621a      	str	r2, [r3, #32]
 8006ec4:	e00e      	b.n	8006ee4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	785b      	ldrb	r3, [r3, #1]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d177      	bne.n	8006fe4 <USB_EPStartXfer+0x4c4>
 8006ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	61bb      	str	r3, [r7, #24]
 8006f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	461a      	mov	r2, r3
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	4413      	add	r3, r2
 8006f16:	61bb      	str	r3, [r7, #24]
 8006f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	011a      	lsls	r2, r3, #4
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	801a      	strh	r2, [r3, #0]
 8006f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f44:	2b3e      	cmp	r3, #62	; 0x3e
 8006f46:	d921      	bls.n	8006f8c <USB_EPStartXfer+0x46c>
 8006f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f4c:	095b      	lsrs	r3, r3, #5
 8006f4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f56:	f003 031f 	and.w	r3, r3, #31
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d104      	bne.n	8006f68 <USB_EPStartXfer+0x448>
 8006f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f62:	3b01      	subs	r3, #1
 8006f64:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	029b      	lsls	r3, r3, #10
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	801a      	strh	r2, [r3, #0]
 8006f8a:	e056      	b.n	800703a <USB_EPStartXfer+0x51a>
 8006f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <USB_EPStartXfer+0x48a>
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	801a      	strh	r2, [r3, #0]
 8006fa8:	e047      	b.n	800703a <USB_EPStartXfer+0x51a>
 8006faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fae:	085b      	lsrs	r3, r3, #1
 8006fb0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d004      	beq.n	8006fca <USB_EPStartXfer+0x4aa>
 8006fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	029b      	lsls	r3, r3, #10
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	801a      	strh	r2, [r3, #0]
 8006fe2:	e02a      	b.n	800703a <USB_EPStartXfer+0x51a>
 8006fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	785b      	ldrb	r3, [r3, #1]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d122      	bne.n	800703a <USB_EPStartXfer+0x51a>
 8006ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	623b      	str	r3, [r7, #32]
 8007000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007004:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800700e:	b29b      	uxth	r3, r3
 8007010:	461a      	mov	r2, r3
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	4413      	add	r3, r2
 8007016:	623b      	str	r3, [r7, #32]
 8007018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	011a      	lsls	r2, r3, #4
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	4413      	add	r3, r2
 800702a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800702e:	61fb      	str	r3, [r7, #28]
 8007030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007034:	b29a      	uxth	r2, r3
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800703a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800703e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	891b      	ldrh	r3, [r3, #8]
 8007046:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800704a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800704e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6959      	ldr	r1, [r3, #20]
 8007056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800705a:	b29b      	uxth	r3, r3
 800705c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007060:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007064:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007068:	6800      	ldr	r0, [r0, #0]
 800706a:	f001 fa48 	bl	80084fe <USB_WritePMA>
 800706e:	e3ee      	b.n	800784e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	785b      	ldrb	r3, [r3, #1]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d177      	bne.n	8007170 <USB_EPStartXfer+0x650>
 8007080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007084:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	64bb      	str	r3, [r7, #72]	; 0x48
 800708c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007090:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800709a:	b29b      	uxth	r3, r3
 800709c:	461a      	mov	r2, r3
 800709e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070a0:	4413      	add	r3, r2
 80070a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80070a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	011a      	lsls	r2, r3, #4
 80070b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070b4:	4413      	add	r3, r2
 80070b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070ba:	647b      	str	r3, [r7, #68]	; 0x44
 80070bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ca:	801a      	strh	r2, [r3, #0]
 80070cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d0:	2b3e      	cmp	r3, #62	; 0x3e
 80070d2:	d921      	bls.n	8007118 <USB_EPStartXfer+0x5f8>
 80070d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d8:	095b      	lsrs	r3, r3, #5
 80070da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80070de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e2:	f003 031f 	and.w	r3, r3, #31
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d104      	bne.n	80070f4 <USB_EPStartXfer+0x5d4>
 80070ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070ee:	3b01      	subs	r3, #1
 80070f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80070f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070fe:	b29b      	uxth	r3, r3
 8007100:	029b      	lsls	r3, r3, #10
 8007102:	b29b      	uxth	r3, r3
 8007104:	4313      	orrs	r3, r2
 8007106:	b29b      	uxth	r3, r3
 8007108:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800710c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007110:	b29a      	uxth	r2, r3
 8007112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007114:	801a      	strh	r2, [r3, #0]
 8007116:	e056      	b.n	80071c6 <USB_EPStartXfer+0x6a6>
 8007118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10a      	bne.n	8007136 <USB_EPStartXfer+0x616>
 8007120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	b29b      	uxth	r3, r3
 8007126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800712a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800712e:	b29a      	uxth	r2, r3
 8007130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007132:	801a      	strh	r2, [r3, #0]
 8007134:	e047      	b.n	80071c6 <USB_EPStartXfer+0x6a6>
 8007136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800713a:	085b      	lsrs	r3, r3, #1
 800713c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	d004      	beq.n	8007156 <USB_EPStartXfer+0x636>
 800714c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007150:	3301      	adds	r3, #1
 8007152:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29a      	uxth	r2, r3
 800715c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007160:	b29b      	uxth	r3, r3
 8007162:	029b      	lsls	r3, r3, #10
 8007164:	b29b      	uxth	r3, r3
 8007166:	4313      	orrs	r3, r2
 8007168:	b29a      	uxth	r2, r3
 800716a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800716c:	801a      	strh	r2, [r3, #0]
 800716e:	e02a      	b.n	80071c6 <USB_EPStartXfer+0x6a6>
 8007170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	785b      	ldrb	r3, [r3, #1]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d122      	bne.n	80071c6 <USB_EPStartXfer+0x6a6>
 8007180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	653b      	str	r3, [r7, #80]	; 0x50
 800718c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007190:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800719a:	b29b      	uxth	r3, r3
 800719c:	461a      	mov	r2, r3
 800719e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071a0:	4413      	add	r3, r2
 80071a2:	653b      	str	r3, [r7, #80]	; 0x50
 80071a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	011a      	lsls	r2, r3, #4
 80071b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071b4:	4413      	add	r3, r2
 80071b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80071c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	891b      	ldrh	r3, [r3, #8]
 80071d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6959      	ldr	r1, [r3, #20]
 80071e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80071ec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80071f0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80071f4:	6800      	ldr	r0, [r0, #0]
 80071f6:	f001 f982 	bl	80084fe <USB_WritePMA>
            ep->xfer_buff += len;
 80071fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	695a      	ldr	r2, [r3, #20]
 8007206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800720a:	441a      	add	r2, r3
 800720c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800721c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6a1a      	ldr	r2, [r3, #32]
 8007224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	429a      	cmp	r2, r3
 8007232:	d90f      	bls.n	8007254 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6a1a      	ldr	r2, [r3, #32]
 8007240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007244:	1ad2      	subs	r2, r2, r3
 8007246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800724a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	621a      	str	r2, [r3, #32]
 8007252:	e00e      	b.n	8007272 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2200      	movs	r2, #0
 8007270:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007276:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	643b      	str	r3, [r7, #64]	; 0x40
 800727e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	785b      	ldrb	r3, [r3, #1]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d177      	bne.n	800737e <USB_EPStartXfer+0x85e>
 800728e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	63bb      	str	r3, [r7, #56]	; 0x38
 800729a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800729e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	461a      	mov	r2, r3
 80072ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ae:	4413      	add	r3, r2
 80072b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80072b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	011a      	lsls	r2, r3, #4
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	4413      	add	r3, r2
 80072c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072c8:	637b      	str	r3, [r7, #52]	; 0x34
 80072ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d8:	801a      	strh	r2, [r3, #0]
 80072da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072de:	2b3e      	cmp	r3, #62	; 0x3e
 80072e0:	d921      	bls.n	8007326 <USB_EPStartXfer+0x806>
 80072e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e6:	095b      	lsrs	r3, r3, #5
 80072e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80072ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f0:	f003 031f 	and.w	r3, r3, #31
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d104      	bne.n	8007302 <USB_EPStartXfer+0x7e2>
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fc:	3b01      	subs	r3, #1
 80072fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	b29a      	uxth	r2, r3
 8007308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800730c:	b29b      	uxth	r3, r3
 800730e:	029b      	lsls	r3, r3, #10
 8007310:	b29b      	uxth	r3, r3
 8007312:	4313      	orrs	r3, r2
 8007314:	b29b      	uxth	r3, r3
 8007316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800731a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800731e:	b29a      	uxth	r2, r3
 8007320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007322:	801a      	strh	r2, [r3, #0]
 8007324:	e050      	b.n	80073c8 <USB_EPStartXfer+0x8a8>
 8007326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10a      	bne.n	8007344 <USB_EPStartXfer+0x824>
 800732e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	b29b      	uxth	r3, r3
 8007334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800733c:	b29a      	uxth	r2, r3
 800733e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007340:	801a      	strh	r2, [r3, #0]
 8007342:	e041      	b.n	80073c8 <USB_EPStartXfer+0x8a8>
 8007344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007348:	085b      	lsrs	r3, r3, #1
 800734a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800734e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b00      	cmp	r3, #0
 8007358:	d004      	beq.n	8007364 <USB_EPStartXfer+0x844>
 800735a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800735e:	3301      	adds	r3, #1
 8007360:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29a      	uxth	r2, r3
 800736a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800736e:	b29b      	uxth	r3, r3
 8007370:	029b      	lsls	r3, r3, #10
 8007372:	b29b      	uxth	r3, r3
 8007374:	4313      	orrs	r3, r2
 8007376:	b29a      	uxth	r2, r3
 8007378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737a:	801a      	strh	r2, [r3, #0]
 800737c:	e024      	b.n	80073c8 <USB_EPStartXfer+0x8a8>
 800737e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	785b      	ldrb	r3, [r3, #1]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d11c      	bne.n	80073c8 <USB_EPStartXfer+0x8a8>
 800738e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007392:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800739c:	b29b      	uxth	r3, r3
 800739e:	461a      	mov	r2, r3
 80073a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073a2:	4413      	add	r3, r2
 80073a4:	643b      	str	r3, [r7, #64]	; 0x40
 80073a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	011a      	lsls	r2, r3, #4
 80073b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073b6:	4413      	add	r3, r2
 80073b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80073c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	895b      	ldrh	r3, [r3, #10]
 80073d4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6959      	ldr	r1, [r3, #20]
 80073e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80073ee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80073f2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80073f6:	6800      	ldr	r0, [r0, #0]
 80073f8:	f001 f881 	bl	80084fe <USB_WritePMA>
 80073fc:	e227      	b.n	800784e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80073fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800740e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007412:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b29b      	uxth	r3, r3
 800742c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007434:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800743c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	441a      	add	r2, r3
 8007452:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800745a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800745e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007466:	b29b      	uxth	r3, r3
 8007468:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800746a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800746e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007484:	b29b      	uxth	r3, r3
 8007486:	461a      	mov	r2, r3
 8007488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800748a:	4413      	add	r3, r2
 800748c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800748e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	011a      	lsls	r2, r3, #4
 800749c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800749e:	4413      	add	r3, r2
 80074a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80074a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80074b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	891b      	ldrh	r3, [r3, #8]
 80074bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6959      	ldr	r1, [r3, #20]
 80074cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80074d6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80074da:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80074de:	6800      	ldr	r0, [r0, #0]
 80074e0:	f001 f80d 	bl	80084fe <USB_WritePMA>
 80074e4:	e1b3      	b.n	800784e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80074e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6a1a      	ldr	r2, [r3, #32]
 80074f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f6:	1ad2      	subs	r2, r2, r3
 80074f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007508:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	b29b      	uxth	r3, r3
 8007522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 80c6 	beq.w	80076b8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800752c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007530:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	673b      	str	r3, [r7, #112]	; 0x70
 8007538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800753c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	785b      	ldrb	r3, [r3, #1]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d177      	bne.n	8007638 <USB_EPStartXfer+0xb18>
 8007548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800754c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	66bb      	str	r3, [r7, #104]	; 0x68
 8007554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007558:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007562:	b29b      	uxth	r3, r3
 8007564:	461a      	mov	r2, r3
 8007566:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007568:	4413      	add	r3, r2
 800756a:	66bb      	str	r3, [r7, #104]	; 0x68
 800756c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	011a      	lsls	r2, r3, #4
 800757a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800757c:	4413      	add	r3, r2
 800757e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007582:	667b      	str	r3, [r7, #100]	; 0x64
 8007584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	b29b      	uxth	r3, r3
 800758a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800758e:	b29a      	uxth	r2, r3
 8007590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007592:	801a      	strh	r2, [r3, #0]
 8007594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007598:	2b3e      	cmp	r3, #62	; 0x3e
 800759a:	d921      	bls.n	80075e0 <USB_EPStartXfer+0xac0>
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a0:	095b      	lsrs	r3, r3, #5
 80075a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80075a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075aa:	f003 031f 	and.w	r3, r3, #31
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d104      	bne.n	80075bc <USB_EPStartXfer+0xa9c>
 80075b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80075b6:	3b01      	subs	r3, #1
 80075b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80075bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075be:	881b      	ldrh	r3, [r3, #0]
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	029b      	lsls	r3, r3, #10
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	4313      	orrs	r3, r2
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075d8:	b29a      	uxth	r2, r3
 80075da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075dc:	801a      	strh	r2, [r3, #0]
 80075de:	e050      	b.n	8007682 <USB_EPStartXfer+0xb62>
 80075e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10a      	bne.n	80075fe <USB_EPStartXfer+0xade>
 80075e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075fa:	801a      	strh	r2, [r3, #0]
 80075fc:	e041      	b.n	8007682 <USB_EPStartXfer+0xb62>
 80075fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007602:	085b      	lsrs	r3, r3, #1
 8007604:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b00      	cmp	r3, #0
 8007612:	d004      	beq.n	800761e <USB_EPStartXfer+0xafe>
 8007614:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007618:	3301      	adds	r3, #1
 800761a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800761e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	b29a      	uxth	r2, r3
 8007624:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007628:	b29b      	uxth	r3, r3
 800762a:	029b      	lsls	r3, r3, #10
 800762c:	b29b      	uxth	r3, r3
 800762e:	4313      	orrs	r3, r2
 8007630:	b29a      	uxth	r2, r3
 8007632:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007634:	801a      	strh	r2, [r3, #0]
 8007636:	e024      	b.n	8007682 <USB_EPStartXfer+0xb62>
 8007638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	785b      	ldrb	r3, [r3, #1]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d11c      	bne.n	8007682 <USB_EPStartXfer+0xb62>
 8007648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007656:	b29b      	uxth	r3, r3
 8007658:	461a      	mov	r2, r3
 800765a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800765c:	4413      	add	r3, r2
 800765e:	673b      	str	r3, [r7, #112]	; 0x70
 8007660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	011a      	lsls	r2, r3, #4
 800766e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007670:	4413      	add	r3, r2
 8007672:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007676:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800767c:	b29a      	uxth	r2, r3
 800767e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007680:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	895b      	ldrh	r3, [r3, #10]
 800768e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6959      	ldr	r1, [r3, #20]
 800769e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80076a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80076ac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80076b0:	6800      	ldr	r0, [r0, #0]
 80076b2:	f000 ff24 	bl	80084fe <USB_WritePMA>
 80076b6:	e0ca      	b.n	800784e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80076b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	785b      	ldrb	r3, [r3, #1]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d177      	bne.n	80077b8 <USB_EPStartXfer+0xc98>
 80076c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80076e8:	4413      	add	r3, r2
 80076ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	011a      	lsls	r2, r3, #4
 80076fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80076fc:	4413      	add	r3, r2
 80076fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007702:	67bb      	str	r3, [r7, #120]	; 0x78
 8007704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	b29b      	uxth	r3, r3
 800770a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800770e:	b29a      	uxth	r2, r3
 8007710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007712:	801a      	strh	r2, [r3, #0]
 8007714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007718:	2b3e      	cmp	r3, #62	; 0x3e
 800771a:	d921      	bls.n	8007760 <USB_EPStartXfer+0xc40>
 800771c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007720:	095b      	lsrs	r3, r3, #5
 8007722:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800772a:	f003 031f 	and.w	r3, r3, #31
 800772e:	2b00      	cmp	r3, #0
 8007730:	d104      	bne.n	800773c <USB_EPStartXfer+0xc1c>
 8007732:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007736:	3b01      	subs	r3, #1
 8007738:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800773c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	b29a      	uxth	r2, r3
 8007742:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007746:	b29b      	uxth	r3, r3
 8007748:	029b      	lsls	r3, r3, #10
 800774a:	b29b      	uxth	r3, r3
 800774c:	4313      	orrs	r3, r2
 800774e:	b29b      	uxth	r3, r3
 8007750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007758:	b29a      	uxth	r2, r3
 800775a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800775c:	801a      	strh	r2, [r3, #0]
 800775e:	e05c      	b.n	800781a <USB_EPStartXfer+0xcfa>
 8007760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10a      	bne.n	800777e <USB_EPStartXfer+0xc5e>
 8007768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	b29b      	uxth	r3, r3
 800776e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007776:	b29a      	uxth	r2, r3
 8007778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800777a:	801a      	strh	r2, [r3, #0]
 800777c:	e04d      	b.n	800781a <USB_EPStartXfer+0xcfa>
 800777e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007782:	085b      	lsrs	r3, r3, #1
 8007784:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b00      	cmp	r3, #0
 8007792:	d004      	beq.n	800779e <USB_EPStartXfer+0xc7e>
 8007794:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007798:	3301      	adds	r3, #1
 800779a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800779e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	029b      	lsls	r3, r3, #10
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	4313      	orrs	r3, r2
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077b4:	801a      	strh	r2, [r3, #0]
 80077b6:	e030      	b.n	800781a <USB_EPStartXfer+0xcfa>
 80077b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	785b      	ldrb	r3, [r3, #1]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d128      	bne.n	800781a <USB_EPStartXfer+0xcfa>
 80077c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	461a      	mov	r2, r3
 80077e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077ec:	4413      	add	r3, r2
 80077ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	011a      	lsls	r2, r3, #4
 8007800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007804:	4413      	add	r3, r2
 8007806:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800780a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800780e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007812:	b29a      	uxth	r2, r3
 8007814:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007818:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800781a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800781e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	891b      	ldrh	r3, [r3, #8]
 8007826:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800782a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800782e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6959      	ldr	r1, [r3, #20]
 8007836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800783a:	b29b      	uxth	r3, r3
 800783c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007840:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007844:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007848:	6800      	ldr	r0, [r0, #0]
 800784a:	f000 fe58 	bl	80084fe <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800784e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800785c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007874:	817b      	strh	r3, [r7, #10]
 8007876:	897b      	ldrh	r3, [r7, #10]
 8007878:	f083 0310 	eor.w	r3, r3, #16
 800787c:	817b      	strh	r3, [r7, #10]
 800787e:	897b      	ldrh	r3, [r7, #10]
 8007880:	f083 0320 	eor.w	r3, r3, #32
 8007884:	817b      	strh	r3, [r7, #10]
 8007886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	441a      	add	r2, r3
 80078a0:	897b      	ldrh	r3, [r7, #10]
 80078a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	8013      	strh	r3, [r2, #0]
 80078b6:	f000 bcde 	b.w	8008276 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80078ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	7b1b      	ldrb	r3, [r3, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f040 80bb 	bne.w	8007a42 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80078cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	699a      	ldr	r2, [r3, #24]
 80078d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d917      	bls.n	8007918 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80078e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80078f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	699a      	ldr	r2, [r3, #24]
 8007904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007908:	1ad2      	subs	r2, r2, r3
 800790a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800790e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	619a      	str	r2, [r3, #24]
 8007916:	e00e      	b.n	8007936 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2200      	movs	r2, #0
 8007934:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007948:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007952:	b29b      	uxth	r3, r3
 8007954:	461a      	mov	r2, r3
 8007956:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800795a:	4413      	add	r3, r2
 800795c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	011a      	lsls	r2, r3, #4
 800796e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007972:	4413      	add	r3, r2
 8007974:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007978:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800797c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	b29b      	uxth	r3, r3
 8007984:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007988:	b29a      	uxth	r2, r3
 800798a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800798e:	801a      	strh	r2, [r3, #0]
 8007990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007994:	2b3e      	cmp	r3, #62	; 0x3e
 8007996:	d924      	bls.n	80079e2 <USB_EPStartXfer+0xec2>
 8007998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800799c:	095b      	lsrs	r3, r3, #5
 800799e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079a6:	f003 031f 	and.w	r3, r3, #31
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d104      	bne.n	80079b8 <USB_EPStartXfer+0xe98>
 80079ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079b2:	3b01      	subs	r3, #1
 80079b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	b29a      	uxth	r2, r3
 80079c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	029b      	lsls	r3, r3, #10
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	4313      	orrs	r3, r2
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079dc:	801a      	strh	r2, [r3, #0]
 80079de:	f000 bc10 	b.w	8008202 <USB_EPStartXfer+0x16e2>
 80079e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10c      	bne.n	8007a04 <USB_EPStartXfer+0xee4>
 80079ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a00:	801a      	strh	r2, [r3, #0]
 8007a02:	e3fe      	b.n	8008202 <USB_EPStartXfer+0x16e2>
 8007a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a08:	085b      	lsrs	r3, r3, #1
 8007a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d004      	beq.n	8007a24 <USB_EPStartXfer+0xf04>
 8007a1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a1e:	3301      	adds	r3, #1
 8007a20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	029b      	lsls	r3, r3, #10
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	4313      	orrs	r3, r2
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a3e:	801a      	strh	r2, [r3, #0]
 8007a40:	e3df      	b.n	8008202 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	78db      	ldrb	r3, [r3, #3]
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	f040 8218 	bne.w	8007e84 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	785b      	ldrb	r3, [r3, #1]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f040 809d 	bne.w	8007ba0 <USB_EPStartXfer+0x1080>
 8007a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	461a      	mov	r2, r3
 8007a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	011a      	lsls	r2, r3, #4
 8007a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007aac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007abe:	801a      	strh	r2, [r3, #0]
 8007ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	2b3e      	cmp	r3, #62	; 0x3e
 8007ace:	d92b      	bls.n	8007b28 <USB_EPStartXfer+0x1008>
 8007ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	095b      	lsrs	r3, r3, #5
 8007ade:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f003 031f 	and.w	r3, r3, #31
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d104      	bne.n	8007b00 <USB_EPStartXfer+0xfe0>
 8007af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afa:	3b01      	subs	r3, #1
 8007afc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	029b      	lsls	r3, r3, #10
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	4313      	orrs	r3, r2
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b24:	801a      	strh	r2, [r3, #0]
 8007b26:	e070      	b.n	8007c0a <USB_EPStartXfer+0x10ea>
 8007b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10c      	bne.n	8007b52 <USB_EPStartXfer+0x1032>
 8007b38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b4e:	801a      	strh	r2, [r3, #0]
 8007b50:	e05b      	b.n	8007c0a <USB_EPStartXfer+0x10ea>
 8007b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	085b      	lsrs	r3, r3, #1
 8007b60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	f003 0301 	and.w	r3, r3, #1
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d004      	beq.n	8007b82 <USB_EPStartXfer+0x1062>
 8007b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	029b      	lsls	r3, r3, #10
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	4313      	orrs	r3, r2
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b9c:	801a      	strh	r2, [r3, #0]
 8007b9e:	e034      	b.n	8007c0a <USB_EPStartXfer+0x10ea>
 8007ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	785b      	ldrb	r3, [r3, #1]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d12c      	bne.n	8007c0a <USB_EPStartXfer+0x10ea>
 8007bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	461a      	mov	r2, r3
 8007bd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	011a      	lsls	r2, r3, #4
 8007be8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007bec:	4413      	add	r3, r2
 8007bee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007c08:	801a      	strh	r2, [r3, #0]
 8007c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	785b      	ldrb	r3, [r3, #1]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f040 809d 	bne.w	8007d64 <USB_EPStartXfer+0x1244>
 8007c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	461a      	mov	r2, r3
 8007c4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c4e:	4413      	add	r3, r2
 8007c50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	011a      	lsls	r2, r3, #4
 8007c62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c66:	4413      	add	r3, r2
 8007c68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c82:	801a      	strh	r2, [r3, #0]
 8007c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	2b3e      	cmp	r3, #62	; 0x3e
 8007c92:	d92b      	bls.n	8007cec <USB_EPStartXfer+0x11cc>
 8007c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	095b      	lsrs	r3, r3, #5
 8007ca2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f003 031f 	and.w	r3, r3, #31
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d104      	bne.n	8007cc4 <USB_EPStartXfer+0x11a4>
 8007cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007cc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	029b      	lsls	r3, r3, #10
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ce8:	801a      	strh	r2, [r3, #0]
 8007cea:	e069      	b.n	8007dc0 <USB_EPStartXfer+0x12a0>
 8007cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10c      	bne.n	8007d16 <USB_EPStartXfer+0x11f6>
 8007cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d00:	881b      	ldrh	r3, [r3, #0]
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d12:	801a      	strh	r2, [r3, #0]
 8007d14:	e054      	b.n	8007dc0 <USB_EPStartXfer+0x12a0>
 8007d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	085b      	lsrs	r3, r3, #1
 8007d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d004      	beq.n	8007d46 <USB_EPStartXfer+0x1226>
 8007d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d40:	3301      	adds	r3, #1
 8007d42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	029b      	lsls	r3, r3, #10
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d60:	801a      	strh	r2, [r3, #0]
 8007d62:	e02d      	b.n	8007dc0 <USB_EPStartXfer+0x12a0>
 8007d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	785b      	ldrb	r3, [r3, #1]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d125      	bne.n	8007dc0 <USB_EPStartXfer+0x12a0>
 8007d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	461a      	mov	r2, r3
 8007d86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	011a      	lsls	r2, r3, #4
 8007d9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007da2:	4413      	add	r3, r2
 8007da4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007da8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007dbe:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 8218 	beq.w	8008202 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007df2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d005      	beq.n	8007e0a <USB_EPStartXfer+0x12ea>
 8007dfe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10d      	bne.n	8007e26 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e0a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f040 81f5 	bne.w	8008202 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e18:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f040 81ee 	bne.w	8008202 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e4c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	441a      	add	r2, r3
 8007e6a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	8013      	strh	r3, [r2, #0]
 8007e82:	e1be      	b.n	8008202 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	78db      	ldrb	r3, [r3, #3]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	f040 81b4 	bne.w	80081fe <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	699a      	ldr	r2, [r3, #24]
 8007ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d917      	bls.n	8007ee2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699a      	ldr	r2, [r3, #24]
 8007ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed2:	1ad2      	subs	r2, r2, r3
 8007ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	619a      	str	r2, [r3, #24]
 8007ee0:	e00e      	b.n	8007f00 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2200      	movs	r2, #0
 8007efe:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	785b      	ldrb	r3, [r3, #1]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f040 8085 	bne.w	800801c <USB_EPStartXfer+0x14fc>
 8007f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	461a      	mov	r2, r3
 8007f32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007f36:	4413      	add	r3, r2
 8007f38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	011a      	lsls	r2, r3, #4
 8007f4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007f4e:	4413      	add	r3, r2
 8007f50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f6a:	801a      	strh	r2, [r3, #0]
 8007f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f70:	2b3e      	cmp	r3, #62	; 0x3e
 8007f72:	d923      	bls.n	8007fbc <USB_EPStartXfer+0x149c>
 8007f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f78:	095b      	lsrs	r3, r3, #5
 8007f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f82:	f003 031f 	and.w	r3, r3, #31
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d104      	bne.n	8007f94 <USB_EPStartXfer+0x1474>
 8007f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	029b      	lsls	r3, r3, #10
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fb8:	801a      	strh	r2, [r3, #0]
 8007fba:	e060      	b.n	800807e <USB_EPStartXfer+0x155e>
 8007fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10c      	bne.n	8007fde <USB_EPStartXfer+0x14be>
 8007fc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fc8:	881b      	ldrh	r3, [r3, #0]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fda:	801a      	strh	r2, [r3, #0]
 8007fdc:	e04f      	b.n	800807e <USB_EPStartXfer+0x155e>
 8007fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fe2:	085b      	lsrs	r3, r3, #1
 8007fe4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d004      	beq.n	8007ffe <USB_EPStartXfer+0x14de>
 8007ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ffe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	b29a      	uxth	r2, r3
 8008006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800800a:	b29b      	uxth	r3, r3
 800800c:	029b      	lsls	r3, r3, #10
 800800e:	b29b      	uxth	r3, r3
 8008010:	4313      	orrs	r3, r2
 8008012:	b29a      	uxth	r2, r3
 8008014:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008018:	801a      	strh	r2, [r3, #0]
 800801a:	e030      	b.n	800807e <USB_EPStartXfer+0x155e>
 800801c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	785b      	ldrb	r3, [r3, #1]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d128      	bne.n	800807e <USB_EPStartXfer+0x155e>
 800802c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008030:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800803a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800803e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008048:	b29b      	uxth	r3, r3
 800804a:	461a      	mov	r2, r3
 800804c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008050:	4413      	add	r3, r2
 8008052:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800805a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	011a      	lsls	r2, r3, #4
 8008064:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008068:	4413      	add	r3, r2
 800806a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800806e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008076:	b29a      	uxth	r2, r3
 8008078:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800807c:	801a      	strh	r2, [r3, #0]
 800807e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800808c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	785b      	ldrb	r3, [r3, #1]
 8008098:	2b00      	cmp	r3, #0
 800809a:	f040 8085 	bne.w	80081a8 <USB_EPStartXfer+0x1688>
 800809e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80080ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	461a      	mov	r2, r3
 80080be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80080c2:	4413      	add	r3, r2
 80080c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80080c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	011a      	lsls	r2, r3, #4
 80080d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80080da:	4413      	add	r3, r2
 80080dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080f6:	801a      	strh	r2, [r3, #0]
 80080f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080fc:	2b3e      	cmp	r3, #62	; 0x3e
 80080fe:	d923      	bls.n	8008148 <USB_EPStartXfer+0x1628>
 8008100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008104:	095b      	lsrs	r3, r3, #5
 8008106:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800810a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800810e:	f003 031f 	and.w	r3, r3, #31
 8008112:	2b00      	cmp	r3, #0
 8008114:	d104      	bne.n	8008120 <USB_EPStartXfer+0x1600>
 8008116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800811a:	3b01      	subs	r3, #1
 800811c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008120:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	b29a      	uxth	r2, r3
 8008128:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800812c:	b29b      	uxth	r3, r3
 800812e:	029b      	lsls	r3, r3, #10
 8008130:	b29b      	uxth	r3, r3
 8008132:	4313      	orrs	r3, r2
 8008134:	b29b      	uxth	r3, r3
 8008136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800813a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800813e:	b29a      	uxth	r2, r3
 8008140:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008144:	801a      	strh	r2, [r3, #0]
 8008146:	e05c      	b.n	8008202 <USB_EPStartXfer+0x16e2>
 8008148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10c      	bne.n	800816a <USB_EPStartXfer+0x164a>
 8008150:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	b29b      	uxth	r3, r3
 8008158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800815c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008160:	b29a      	uxth	r2, r3
 8008162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008166:	801a      	strh	r2, [r3, #0]
 8008168:	e04b      	b.n	8008202 <USB_EPStartXfer+0x16e2>
 800816a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800816e:	085b      	lsrs	r3, r3, #1
 8008170:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d004      	beq.n	800818a <USB_EPStartXfer+0x166a>
 8008180:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008184:	3301      	adds	r3, #1
 8008186:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800818a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	b29a      	uxth	r2, r3
 8008192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008196:	b29b      	uxth	r3, r3
 8008198:	029b      	lsls	r3, r3, #10
 800819a:	b29b      	uxth	r3, r3
 800819c:	4313      	orrs	r3, r2
 800819e:	b29a      	uxth	r2, r3
 80081a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081a4:	801a      	strh	r2, [r3, #0]
 80081a6:	e02c      	b.n	8008202 <USB_EPStartXfer+0x16e2>
 80081a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	785b      	ldrb	r3, [r3, #1]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d124      	bne.n	8008202 <USB_EPStartXfer+0x16e2>
 80081b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	461a      	mov	r2, r3
 80081ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80081ce:	4413      	add	r3, r2
 80081d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	011a      	lsls	r2, r3, #4
 80081e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80081e6:	4413      	add	r3, r2
 80081e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081fa:	801a      	strh	r2, [r3, #0]
 80081fc:	e001      	b.n	8008202 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e03a      	b.n	8008278 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008206:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	b29b      	uxth	r3, r3
 8008220:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008228:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800822c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008230:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008234:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008238:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800823c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008240:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008248:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	441a      	add	r2, r3
 800825e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800826a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800826e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008272:	b29b      	uxth	r3, r3
 8008274:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008282:	b480      	push	{r7}
 8008284:	b085      	sub	sp, #20
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	785b      	ldrb	r3, [r3, #1]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d020      	beq.n	80082d6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	881b      	ldrh	r3, [r3, #0]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082aa:	81bb      	strh	r3, [r7, #12]
 80082ac:	89bb      	ldrh	r3, [r7, #12]
 80082ae:	f083 0310 	eor.w	r3, r3, #16
 80082b2:	81bb      	strh	r3, [r7, #12]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	441a      	add	r2, r3
 80082be:	89bb      	ldrh	r3, [r7, #12]
 80082c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	8013      	strh	r3, [r2, #0]
 80082d4:	e01f      	b.n	8008316 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	881b      	ldrh	r3, [r3, #0]
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ec:	81fb      	strh	r3, [r7, #14]
 80082ee:	89fb      	ldrh	r3, [r7, #14]
 80082f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082f4:	81fb      	strh	r3, [r7, #14]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	441a      	add	r2, r3
 8008300:	89fb      	ldrh	r3, [r7, #14]
 8008302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800830a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800830e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008312:	b29b      	uxth	r3, r3
 8008314:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	bc80      	pop	{r7}
 8008320:	4770      	bx	lr

08008322 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008322:	b480      	push	{r7}
 8008324:	b087      	sub	sp, #28
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	7b1b      	ldrb	r3, [r3, #12]
 8008330:	2b00      	cmp	r3, #0
 8008332:	f040 809d 	bne.w	8008470 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	785b      	ldrb	r3, [r3, #1]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d04c      	beq.n	80083d8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	823b      	strh	r3, [r7, #16]
 800834c:	8a3b      	ldrh	r3, [r7, #16]
 800834e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008352:	2b00      	cmp	r3, #0
 8008354:	d01b      	beq.n	800838e <USB_EPClearStall+0x6c>
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	b29b      	uxth	r3, r3
 8008364:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800836c:	81fb      	strh	r3, [r7, #14]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	441a      	add	r2, r3
 8008378:	89fb      	ldrh	r3, [r7, #14]
 800837a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800837e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008386:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800838a:	b29b      	uxth	r3, r3
 800838c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	78db      	ldrb	r3, [r3, #3]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d06c      	beq.n	8008470 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083ac:	81bb      	strh	r3, [r7, #12]
 80083ae:	89bb      	ldrh	r3, [r7, #12]
 80083b0:	f083 0320 	eor.w	r3, r3, #32
 80083b4:	81bb      	strh	r3, [r7, #12]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	441a      	add	r2, r3
 80083c0:	89bb      	ldrh	r3, [r7, #12]
 80083c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	8013      	strh	r3, [r2, #0]
 80083d6:	e04b      	b.n	8008470 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	82fb      	strh	r3, [r7, #22]
 80083e6:	8afb      	ldrh	r3, [r7, #22]
 80083e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d01b      	beq.n	8008428 <USB_EPClearStall+0x106>
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4413      	add	r3, r2
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008406:	82bb      	strh	r3, [r7, #20]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	441a      	add	r2, r3
 8008412:	8abb      	ldrh	r3, [r7, #20]
 8008414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800841c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008424:	b29b      	uxth	r3, r3
 8008426:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	881b      	ldrh	r3, [r3, #0]
 8008434:	b29b      	uxth	r3, r3
 8008436:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800843a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800843e:	827b      	strh	r3, [r7, #18]
 8008440:	8a7b      	ldrh	r3, [r7, #18]
 8008442:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008446:	827b      	strh	r3, [r7, #18]
 8008448:	8a7b      	ldrh	r3, [r7, #18]
 800844a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800844e:	827b      	strh	r3, [r7, #18]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	441a      	add	r2, r3
 800845a:	8a7b      	ldrh	r3, [r7, #18]
 800845c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800846c:	b29b      	uxth	r3, r3
 800846e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	371c      	adds	r7, #28
 8008476:	46bd      	mov	sp, r7
 8008478:	bc80      	pop	{r7}
 800847a:	4770      	bx	lr

0800847c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008488:	78fb      	ldrb	r3, [r7, #3]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d103      	bne.n	8008496 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2280      	movs	r2, #128	; 0x80
 8008492:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	bc80      	pop	{r7}
 80084a0:	4770      	bx	lr

080084a2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bc80      	pop	{r7}
 80084b4:	4770      	bx	lr

080084b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b083      	sub	sp, #12
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bc80      	pop	{r7}
 80084c8:	4770      	bx	lr

080084ca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b085      	sub	sp, #20
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80084d8:	b29b      	uxth	r3, r3
 80084da:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80084dc:	68fb      	ldr	r3, [r7, #12]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bc80      	pop	{r7}
 80084e6:	4770      	bx	lr

080084e8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bc80      	pop	{r7}
 80084fc:	4770      	bx	lr

080084fe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80084fe:	b480      	push	{r7}
 8008500:	b08b      	sub	sp, #44	; 0x2c
 8008502:	af00      	add	r7, sp, #0
 8008504:	60f8      	str	r0, [r7, #12]
 8008506:	60b9      	str	r1, [r7, #8]
 8008508:	4611      	mov	r1, r2
 800850a:	461a      	mov	r2, r3
 800850c:	460b      	mov	r3, r1
 800850e:	80fb      	strh	r3, [r7, #6]
 8008510:	4613      	mov	r3, r2
 8008512:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008514:	88bb      	ldrh	r3, [r7, #4]
 8008516:	3301      	adds	r3, #1
 8008518:	085b      	lsrs	r3, r3, #1
 800851a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008524:	88fb      	ldrh	r3, [r7, #6]
 8008526:	005a      	lsls	r2, r3, #1
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008530:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	627b      	str	r3, [r7, #36]	; 0x24
 8008536:	e01e      	b.n	8008576 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	3301      	adds	r3, #1
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	021b      	lsls	r3, r3, #8
 8008546:	b21a      	sxth	r2, r3
 8008548:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800854c:	4313      	orrs	r3, r2
 800854e:	b21b      	sxth	r3, r3
 8008550:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	8a7a      	ldrh	r2, [r7, #18]
 8008556:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	3302      	adds	r3, #2
 800855c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	3302      	adds	r3, #2
 8008562:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	3301      	adds	r3, #1
 8008568:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	3301      	adds	r3, #1
 800856e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	3b01      	subs	r3, #1
 8008574:	627b      	str	r3, [r7, #36]	; 0x24
 8008576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1dd      	bne.n	8008538 <USB_WritePMA+0x3a>
  }
}
 800857c:	bf00      	nop
 800857e:	bf00      	nop
 8008580:	372c      	adds	r7, #44	; 0x2c
 8008582:	46bd      	mov	sp, r7
 8008584:	bc80      	pop	{r7}
 8008586:	4770      	bx	lr

08008588 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008588:	b480      	push	{r7}
 800858a:	b08b      	sub	sp, #44	; 0x2c
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	4611      	mov	r1, r2
 8008594:	461a      	mov	r2, r3
 8008596:	460b      	mov	r3, r1
 8008598:	80fb      	strh	r3, [r7, #6]
 800859a:	4613      	mov	r3, r2
 800859c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800859e:	88bb      	ldrh	r3, [r7, #4]
 80085a0:	085b      	lsrs	r3, r3, #1
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085ae:	88fb      	ldrh	r3, [r7, #6]
 80085b0:	005a      	lsls	r2, r3, #1
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085ba:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	627b      	str	r3, [r7, #36]	; 0x24
 80085c0:	e01b      	b.n	80085fa <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80085ca:	6a3b      	ldr	r3, [r7, #32]
 80085cc:	3302      	adds	r3, #2
 80085ce:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	3301      	adds	r3, #1
 80085dc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	0a1b      	lsrs	r3, r3, #8
 80085e2:	b2da      	uxtb	r2, r3
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	3301      	adds	r3, #1
 80085ec:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	3302      	adds	r3, #2
 80085f2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	3b01      	subs	r3, #1
 80085f8:	627b      	str	r3, [r7, #36]	; 0x24
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1e0      	bne.n	80085c2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008600:	88bb      	ldrh	r3, [r7, #4]
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	b29b      	uxth	r3, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	d007      	beq.n	800861c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	881b      	ldrh	r3, [r3, #0]
 8008610:	b29b      	uxth	r3, r3
 8008612:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	b2da      	uxtb	r2, r3
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	701a      	strb	r2, [r3, #0]
  }
}
 800861c:	bf00      	nop
 800861e:	372c      	adds	r7, #44	; 0x2c
 8008620:	46bd      	mov	sp, r7
 8008622:	bc80      	pop	{r7}
 8008624:	4770      	bx	lr

08008626 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	460b      	mov	r3, r1
 8008630:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008632:	2300      	movs	r3, #0
 8008634:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	7c1b      	ldrb	r3, [r3, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d115      	bne.n	800866a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800863e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008642:	2202      	movs	r2, #2
 8008644:	2181      	movs	r1, #129	; 0x81
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f001 fe9d 	bl	800a386 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008652:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008656:	2202      	movs	r2, #2
 8008658:	2101      	movs	r1, #1
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f001 fe93 	bl	800a386 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008668:	e012      	b.n	8008690 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800866a:	2340      	movs	r3, #64	; 0x40
 800866c:	2202      	movs	r2, #2
 800866e:	2181      	movs	r1, #129	; 0x81
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f001 fe88 	bl	800a386 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800867c:	2340      	movs	r3, #64	; 0x40
 800867e:	2202      	movs	r2, #2
 8008680:	2101      	movs	r1, #1
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f001 fe7f 	bl	800a386 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008690:	2308      	movs	r3, #8
 8008692:	2203      	movs	r2, #3
 8008694:	2182      	movs	r1, #130	; 0x82
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f001 fe75 	bl	800a386 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80086a2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80086a6:	f001 ff95 	bl	800a5d4 <USBD_static_malloc>
 80086aa:	4602      	mov	r2, r0
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d102      	bne.n	80086c2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80086bc:	2301      	movs	r3, #1
 80086be:	73fb      	strb	r3, [r7, #15]
 80086c0:	e026      	b.n	8008710 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	2200      	movs	r2, #0
 80086e0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	7c1b      	ldrb	r3, [r3, #16]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d109      	bne.n	8008700 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086f6:	2101      	movs	r1, #1
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f001 ff35 	bl	800a568 <USBD_LL_PrepareReceive>
 80086fe:	e007      	b.n	8008710 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008706:	2340      	movs	r3, #64	; 0x40
 8008708:	2101      	movs	r1, #1
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f001 ff2c 	bl	800a568 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008710:	7bfb      	ldrb	r3, [r7, #15]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b084      	sub	sp, #16
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	460b      	mov	r3, r1
 8008724:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008726:	2300      	movs	r3, #0
 8008728:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800872a:	2181      	movs	r1, #129	; 0x81
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f001 fe50 	bl	800a3d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008738:	2101      	movs	r1, #1
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f001 fe49 	bl	800a3d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008748:	2182      	movs	r1, #130	; 0x82
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f001 fe41 	bl	800a3d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00e      	beq.n	800877e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008770:	4618      	mov	r0, r3
 8008772:	f001 ff3b 	bl	800a5ec <USBD_static_free>
    pdev->pClassData = NULL;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800877e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008798:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d039      	beq.n	8008826 <USBD_CDC_Setup+0x9e>
 80087b2:	2b20      	cmp	r3, #32
 80087b4:	d17f      	bne.n	80088b6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	88db      	ldrh	r3, [r3, #6]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d029      	beq.n	8008812 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	b25b      	sxtb	r3, r3
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	da11      	bge.n	80087ec <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80087d4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	88d2      	ldrh	r2, [r2, #6]
 80087da:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80087dc:	6939      	ldr	r1, [r7, #16]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	88db      	ldrh	r3, [r3, #6]
 80087e2:	461a      	mov	r2, r3
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f001 fa0a 	bl	8009bfe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80087ea:	e06b      	b.n	80088c4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	785a      	ldrb	r2, [r3, #1]
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	88db      	ldrh	r3, [r3, #6]
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008802:	6939      	ldr	r1, [r7, #16]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	88db      	ldrh	r3, [r3, #6]
 8008808:	461a      	mov	r2, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f001 fa25 	bl	8009c5a <USBD_CtlPrepareRx>
      break;
 8008810:	e058      	b.n	80088c4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	683a      	ldr	r2, [r7, #0]
 800881c:	7850      	ldrb	r0, [r2, #1]
 800881e:	2200      	movs	r2, #0
 8008820:	6839      	ldr	r1, [r7, #0]
 8008822:	4798      	blx	r3
      break;
 8008824:	e04e      	b.n	80088c4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	785b      	ldrb	r3, [r3, #1]
 800882a:	2b0b      	cmp	r3, #11
 800882c:	d02e      	beq.n	800888c <USBD_CDC_Setup+0x104>
 800882e:	2b0b      	cmp	r3, #11
 8008830:	dc38      	bgt.n	80088a4 <USBD_CDC_Setup+0x11c>
 8008832:	2b00      	cmp	r3, #0
 8008834:	d002      	beq.n	800883c <USBD_CDC_Setup+0xb4>
 8008836:	2b0a      	cmp	r3, #10
 8008838:	d014      	beq.n	8008864 <USBD_CDC_Setup+0xdc>
 800883a:	e033      	b.n	80088a4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008842:	2b03      	cmp	r3, #3
 8008844:	d107      	bne.n	8008856 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008846:	f107 030c 	add.w	r3, r7, #12
 800884a:	2202      	movs	r2, #2
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f001 f9d5 	bl	8009bfe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008854:	e02e      	b.n	80088b4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f001 f966 	bl	8009b2a <USBD_CtlError>
            ret = USBD_FAIL;
 800885e:	2302      	movs	r3, #2
 8008860:	75fb      	strb	r3, [r7, #23]
          break;
 8008862:	e027      	b.n	80088b4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800886a:	2b03      	cmp	r3, #3
 800886c:	d107      	bne.n	800887e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800886e:	f107 030f 	add.w	r3, r7, #15
 8008872:	2201      	movs	r2, #1
 8008874:	4619      	mov	r1, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f001 f9c1 	bl	8009bfe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800887c:	e01a      	b.n	80088b4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f001 f952 	bl	8009b2a <USBD_CtlError>
            ret = USBD_FAIL;
 8008886:	2302      	movs	r3, #2
 8008888:	75fb      	strb	r3, [r7, #23]
          break;
 800888a:	e013      	b.n	80088b4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008892:	2b03      	cmp	r3, #3
 8008894:	d00d      	beq.n	80088b2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f001 f946 	bl	8009b2a <USBD_CtlError>
            ret = USBD_FAIL;
 800889e:	2302      	movs	r3, #2
 80088a0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80088a2:	e006      	b.n	80088b2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80088a4:	6839      	ldr	r1, [r7, #0]
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f001 f93f 	bl	8009b2a <USBD_CtlError>
          ret = USBD_FAIL;
 80088ac:	2302      	movs	r3, #2
 80088ae:	75fb      	strb	r3, [r7, #23]
          break;
 80088b0:	e000      	b.n	80088b4 <USBD_CDC_Setup+0x12c>
          break;
 80088b2:	bf00      	nop
      }
      break;
 80088b4:	e006      	b.n	80088c4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f001 f936 	bl	8009b2a <USBD_CtlError>
      ret = USBD_FAIL;
 80088be:	2302      	movs	r3, #2
 80088c0:	75fb      	strb	r3, [r7, #23]
      break;
 80088c2:	bf00      	nop
  }

  return ret;
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3718      	adds	r7, #24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b084      	sub	sp, #16
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	460b      	mov	r3, r1
 80088d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088e8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d03a      	beq.n	800896a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80088f4:	78fa      	ldrb	r2, [r7, #3]
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	4613      	mov	r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	4413      	add	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	440b      	add	r3, r1
 8008902:	331c      	adds	r3, #28
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d029      	beq.n	800895e <USBD_CDC_DataIn+0x90>
 800890a:	78fa      	ldrb	r2, [r7, #3]
 800890c:	6879      	ldr	r1, [r7, #4]
 800890e:	4613      	mov	r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	440b      	add	r3, r1
 8008918:	331c      	adds	r3, #28
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	78f9      	ldrb	r1, [r7, #3]
 800891e:	68b8      	ldr	r0, [r7, #8]
 8008920:	460b      	mov	r3, r1
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	440b      	add	r3, r1
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	4403      	add	r3, r0
 800892a:	3338      	adds	r3, #56	; 0x38
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	fbb2 f1f3 	udiv	r1, r2, r3
 8008932:	fb01 f303 	mul.w	r3, r1, r3
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	2b00      	cmp	r3, #0
 800893a:	d110      	bne.n	800895e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800893c:	78fa      	ldrb	r2, [r7, #3]
 800893e:	6879      	ldr	r1, [r7, #4]
 8008940:	4613      	mov	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4413      	add	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	440b      	add	r3, r1
 800894a:	331c      	adds	r3, #28
 800894c:	2200      	movs	r2, #0
 800894e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008950:	78f9      	ldrb	r1, [r7, #3]
 8008952:	2300      	movs	r3, #0
 8008954:	2200      	movs	r2, #0
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f001 fde3 	bl	800a522 <USBD_LL_Transmit>
 800895c:	e003      	b.n	8008966 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008966:	2300      	movs	r3, #0
 8008968:	e000      	b.n	800896c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800896a:	2302      	movs	r3, #2
  }
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	460b      	mov	r3, r1
 800897e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008986:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008988:	78fb      	ldrb	r3, [r7, #3]
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f001 fe0e 	bl	800a5ae <USBD_LL_GetRxDataSize>
 8008992:	4602      	mov	r2, r0
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00d      	beq.n	80089c0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80089b8:	4611      	mov	r1, r2
 80089ba:	4798      	blx	r3

    return USBD_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	e000      	b.n	80089c2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80089c0:	2302      	movs	r3, #2
  }
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d015      	beq.n	8008a10 <USBD_CDC_EP0_RxReady+0x46>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80089ea:	2bff      	cmp	r3, #255	; 0xff
 80089ec:	d010      	beq.n	8008a10 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80089fc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a04:	b292      	uxth	r2, r2
 8008a06:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	22ff      	movs	r2, #255	; 0xff
 8008a0c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
	...

08008a1c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2243      	movs	r2, #67	; 0x43
 8008a28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008a2a:	4b03      	ldr	r3, [pc, #12]	; (8008a38 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bc80      	pop	{r7}
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	20000094 	.word	0x20000094

08008a3c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2243      	movs	r2, #67	; 0x43
 8008a48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008a4a:	4b03      	ldr	r3, [pc, #12]	; (8008a58 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bc80      	pop	{r7}
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	20000050 	.word	0x20000050

08008a5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2243      	movs	r2, #67	; 0x43
 8008a68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008a6a:	4b03      	ldr	r3, [pc, #12]	; (8008a78 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bc80      	pop	{r7}
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	200000d8 	.word	0x200000d8

08008a7c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	220a      	movs	r2, #10
 8008a88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008a8a:	4b03      	ldr	r3, [pc, #12]	; (8008a98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bc80      	pop	{r7}
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	2000000c 	.word	0x2000000c

08008a9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008aa6:	2302      	movs	r3, #2
 8008aa8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d005      	beq.n	8008abc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3714      	adds	r7, #20
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bc80      	pop	{r7}
 8008ac6:	4770      	bx	lr

08008ac8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b087      	sub	sp, #28
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008adc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008ae6:	88fa      	ldrh	r2, [r7, #6]
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	371c      	adds	r7, #28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bc80      	pop	{r7}
 8008af8:	4770      	bx	lr

08008afa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008afa:	b480      	push	{r7}
 8008afc:	b085      	sub	sp, #20
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b0a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bc80      	pop	{r7}
 8008b1e:	4770      	bx	lr

08008b20 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d01c      	beq.n	8008b74 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d115      	bne.n	8008b70 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	2181      	movs	r1, #129	; 0x81
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f001 fcdb 	bl	800a522 <USBD_LL_Transmit>

      return USBD_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	e002      	b.n	8008b76 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e000      	b.n	8008b76 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008b74:	2302      	movs	r3, #2
  }
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b8c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d017      	beq.n	8008bc8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	7c1b      	ldrb	r3, [r3, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d109      	bne.n	8008bb4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008baa:	2101      	movs	r1, #1
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f001 fcdb 	bl	800a568 <USBD_LL_PrepareReceive>
 8008bb2:	e007      	b.n	8008bc4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bba:	2340      	movs	r3, #64	; 0x40
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f001 fcd2 	bl	800a568 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	e000      	b.n	8008bca <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008bc8:	2302      	movs	r3, #2
  }
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b084      	sub	sp, #16
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	60f8      	str	r0, [r7, #12]
 8008bda:	60b9      	str	r1, [r7, #8]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d101      	bne.n	8008bea <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008be6:	2302      	movs	r3, #2
 8008be8:	e01a      	b.n	8008c20 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	79fa      	ldrb	r2, [r7, #7]
 8008c16:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f001 fb3f 	bl	800a29c <USBD_LL_Init>

  return USBD_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d006      	beq.n	8008c4a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	73fb      	strb	r3, [r7, #15]
 8008c48:	e001      	b.n	8008c4e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bc80      	pop	{r7}
 8008c58:	4770      	bx	lr

08008c5a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b082      	sub	sp, #8
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f001 fb74 	bl	800a350 <USBD_LL_Start>

  return USBD_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b083      	sub	sp, #12
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bc80      	pop	{r7}
 8008c84:	4770      	bx	lr

08008c86 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b084      	sub	sp, #16
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	460b      	mov	r3, r1
 8008c90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008c92:	2302      	movs	r3, #2
 8008c94:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00c      	beq.n	8008cba <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	78fa      	ldrb	r2, [r7, #3]
 8008caa:	4611      	mov	r1, r2
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	4798      	blx	r3
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	78fa      	ldrb	r2, [r7, #3]
 8008cda:	4611      	mov	r1, r2
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	4798      	blx	r3

  return USBD_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b082      	sub	sp, #8
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 fed8 	bl	8009ab2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008d10:	461a      	mov	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008d1e:	f003 031f 	and.w	r3, r3, #31
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d016      	beq.n	8008d54 <USBD_LL_SetupStage+0x6a>
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d81c      	bhi.n	8008d64 <USBD_LL_SetupStage+0x7a>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <USBD_LL_SetupStage+0x4a>
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d008      	beq.n	8008d44 <USBD_LL_SetupStage+0x5a>
 8008d32:	e017      	b.n	8008d64 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f9cb 	bl	80090d8 <USBD_StdDevReq>
      break;
 8008d42:	e01a      	b.n	8008d7a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fa2d 	bl	80091ac <USBD_StdItfReq>
      break;
 8008d52:	e012      	b.n	8008d7a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fa6d 	bl	800923c <USBD_StdEPReq>
      break;
 8008d62:	e00a      	b.n	8008d7a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008d6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f001 fb4c 	bl	800a410 <USBD_LL_StallEP>
      break;
 8008d78:	bf00      	nop
  }

  return USBD_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	607a      	str	r2, [r7, #4]
 8008d90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008d92:	7afb      	ldrb	r3, [r7, #11]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d14b      	bne.n	8008e30 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008d9e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	d134      	bne.n	8008e14 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	68da      	ldr	r2, [r3, #12]
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d919      	bls.n	8008dea <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	68da      	ldr	r2, [r3, #12]
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	1ad2      	subs	r2, r2, r3
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d203      	bcs.n	8008dd8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	e002      	b.n	8008dde <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	461a      	mov	r2, r3
 8008de0:	6879      	ldr	r1, [r7, #4]
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f000 ff57 	bl	8009c96 <USBD_CtlContinueRx>
 8008de8:	e038      	b.n	8008e5c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00a      	beq.n	8008e0c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008dfc:	2b03      	cmp	r3, #3
 8008dfe:	d105      	bne.n	8008e0c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f000 ff54 	bl	8009cba <USBD_CtlSendStatus>
 8008e12:	e023      	b.n	8008e5c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e1a:	2b05      	cmp	r3, #5
 8008e1c:	d11e      	bne.n	8008e5c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008e26:	2100      	movs	r1, #0
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f001 faf1 	bl	800a410 <USBD_LL_StallEP>
 8008e2e:	e015      	b.n	8008e5c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00d      	beq.n	8008e58 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d108      	bne.n	8008e58 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	7afa      	ldrb	r2, [r7, #11]
 8008e50:	4611      	mov	r1, r2
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	4798      	blx	r3
 8008e56:	e001      	b.n	8008e5c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e58:	2302      	movs	r3, #2
 8008e5a:	e000      	b.n	8008e5e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b086      	sub	sp, #24
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	60f8      	str	r0, [r7, #12]
 8008e6e:	460b      	mov	r3, r1
 8008e70:	607a      	str	r2, [r7, #4]
 8008e72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008e74:	7afb      	ldrb	r3, [r7, #11]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d17f      	bne.n	8008f7a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	3314      	adds	r3, #20
 8008e7e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d15c      	bne.n	8008f44 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	68da      	ldr	r2, [r3, #12]
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d915      	bls.n	8008ec2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	68da      	ldr	r2, [r3, #12]
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	1ad2      	subs	r2, r2, r3
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	461a      	mov	r2, r3
 8008eac:	6879      	ldr	r1, [r7, #4]
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f000 fec1 	bl	8009c36 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	2100      	movs	r1, #0
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f001 fb54 	bl	800a568 <USBD_LL_PrepareReceive>
 8008ec0:	e04e      	b.n	8008f60 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	6912      	ldr	r2, [r2, #16]
 8008eca:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ece:	fb01 f202 	mul.w	r2, r1, r2
 8008ed2:	1a9b      	subs	r3, r3, r2
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d11c      	bne.n	8008f12 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	689a      	ldr	r2, [r3, #8]
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d316      	bcc.n	8008f12 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	689a      	ldr	r2, [r3, #8]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d20f      	bcs.n	8008f12 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f000 fe9d 	bl	8009c36 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f04:	2300      	movs	r3, #0
 8008f06:	2200      	movs	r2, #0
 8008f08:	2100      	movs	r1, #0
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f001 fb2c 	bl	800a568 <USBD_LL_PrepareReceive>
 8008f10:	e026      	b.n	8008f60 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00a      	beq.n	8008f34 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f24:	2b03      	cmp	r3, #3
 8008f26:	d105      	bne.n	8008f34 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008f34:	2180      	movs	r1, #128	; 0x80
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f001 fa6a 	bl	800a410 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f000 fecf 	bl	8009ce0 <USBD_CtlReceiveStatus>
 8008f42:	e00d      	b.n	8008f60 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f4a:	2b04      	cmp	r3, #4
 8008f4c:	d004      	beq.n	8008f58 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d103      	bne.n	8008f60 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008f58:	2180      	movs	r1, #128	; 0x80
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f001 fa58 	bl	800a410 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d11d      	bne.n	8008fa6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f7ff fe81 	bl	8008c72 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008f78:	e015      	b.n	8008fa6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f80:	695b      	ldr	r3, [r3, #20]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00d      	beq.n	8008fa2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008f8c:	2b03      	cmp	r3, #3
 8008f8e:	d108      	bne.n	8008fa2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	7afa      	ldrb	r2, [r7, #11]
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	4798      	blx	r3
 8008fa0:	e001      	b.n	8008fa6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	e000      	b.n	8008fa8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3718      	adds	r7, #24
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fb8:	2340      	movs	r3, #64	; 0x40
 8008fba:	2200      	movs	r2, #0
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f001 f9e1 	bl	800a386 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2240      	movs	r2, #64	; 0x40
 8008fd0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fd4:	2340      	movs	r3, #64	; 0x40
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2180      	movs	r1, #128	; 0x80
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f001 f9d3 	bl	800a386 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2240      	movs	r2, #64	; 0x40
 8008fea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009010:	2b00      	cmp	r3, #0
 8009012:	d009      	beq.n	8009028 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	6852      	ldr	r2, [r2, #4]
 8009020:	b2d2      	uxtb	r2, r2
 8009022:	4611      	mov	r1, r2
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	4798      	blx	r3
  }

  return USBD_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009032:	b480      	push	{r7}
 8009034:	b083      	sub	sp, #12
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	460b      	mov	r3, r1
 800903c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	78fa      	ldrb	r2, [r7, #3]
 8009042:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	bc80      	pop	{r7}
 800904e:	4770      	bx	lr

08009050 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2204      	movs	r2, #4
 8009068:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	bc80      	pop	{r7}
 8009076:	4770      	bx	lr

08009078 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009086:	2b04      	cmp	r3, #4
 8009088:	d105      	bne.n	8009096 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	bc80      	pop	{r7}
 80090a0:	4770      	bx	lr

080090a2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b082      	sub	sp, #8
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090b0:	2b03      	cmp	r3, #3
 80090b2:	d10b      	bne.n	80090cc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ba:	69db      	ldr	r3, [r3, #28]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d005      	beq.n	80090cc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090c6:	69db      	ldr	r3, [r3, #28]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
	...

080090d8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090ee:	2b40      	cmp	r3, #64	; 0x40
 80090f0:	d005      	beq.n	80090fe <USBD_StdDevReq+0x26>
 80090f2:	2b40      	cmp	r3, #64	; 0x40
 80090f4:	d84f      	bhi.n	8009196 <USBD_StdDevReq+0xbe>
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d009      	beq.n	800910e <USBD_StdDevReq+0x36>
 80090fa:	2b20      	cmp	r3, #32
 80090fc:	d14b      	bne.n	8009196 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	4798      	blx	r3
      break;
 800910c:	e048      	b.n	80091a0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	785b      	ldrb	r3, [r3, #1]
 8009112:	2b09      	cmp	r3, #9
 8009114:	d839      	bhi.n	800918a <USBD_StdDevReq+0xb2>
 8009116:	a201      	add	r2, pc, #4	; (adr r2, 800911c <USBD_StdDevReq+0x44>)
 8009118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911c:	0800916d 	.word	0x0800916d
 8009120:	08009181 	.word	0x08009181
 8009124:	0800918b 	.word	0x0800918b
 8009128:	08009177 	.word	0x08009177
 800912c:	0800918b 	.word	0x0800918b
 8009130:	0800914f 	.word	0x0800914f
 8009134:	08009145 	.word	0x08009145
 8009138:	0800918b 	.word	0x0800918b
 800913c:	08009163 	.word	0x08009163
 8009140:	08009159 	.word	0x08009159
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f9dc 	bl	8009504 <USBD_GetDescriptor>
          break;
 800914c:	e022      	b.n	8009194 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fb3f 	bl	80097d4 <USBD_SetAddress>
          break;
 8009156:	e01d      	b.n	8009194 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fb7e 	bl	800985c <USBD_SetConfig>
          break;
 8009160:	e018      	b.n	8009194 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fc07 	bl	8009978 <USBD_GetConfig>
          break;
 800916a:	e013      	b.n	8009194 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fc37 	bl	80099e2 <USBD_GetStatus>
          break;
 8009174:	e00e      	b.n	8009194 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fc65 	bl	8009a48 <USBD_SetFeature>
          break;
 800917e:	e009      	b.n	8009194 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fc74 	bl	8009a70 <USBD_ClrFeature>
          break;
 8009188:	e004      	b.n	8009194 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fccc 	bl	8009b2a <USBD_CtlError>
          break;
 8009192:	bf00      	nop
      }
      break;
 8009194:	e004      	b.n	80091a0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fcc6 	bl	8009b2a <USBD_CtlError>
      break;
 800919e:	bf00      	nop
  }

  return ret;
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop

080091ac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091c2:	2b40      	cmp	r3, #64	; 0x40
 80091c4:	d005      	beq.n	80091d2 <USBD_StdItfReq+0x26>
 80091c6:	2b40      	cmp	r3, #64	; 0x40
 80091c8:	d82e      	bhi.n	8009228 <USBD_StdItfReq+0x7c>
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d001      	beq.n	80091d2 <USBD_StdItfReq+0x26>
 80091ce:	2b20      	cmp	r3, #32
 80091d0:	d12a      	bne.n	8009228 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091d8:	3b01      	subs	r3, #1
 80091da:	2b02      	cmp	r3, #2
 80091dc:	d81d      	bhi.n	800921a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	889b      	ldrh	r3, [r3, #4]
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d813      	bhi.n	8009210 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	6839      	ldr	r1, [r7, #0]
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	4798      	blx	r3
 80091f6:	4603      	mov	r3, r0
 80091f8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	88db      	ldrh	r3, [r3, #6]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d110      	bne.n	8009224 <USBD_StdItfReq+0x78>
 8009202:	7bfb      	ldrb	r3, [r7, #15]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10d      	bne.n	8009224 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 fd56 	bl	8009cba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800920e:	e009      	b.n	8009224 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fc89 	bl	8009b2a <USBD_CtlError>
          break;
 8009218:	e004      	b.n	8009224 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800921a:	6839      	ldr	r1, [r7, #0]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fc84 	bl	8009b2a <USBD_CtlError>
          break;
 8009222:	e000      	b.n	8009226 <USBD_StdItfReq+0x7a>
          break;
 8009224:	bf00      	nop
      }
      break;
 8009226:	e004      	b.n	8009232 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fc7d 	bl	8009b2a <USBD_CtlError>
      break;
 8009230:	bf00      	nop
  }

  return USBD_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	889b      	ldrh	r3, [r3, #4]
 800924e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009258:	2b40      	cmp	r3, #64	; 0x40
 800925a:	d007      	beq.n	800926c <USBD_StdEPReq+0x30>
 800925c:	2b40      	cmp	r3, #64	; 0x40
 800925e:	f200 8146 	bhi.w	80094ee <USBD_StdEPReq+0x2b2>
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00a      	beq.n	800927c <USBD_StdEPReq+0x40>
 8009266:	2b20      	cmp	r3, #32
 8009268:	f040 8141 	bne.w	80094ee <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	4798      	blx	r3
      break;
 800927a:	e13d      	b.n	80094f8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009284:	2b20      	cmp	r3, #32
 8009286:	d10a      	bne.n	800929e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	6839      	ldr	r1, [r7, #0]
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	4798      	blx	r3
 8009296:	4603      	mov	r3, r0
 8009298:	73fb      	strb	r3, [r7, #15]

        return ret;
 800929a:	7bfb      	ldrb	r3, [r7, #15]
 800929c:	e12d      	b.n	80094fa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	785b      	ldrb	r3, [r3, #1]
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d007      	beq.n	80092b6 <USBD_StdEPReq+0x7a>
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	f300 811b 	bgt.w	80094e2 <USBD_StdEPReq+0x2a6>
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d072      	beq.n	8009396 <USBD_StdEPReq+0x15a>
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d03a      	beq.n	800932a <USBD_StdEPReq+0xee>
 80092b4:	e115      	b.n	80094e2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d002      	beq.n	80092c6 <USBD_StdEPReq+0x8a>
 80092c0:	2b03      	cmp	r3, #3
 80092c2:	d015      	beq.n	80092f0 <USBD_StdEPReq+0xb4>
 80092c4:	e02b      	b.n	800931e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092c6:	7bbb      	ldrb	r3, [r7, #14]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00c      	beq.n	80092e6 <USBD_StdEPReq+0xaa>
 80092cc:	7bbb      	ldrb	r3, [r7, #14]
 80092ce:	2b80      	cmp	r3, #128	; 0x80
 80092d0:	d009      	beq.n	80092e6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80092d2:	7bbb      	ldrb	r3, [r7, #14]
 80092d4:	4619      	mov	r1, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f001 f89a 	bl	800a410 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80092dc:	2180      	movs	r1, #128	; 0x80
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f001 f896 	bl	800a410 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092e4:	e020      	b.n	8009328 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fc1e 	bl	8009b2a <USBD_CtlError>
              break;
 80092ee:	e01b      	b.n	8009328 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	885b      	ldrh	r3, [r3, #2]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10e      	bne.n	8009316 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80092f8:	7bbb      	ldrb	r3, [r7, #14]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00b      	beq.n	8009316 <USBD_StdEPReq+0xda>
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
 8009300:	2b80      	cmp	r3, #128	; 0x80
 8009302:	d008      	beq.n	8009316 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	88db      	ldrh	r3, [r3, #6]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d104      	bne.n	8009316 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800930c:	7bbb      	ldrb	r3, [r7, #14]
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f001 f87d 	bl	800a410 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fccf 	bl	8009cba <USBD_CtlSendStatus>

              break;
 800931c:	e004      	b.n	8009328 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fc02 	bl	8009b2a <USBD_CtlError>
              break;
 8009326:	bf00      	nop
          }
          break;
 8009328:	e0e0      	b.n	80094ec <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009330:	2b02      	cmp	r3, #2
 8009332:	d002      	beq.n	800933a <USBD_StdEPReq+0xfe>
 8009334:	2b03      	cmp	r3, #3
 8009336:	d015      	beq.n	8009364 <USBD_StdEPReq+0x128>
 8009338:	e026      	b.n	8009388 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800933a:	7bbb      	ldrb	r3, [r7, #14]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00c      	beq.n	800935a <USBD_StdEPReq+0x11e>
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	2b80      	cmp	r3, #128	; 0x80
 8009344:	d009      	beq.n	800935a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009346:	7bbb      	ldrb	r3, [r7, #14]
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f001 f860 	bl	800a410 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009350:	2180      	movs	r1, #128	; 0x80
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f001 f85c 	bl	800a410 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009358:	e01c      	b.n	8009394 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fbe4 	bl	8009b2a <USBD_CtlError>
              break;
 8009362:	e017      	b.n	8009394 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	885b      	ldrh	r3, [r3, #2]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d112      	bne.n	8009392 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800936c:	7bbb      	ldrb	r3, [r7, #14]
 800936e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009372:	2b00      	cmp	r3, #0
 8009374:	d004      	beq.n	8009380 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009376:	7bbb      	ldrb	r3, [r7, #14]
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f001 f867 	bl	800a44e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fc9a 	bl	8009cba <USBD_CtlSendStatus>
              }
              break;
 8009386:	e004      	b.n	8009392 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009388:	6839      	ldr	r1, [r7, #0]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fbcd 	bl	8009b2a <USBD_CtlError>
              break;
 8009390:	e000      	b.n	8009394 <USBD_StdEPReq+0x158>
              break;
 8009392:	bf00      	nop
          }
          break;
 8009394:	e0aa      	b.n	80094ec <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800939c:	2b02      	cmp	r3, #2
 800939e:	d002      	beq.n	80093a6 <USBD_StdEPReq+0x16a>
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	d032      	beq.n	800940a <USBD_StdEPReq+0x1ce>
 80093a4:	e097      	b.n	80094d6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093a6:	7bbb      	ldrb	r3, [r7, #14]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d007      	beq.n	80093bc <USBD_StdEPReq+0x180>
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
 80093ae:	2b80      	cmp	r3, #128	; 0x80
 80093b0:	d004      	beq.n	80093bc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fbb8 	bl	8009b2a <USBD_CtlError>
                break;
 80093ba:	e091      	b.n	80094e0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	da0b      	bge.n	80093dc <USBD_StdEPReq+0x1a0>
 80093c4:	7bbb      	ldrb	r3, [r7, #14]
 80093c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093ca:	4613      	mov	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	3310      	adds	r3, #16
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	4413      	add	r3, r2
 80093d8:	3304      	adds	r3, #4
 80093da:	e00b      	b.n	80093f4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
 80093de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093e2:	4613      	mov	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	4413      	add	r3, r2
 80093f2:	3304      	adds	r3, #4
 80093f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	2200      	movs	r2, #0
 80093fa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2202      	movs	r2, #2
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fbfb 	bl	8009bfe <USBD_CtlSendData>
              break;
 8009408:	e06a      	b.n	80094e0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800940a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800940e:	2b00      	cmp	r3, #0
 8009410:	da11      	bge.n	8009436 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009412:	7bbb      	ldrb	r3, [r7, #14]
 8009414:	f003 020f 	and.w	r2, r3, #15
 8009418:	6879      	ldr	r1, [r7, #4]
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	440b      	add	r3, r1
 8009424:	3318      	adds	r3, #24
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d117      	bne.n	800945c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fb7b 	bl	8009b2a <USBD_CtlError>
                  break;
 8009434:	e054      	b.n	80094e0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009436:	7bbb      	ldrb	r3, [r7, #14]
 8009438:	f003 020f 	and.w	r2, r3, #15
 800943c:	6879      	ldr	r1, [r7, #4]
 800943e:	4613      	mov	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	440b      	add	r3, r1
 8009448:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d104      	bne.n	800945c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fb68 	bl	8009b2a <USBD_CtlError>
                  break;
 800945a:	e041      	b.n	80094e0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800945c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009460:	2b00      	cmp	r3, #0
 8009462:	da0b      	bge.n	800947c <USBD_StdEPReq+0x240>
 8009464:	7bbb      	ldrb	r3, [r7, #14]
 8009466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800946a:	4613      	mov	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	4413      	add	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	3310      	adds	r3, #16
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	4413      	add	r3, r2
 8009478:	3304      	adds	r3, #4
 800947a:	e00b      	b.n	8009494 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800947c:	7bbb      	ldrb	r3, [r7, #14]
 800947e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009482:	4613      	mov	r3, r2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4413      	add	r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	4413      	add	r3, r2
 8009492:	3304      	adds	r3, #4
 8009494:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009496:	7bbb      	ldrb	r3, [r7, #14]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d002      	beq.n	80094a2 <USBD_StdEPReq+0x266>
 800949c:	7bbb      	ldrb	r3, [r7, #14]
 800949e:	2b80      	cmp	r3, #128	; 0x80
 80094a0:	d103      	bne.n	80094aa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	2200      	movs	r2, #0
 80094a6:	601a      	str	r2, [r3, #0]
 80094a8:	e00e      	b.n	80094c8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80094aa:	7bbb      	ldrb	r3, [r7, #14]
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 ffec 	bl	800a48c <USBD_LL_IsStallEP>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d003      	beq.n	80094c2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2201      	movs	r2, #1
 80094be:	601a      	str	r2, [r3, #0]
 80094c0:	e002      	b.n	80094c8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2200      	movs	r2, #0
 80094c6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2202      	movs	r2, #2
 80094cc:	4619      	mov	r1, r3
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fb95 	bl	8009bfe <USBD_CtlSendData>
              break;
 80094d4:	e004      	b.n	80094e0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fb26 	bl	8009b2a <USBD_CtlError>
              break;
 80094de:	bf00      	nop
          }
          break;
 80094e0:	e004      	b.n	80094ec <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fb20 	bl	8009b2a <USBD_CtlError>
          break;
 80094ea:	bf00      	nop
      }
      break;
 80094ec:	e004      	b.n	80094f8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fb1a 	bl	8009b2a <USBD_CtlError>
      break;
 80094f6:	bf00      	nop
  }

  return ret;
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
	...

08009504 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800950e:	2300      	movs	r3, #0
 8009510:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009512:	2300      	movs	r3, #0
 8009514:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009516:	2300      	movs	r3, #0
 8009518:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	885b      	ldrh	r3, [r3, #2]
 800951e:	0a1b      	lsrs	r3, r3, #8
 8009520:	b29b      	uxth	r3, r3
 8009522:	3b01      	subs	r3, #1
 8009524:	2b06      	cmp	r3, #6
 8009526:	f200 8128 	bhi.w	800977a <USBD_GetDescriptor+0x276>
 800952a:	a201      	add	r2, pc, #4	; (adr r2, 8009530 <USBD_GetDescriptor+0x2c>)
 800952c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009530:	0800954d 	.word	0x0800954d
 8009534:	08009565 	.word	0x08009565
 8009538:	080095a5 	.word	0x080095a5
 800953c:	0800977b 	.word	0x0800977b
 8009540:	0800977b 	.word	0x0800977b
 8009544:	0800971b 	.word	0x0800971b
 8009548:	08009747 	.word	0x08009747
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	7c12      	ldrb	r2, [r2, #16]
 8009558:	f107 0108 	add.w	r1, r7, #8
 800955c:	4610      	mov	r0, r2
 800955e:	4798      	blx	r3
 8009560:	60f8      	str	r0, [r7, #12]
      break;
 8009562:	e112      	b.n	800978a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	7c1b      	ldrb	r3, [r3, #16]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10d      	bne.n	8009588 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009574:	f107 0208 	add.w	r2, r7, #8
 8009578:	4610      	mov	r0, r2
 800957a:	4798      	blx	r3
 800957c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	3301      	adds	r3, #1
 8009582:	2202      	movs	r2, #2
 8009584:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009586:	e100      	b.n	800978a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800958e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009590:	f107 0208 	add.w	r2, r7, #8
 8009594:	4610      	mov	r0, r2
 8009596:	4798      	blx	r3
 8009598:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3301      	adds	r3, #1
 800959e:	2202      	movs	r2, #2
 80095a0:	701a      	strb	r2, [r3, #0]
      break;
 80095a2:	e0f2      	b.n	800978a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	885b      	ldrh	r3, [r3, #2]
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b05      	cmp	r3, #5
 80095ac:	f200 80ac 	bhi.w	8009708 <USBD_GetDescriptor+0x204>
 80095b0:	a201      	add	r2, pc, #4	; (adr r2, 80095b8 <USBD_GetDescriptor+0xb4>)
 80095b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b6:	bf00      	nop
 80095b8:	080095d1 	.word	0x080095d1
 80095bc:	08009605 	.word	0x08009605
 80095c0:	08009639 	.word	0x08009639
 80095c4:	0800966d 	.word	0x0800966d
 80095c8:	080096a1 	.word	0x080096a1
 80095cc:	080096d5 	.word	0x080096d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00b      	beq.n	80095f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	7c12      	ldrb	r2, [r2, #16]
 80095e8:	f107 0108 	add.w	r1, r7, #8
 80095ec:	4610      	mov	r0, r2
 80095ee:	4798      	blx	r3
 80095f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095f2:	e091      	b.n	8009718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095f4:	6839      	ldr	r1, [r7, #0]
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fa97 	bl	8009b2a <USBD_CtlError>
            err++;
 80095fc:	7afb      	ldrb	r3, [r7, #11]
 80095fe:	3301      	adds	r3, #1
 8009600:	72fb      	strb	r3, [r7, #11]
          break;
 8009602:	e089      	b.n	8009718 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00b      	beq.n	8009628 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	7c12      	ldrb	r2, [r2, #16]
 800961c:	f107 0108 	add.w	r1, r7, #8
 8009620:	4610      	mov	r0, r2
 8009622:	4798      	blx	r3
 8009624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009626:	e077      	b.n	8009718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fa7d 	bl	8009b2a <USBD_CtlError>
            err++;
 8009630:	7afb      	ldrb	r3, [r7, #11]
 8009632:	3301      	adds	r3, #1
 8009634:	72fb      	strb	r3, [r7, #11]
          break;
 8009636:	e06f      	b.n	8009718 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00b      	beq.n	800965c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	7c12      	ldrb	r2, [r2, #16]
 8009650:	f107 0108 	add.w	r1, r7, #8
 8009654:	4610      	mov	r0, r2
 8009656:	4798      	blx	r3
 8009658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800965a:	e05d      	b.n	8009718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800965c:	6839      	ldr	r1, [r7, #0]
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fa63 	bl	8009b2a <USBD_CtlError>
            err++;
 8009664:	7afb      	ldrb	r3, [r7, #11]
 8009666:	3301      	adds	r3, #1
 8009668:	72fb      	strb	r3, [r7, #11]
          break;
 800966a:	e055      	b.n	8009718 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00b      	beq.n	8009690 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	7c12      	ldrb	r2, [r2, #16]
 8009684:	f107 0108 	add.w	r1, r7, #8
 8009688:	4610      	mov	r0, r2
 800968a:	4798      	blx	r3
 800968c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800968e:	e043      	b.n	8009718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009690:	6839      	ldr	r1, [r7, #0]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 fa49 	bl	8009b2a <USBD_CtlError>
            err++;
 8009698:	7afb      	ldrb	r3, [r7, #11]
 800969a:	3301      	adds	r3, #1
 800969c:	72fb      	strb	r3, [r7, #11]
          break;
 800969e:	e03b      	b.n	8009718 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096a6:	695b      	ldr	r3, [r3, #20]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00b      	beq.n	80096c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096b2:	695b      	ldr	r3, [r3, #20]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	7c12      	ldrb	r2, [r2, #16]
 80096b8:	f107 0108 	add.w	r1, r7, #8
 80096bc:	4610      	mov	r0, r2
 80096be:	4798      	blx	r3
 80096c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096c2:	e029      	b.n	8009718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fa2f 	bl	8009b2a <USBD_CtlError>
            err++;
 80096cc:	7afb      	ldrb	r3, [r7, #11]
 80096ce:	3301      	adds	r3, #1
 80096d0:	72fb      	strb	r3, [r7, #11]
          break;
 80096d2:	e021      	b.n	8009718 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00b      	beq.n	80096f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	7c12      	ldrb	r2, [r2, #16]
 80096ec:	f107 0108 	add.w	r1, r7, #8
 80096f0:	4610      	mov	r0, r2
 80096f2:	4798      	blx	r3
 80096f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096f6:	e00f      	b.n	8009718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096f8:	6839      	ldr	r1, [r7, #0]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fa15 	bl	8009b2a <USBD_CtlError>
            err++;
 8009700:	7afb      	ldrb	r3, [r7, #11]
 8009702:	3301      	adds	r3, #1
 8009704:	72fb      	strb	r3, [r7, #11]
          break;
 8009706:	e007      	b.n	8009718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fa0d 	bl	8009b2a <USBD_CtlError>
          err++;
 8009710:	7afb      	ldrb	r3, [r7, #11]
 8009712:	3301      	adds	r3, #1
 8009714:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009716:	e038      	b.n	800978a <USBD_GetDescriptor+0x286>
 8009718:	e037      	b.n	800978a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	7c1b      	ldrb	r3, [r3, #16]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d109      	bne.n	8009736 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800972a:	f107 0208 	add.w	r2, r7, #8
 800972e:	4610      	mov	r0, r2
 8009730:	4798      	blx	r3
 8009732:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009734:	e029      	b.n	800978a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f9f6 	bl	8009b2a <USBD_CtlError>
        err++;
 800973e:	7afb      	ldrb	r3, [r7, #11]
 8009740:	3301      	adds	r3, #1
 8009742:	72fb      	strb	r3, [r7, #11]
      break;
 8009744:	e021      	b.n	800978a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	7c1b      	ldrb	r3, [r3, #16]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10d      	bne.n	800976a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009756:	f107 0208 	add.w	r2, r7, #8
 800975a:	4610      	mov	r0, r2
 800975c:	4798      	blx	r3
 800975e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	3301      	adds	r3, #1
 8009764:	2207      	movs	r2, #7
 8009766:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009768:	e00f      	b.n	800978a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800976a:	6839      	ldr	r1, [r7, #0]
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 f9dc 	bl	8009b2a <USBD_CtlError>
        err++;
 8009772:	7afb      	ldrb	r3, [r7, #11]
 8009774:	3301      	adds	r3, #1
 8009776:	72fb      	strb	r3, [r7, #11]
      break;
 8009778:	e007      	b.n	800978a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f9d4 	bl	8009b2a <USBD_CtlError>
      err++;
 8009782:	7afb      	ldrb	r3, [r7, #11]
 8009784:	3301      	adds	r3, #1
 8009786:	72fb      	strb	r3, [r7, #11]
      break;
 8009788:	bf00      	nop
  }

  if (err != 0U)
 800978a:	7afb      	ldrb	r3, [r7, #11]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d11c      	bne.n	80097ca <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009790:	893b      	ldrh	r3, [r7, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d011      	beq.n	80097ba <USBD_GetDescriptor+0x2b6>
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	88db      	ldrh	r3, [r3, #6]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00d      	beq.n	80097ba <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	88da      	ldrh	r2, [r3, #6]
 80097a2:	893b      	ldrh	r3, [r7, #8]
 80097a4:	4293      	cmp	r3, r2
 80097a6:	bf28      	it	cs
 80097a8:	4613      	movcs	r3, r2
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80097ae:	893b      	ldrh	r3, [r7, #8]
 80097b0:	461a      	mov	r2, r3
 80097b2:	68f9      	ldr	r1, [r7, #12]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fa22 	bl	8009bfe <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	88db      	ldrh	r3, [r3, #6]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d104      	bne.n	80097cc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fa79 	bl	8009cba <USBD_CtlSendStatus>
 80097c8:	e000      	b.n	80097cc <USBD_GetDescriptor+0x2c8>
    return;
 80097ca:	bf00      	nop
    }
  }
}
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop

080097d4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	889b      	ldrh	r3, [r3, #4]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d130      	bne.n	8009848 <USBD_SetAddress+0x74>
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	88db      	ldrh	r3, [r3, #6]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d12c      	bne.n	8009848 <USBD_SetAddress+0x74>
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	885b      	ldrh	r3, [r3, #2]
 80097f2:	2b7f      	cmp	r3, #127	; 0x7f
 80097f4:	d828      	bhi.n	8009848 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	885b      	ldrh	r3, [r3, #2]
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009800:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009808:	2b03      	cmp	r3, #3
 800980a:	d104      	bne.n	8009816 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f98b 	bl	8009b2a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009814:	e01d      	b.n	8009852 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	7bfa      	ldrb	r2, [r7, #15]
 800981a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800981e:	7bfb      	ldrb	r3, [r7, #15]
 8009820:	4619      	mov	r1, r3
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fe5e 	bl	800a4e4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fa46 	bl	8009cba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800982e:	7bfb      	ldrb	r3, [r7, #15]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d004      	beq.n	800983e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2202      	movs	r2, #2
 8009838:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800983c:	e009      	b.n	8009852 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009846:	e004      	b.n	8009852 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009848:	6839      	ldr	r1, [r7, #0]
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f96d 	bl	8009b2a <USBD_CtlError>
  }
}
 8009850:	bf00      	nop
 8009852:	bf00      	nop
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
	...

0800985c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	885b      	ldrh	r3, [r3, #2]
 800986a:	b2da      	uxtb	r2, r3
 800986c:	4b41      	ldr	r3, [pc, #260]	; (8009974 <USBD_SetConfig+0x118>)
 800986e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009870:	4b40      	ldr	r3, [pc, #256]	; (8009974 <USBD_SetConfig+0x118>)
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d904      	bls.n	8009882 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f955 	bl	8009b2a <USBD_CtlError>
 8009880:	e075      	b.n	800996e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009888:	2b02      	cmp	r3, #2
 800988a:	d002      	beq.n	8009892 <USBD_SetConfig+0x36>
 800988c:	2b03      	cmp	r3, #3
 800988e:	d023      	beq.n	80098d8 <USBD_SetConfig+0x7c>
 8009890:	e062      	b.n	8009958 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009892:	4b38      	ldr	r3, [pc, #224]	; (8009974 <USBD_SetConfig+0x118>)
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d01a      	beq.n	80098d0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800989a:	4b36      	ldr	r3, [pc, #216]	; (8009974 <USBD_SetConfig+0x118>)
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	461a      	mov	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2203      	movs	r2, #3
 80098a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80098ac:	4b31      	ldr	r3, [pc, #196]	; (8009974 <USBD_SetConfig+0x118>)
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	4619      	mov	r1, r3
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f7ff f9e7 	bl	8008c86 <USBD_SetClassConfig>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d104      	bne.n	80098c8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f932 	bl	8009b2a <USBD_CtlError>
            return;
 80098c6:	e052      	b.n	800996e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f9f6 	bl	8009cba <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80098ce:	e04e      	b.n	800996e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 f9f2 	bl	8009cba <USBD_CtlSendStatus>
        break;
 80098d6:	e04a      	b.n	800996e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80098d8:	4b26      	ldr	r3, [pc, #152]	; (8009974 <USBD_SetConfig+0x118>)
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d112      	bne.n	8009906 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2202      	movs	r2, #2
 80098e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80098e8:	4b22      	ldr	r3, [pc, #136]	; (8009974 <USBD_SetConfig+0x118>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	461a      	mov	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80098f2:	4b20      	ldr	r3, [pc, #128]	; (8009974 <USBD_SetConfig+0x118>)
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7ff f9e3 	bl	8008cc4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f9db 	bl	8009cba <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009904:	e033      	b.n	800996e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009906:	4b1b      	ldr	r3, [pc, #108]	; (8009974 <USBD_SetConfig+0x118>)
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	461a      	mov	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	429a      	cmp	r2, r3
 8009912:	d01d      	beq.n	8009950 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	b2db      	uxtb	r3, r3
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f7ff f9d1 	bl	8008cc4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009922:	4b14      	ldr	r3, [pc, #80]	; (8009974 <USBD_SetConfig+0x118>)
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	461a      	mov	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800992c:	4b11      	ldr	r3, [pc, #68]	; (8009974 <USBD_SetConfig+0x118>)
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	4619      	mov	r1, r3
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7ff f9a7 	bl	8008c86 <USBD_SetClassConfig>
 8009938:	4603      	mov	r3, r0
 800993a:	2b02      	cmp	r3, #2
 800993c:	d104      	bne.n	8009948 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 f8f2 	bl	8009b2a <USBD_CtlError>
            return;
 8009946:	e012      	b.n	800996e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 f9b6 	bl	8009cba <USBD_CtlSendStatus>
        break;
 800994e:	e00e      	b.n	800996e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f9b2 	bl	8009cba <USBD_CtlSendStatus>
        break;
 8009956:	e00a      	b.n	800996e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f8e5 	bl	8009b2a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009960:	4b04      	ldr	r3, [pc, #16]	; (8009974 <USBD_SetConfig+0x118>)
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	4619      	mov	r1, r3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7ff f9ac 	bl	8008cc4 <USBD_ClrClassConfig>
        break;
 800996c:	bf00      	nop
    }
  }
}
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	20000568 	.word	0x20000568

08009978 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	88db      	ldrh	r3, [r3, #6]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d004      	beq.n	8009994 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f8cc 	bl	8009b2a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009992:	e022      	b.n	80099da <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800999a:	2b02      	cmp	r3, #2
 800999c:	dc02      	bgt.n	80099a4 <USBD_GetConfig+0x2c>
 800999e:	2b00      	cmp	r3, #0
 80099a0:	dc03      	bgt.n	80099aa <USBD_GetConfig+0x32>
 80099a2:	e015      	b.n	80099d0 <USBD_GetConfig+0x58>
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d00b      	beq.n	80099c0 <USBD_GetConfig+0x48>
 80099a8:	e012      	b.n	80099d0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	3308      	adds	r3, #8
 80099b4:	2201      	movs	r2, #1
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f920 	bl	8009bfe <USBD_CtlSendData>
        break;
 80099be:	e00c      	b.n	80099da <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3304      	adds	r3, #4
 80099c4:	2201      	movs	r2, #1
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f918 	bl	8009bfe <USBD_CtlSendData>
        break;
 80099ce:	e004      	b.n	80099da <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f8a9 	bl	8009b2a <USBD_CtlError>
        break;
 80099d8:	bf00      	nop
}
 80099da:	bf00      	nop
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b082      	sub	sp, #8
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099f2:	3b01      	subs	r3, #1
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d81e      	bhi.n	8009a36 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	88db      	ldrh	r3, [r3, #6]
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d004      	beq.n	8009a0a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009a00:	6839      	ldr	r1, [r7, #0]
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f891 	bl	8009b2a <USBD_CtlError>
        break;
 8009a08:	e01a      	b.n	8009a40 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d005      	beq.n	8009a26 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	f043 0202 	orr.w	r2, r3, #2
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	330c      	adds	r3, #12
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f8e5 	bl	8009bfe <USBD_CtlSendData>
      break;
 8009a34:	e004      	b.n	8009a40 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009a36:	6839      	ldr	r1, [r7, #0]
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 f876 	bl	8009b2a <USBD_CtlError>
      break;
 8009a3e:	bf00      	nop
  }
}
 8009a40:	bf00      	nop
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	885b      	ldrh	r3, [r3, #2]
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d106      	bne.n	8009a68 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f929 	bl	8009cba <USBD_CtlSendStatus>
  }
}
 8009a68:	bf00      	nop
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a80:	3b01      	subs	r3, #1
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	d80b      	bhi.n	8009a9e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	885b      	ldrh	r3, [r3, #2]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d10c      	bne.n	8009aa8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f90f 	bl	8009cba <USBD_CtlSendStatus>
      }
      break;
 8009a9c:	e004      	b.n	8009aa8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f842 	bl	8009b2a <USBD_CtlError>
      break;
 8009aa6:	e000      	b.n	8009aaa <USBD_ClrFeature+0x3a>
      break;
 8009aa8:	bf00      	nop
  }
}
 8009aaa:	bf00      	nop
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ab2:	b480      	push	{r7}
 8009ab4:	b083      	sub	sp, #12
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	781a      	ldrb	r2, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	785a      	ldrb	r2, [r3, #1]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	3302      	adds	r3, #2
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	3303      	adds	r3, #3
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	021b      	lsls	r3, r3, #8
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	4413      	add	r3, r2
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	3304      	adds	r3, #4
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	b29a      	uxth	r2, r3
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	3305      	adds	r3, #5
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	021b      	lsls	r3, r3, #8
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	4413      	add	r3, r2
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	3306      	adds	r3, #6
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	3307      	adds	r3, #7
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	021b      	lsls	r3, r3, #8
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	4413      	add	r3, r2
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	80da      	strh	r2, [r3, #6]

}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bc80      	pop	{r7}
 8009b28:	4770      	bx	lr

08009b2a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b082      	sub	sp, #8
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009b34:	2180      	movs	r1, #128	; 0x80
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fc6a 	bl	800a410 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fc66 	bl	800a410 <USBD_LL_StallEP>
}
 8009b44:	bf00      	nop
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b086      	sub	sp, #24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d032      	beq.n	8009bc8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f000 f834 	bl	8009bd0 <USBD_GetLen>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	005b      	lsls	r3, r3, #1
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009b76:	7dfb      	ldrb	r3, [r7, #23]
 8009b78:	1c5a      	adds	r2, r3, #1
 8009b7a:	75fa      	strb	r2, [r7, #23]
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	4413      	add	r3, r2
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	7812      	ldrb	r2, [r2, #0]
 8009b86:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009b88:	7dfb      	ldrb	r3, [r7, #23]
 8009b8a:	1c5a      	adds	r2, r3, #1
 8009b8c:	75fa      	strb	r2, [r7, #23]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	4413      	add	r3, r2
 8009b94:	2203      	movs	r2, #3
 8009b96:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009b98:	e012      	b.n	8009bc0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	1c5a      	adds	r2, r3, #1
 8009b9e:	60fa      	str	r2, [r7, #12]
 8009ba0:	7dfa      	ldrb	r2, [r7, #23]
 8009ba2:	1c51      	adds	r1, r2, #1
 8009ba4:	75f9      	strb	r1, [r7, #23]
 8009ba6:	4611      	mov	r1, r2
 8009ba8:	68ba      	ldr	r2, [r7, #8]
 8009baa:	440a      	add	r2, r1
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009bb0:	7dfb      	ldrb	r3, [r7, #23]
 8009bb2:	1c5a      	adds	r2, r3, #1
 8009bb4:	75fa      	strb	r2, [r7, #23]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	4413      	add	r3, r2
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1e8      	bne.n	8009b9a <USBD_GetString+0x4e>
    }
  }
}
 8009bc8:	bf00      	nop
 8009bca:	3718      	adds	r7, #24
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009bdc:	e005      	b.n	8009bea <USBD_GetLen+0x1a>
  {
    len++;
 8009bde:	7bfb      	ldrb	r3, [r7, #15]
 8009be0:	3301      	adds	r3, #1
 8009be2:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	3301      	adds	r3, #1
 8009be8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1f5      	bne.n	8009bde <USBD_GetLen+0xe>
  }

  return len;
 8009bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bc80      	pop	{r7}
 8009bfc:	4770      	bx	lr

08009bfe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	60f8      	str	r0, [r7, #12]
 8009c06:	60b9      	str	r1, [r7, #8]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c14:	88fa      	ldrh	r2, [r7, #6]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009c1a:	88fa      	ldrh	r2, [r7, #6]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c20:	88fb      	ldrh	r3, [r7, #6]
 8009c22:	68ba      	ldr	r2, [r7, #8]
 8009c24:	2100      	movs	r1, #0
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f000 fc7b 	bl	800a522 <USBD_LL_Transmit>

  return USBD_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b084      	sub	sp, #16
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	60f8      	str	r0, [r7, #12]
 8009c3e:	60b9      	str	r1, [r7, #8]
 8009c40:	4613      	mov	r3, r2
 8009c42:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c44:	88fb      	ldrh	r3, [r7, #6]
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	2100      	movs	r1, #0
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f000 fc69 	bl	800a522 <USBD_LL_Transmit>

  return USBD_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	4613      	mov	r3, r2
 8009c66:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2203      	movs	r2, #3
 8009c6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009c70:	88fa      	ldrh	r2, [r7, #6]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009c78:	88fa      	ldrh	r2, [r7, #6]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c80:	88fb      	ldrh	r3, [r7, #6]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	2100      	movs	r1, #0
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f000 fc6e 	bl	800a568 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b084      	sub	sp, #16
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	60f8      	str	r0, [r7, #12]
 8009c9e:	60b9      	str	r1, [r7, #8]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ca4:	88fb      	ldrh	r3, [r7, #6]
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	2100      	movs	r1, #0
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f000 fc5c 	bl	800a568 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b082      	sub	sp, #8
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2204      	movs	r2, #4
 8009cc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009cca:	2300      	movs	r3, #0
 8009ccc:	2200      	movs	r2, #0
 8009cce:	2100      	movs	r1, #0
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 fc26 	bl	800a522 <USBD_LL_Transmit>

  return USBD_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3708      	adds	r7, #8
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2205      	movs	r2, #5
 8009cec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fc36 	bl	800a568 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
	...

08009d08 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	4912      	ldr	r1, [pc, #72]	; (8009d58 <MX_USB_DEVICE_Init+0x50>)
 8009d10:	4812      	ldr	r0, [pc, #72]	; (8009d5c <MX_USB_DEVICE_Init+0x54>)
 8009d12:	f7fe ff5e 	bl	8008bd2 <USBD_Init>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d001      	beq.n	8009d20 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d1c:	f7f8 f81a 	bl	8001d54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009d20:	490f      	ldr	r1, [pc, #60]	; (8009d60 <MX_USB_DEVICE_Init+0x58>)
 8009d22:	480e      	ldr	r0, [pc, #56]	; (8009d5c <MX_USB_DEVICE_Init+0x54>)
 8009d24:	f7fe ff80 	bl	8008c28 <USBD_RegisterClass>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d001      	beq.n	8009d32 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d2e:	f7f8 f811 	bl	8001d54 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009d32:	490c      	ldr	r1, [pc, #48]	; (8009d64 <MX_USB_DEVICE_Init+0x5c>)
 8009d34:	4809      	ldr	r0, [pc, #36]	; (8009d5c <MX_USB_DEVICE_Init+0x54>)
 8009d36:	f7fe feb1 	bl	8008a9c <USBD_CDC_RegisterInterface>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009d40:	f7f8 f808 	bl	8001d54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d44:	4805      	ldr	r0, [pc, #20]	; (8009d5c <MX_USB_DEVICE_Init+0x54>)
 8009d46:	f7fe ff88 	bl	8008c5a <USBD_Start>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d001      	beq.n	8009d54 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009d50:	f7f8 f800 	bl	8001d54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009d54:	bf00      	nop
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	2000012c 	.word	0x2000012c
 8009d5c:	2000056c 	.word	0x2000056c
 8009d60:	20000018 	.word	0x20000018
 8009d64:	2000011c 	.word	0x2000011c

08009d68 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	4905      	ldr	r1, [pc, #20]	; (8009d84 <CDC_Init_FS+0x1c>)
 8009d70:	4805      	ldr	r0, [pc, #20]	; (8009d88 <CDC_Init_FS+0x20>)
 8009d72:	f7fe fea9 	bl	8008ac8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009d76:	4905      	ldr	r1, [pc, #20]	; (8009d8c <CDC_Init_FS+0x24>)
 8009d78:	4803      	ldr	r0, [pc, #12]	; (8009d88 <CDC_Init_FS+0x20>)
 8009d7a:	f7fe febe 	bl	8008afa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009d7e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	20000c1c 	.word	0x20000c1c
 8009d88:	2000056c 	.word	0x2000056c
 8009d8c:	20000834 	.word	0x20000834

08009d90 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009d90:	b480      	push	{r7}
 8009d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009d94:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bc80      	pop	{r7}
 8009d9c:	4770      	bx	lr
	...

08009da0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	4603      	mov	r3, r0
 8009da8:	6039      	str	r1, [r7, #0]
 8009daa:	71fb      	strb	r3, [r7, #7]
 8009dac:	4613      	mov	r3, r2
 8009dae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009db0:	79fb      	ldrb	r3, [r7, #7]
 8009db2:	2b23      	cmp	r3, #35	; 0x23
 8009db4:	d854      	bhi.n	8009e60 <CDC_Control_FS+0xc0>
 8009db6:	a201      	add	r2, pc, #4	; (adr r2, 8009dbc <CDC_Control_FS+0x1c>)
 8009db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbc:	08009e61 	.word	0x08009e61
 8009dc0:	08009e61 	.word	0x08009e61
 8009dc4:	08009e61 	.word	0x08009e61
 8009dc8:	08009e61 	.word	0x08009e61
 8009dcc:	08009e61 	.word	0x08009e61
 8009dd0:	08009e61 	.word	0x08009e61
 8009dd4:	08009e61 	.word	0x08009e61
 8009dd8:	08009e61 	.word	0x08009e61
 8009ddc:	08009e61 	.word	0x08009e61
 8009de0:	08009e61 	.word	0x08009e61
 8009de4:	08009e61 	.word	0x08009e61
 8009de8:	08009e61 	.word	0x08009e61
 8009dec:	08009e61 	.word	0x08009e61
 8009df0:	08009e61 	.word	0x08009e61
 8009df4:	08009e61 	.word	0x08009e61
 8009df8:	08009e61 	.word	0x08009e61
 8009dfc:	08009e61 	.word	0x08009e61
 8009e00:	08009e61 	.word	0x08009e61
 8009e04:	08009e61 	.word	0x08009e61
 8009e08:	08009e61 	.word	0x08009e61
 8009e0c:	08009e61 	.word	0x08009e61
 8009e10:	08009e61 	.word	0x08009e61
 8009e14:	08009e61 	.word	0x08009e61
 8009e18:	08009e61 	.word	0x08009e61
 8009e1c:	08009e61 	.word	0x08009e61
 8009e20:	08009e61 	.word	0x08009e61
 8009e24:	08009e61 	.word	0x08009e61
 8009e28:	08009e61 	.word	0x08009e61
 8009e2c:	08009e61 	.word	0x08009e61
 8009e30:	08009e61 	.word	0x08009e61
 8009e34:	08009e61 	.word	0x08009e61
 8009e38:	08009e61 	.word	0x08009e61
 8009e3c:	08009e4d 	.word	0x08009e4d
 8009e40:	08009e57 	.word	0x08009e57
 8009e44:	08009e61 	.word	0x08009e61
 8009e48:	08009e61 	.word	0x08009e61
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	Buffer[0] = pbuf[0];
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	781a      	ldrb	r2, [r3, #0]
 8009e50:	4b07      	ldr	r3, [pc, #28]	; (8009e70 <CDC_Control_FS+0xd0>)
 8009e52:	701a      	strb	r2, [r3, #0]

    break;
 8009e54:	e005      	b.n	8009e62 <CDC_Control_FS+0xc2>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = Buffer[0];
 8009e56:	4b06      	ldr	r3, [pc, #24]	; (8009e70 <CDC_Control_FS+0xd0>)
 8009e58:	781a      	ldrb	r2, [r3, #0]
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	701a      	strb	r2, [r3, #0]

    break;
 8009e5e:	e000      	b.n	8009e62 <CDC_Control_FS+0xc2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009e60:	bf00      	nop
  }

  return (USBD_OK);
 8009e62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bc80      	pop	{r7}
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	20000830 	.word	0x20000830

08009e74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009e7e:	6879      	ldr	r1, [r7, #4]
 8009e80:	4808      	ldr	r0, [pc, #32]	; (8009ea4 <CDC_Receive_FS+0x30>)
 8009e82:	f7fe fe3a 	bl	8008afa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009e86:	4807      	ldr	r0, [pc, #28]	; (8009ea4 <CDC_Receive_FS+0x30>)
 8009e88:	f7fe fe79 	bl	8008b7e <USBD_CDC_ReceivePacket>

  command_code = Buf[0];
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	781a      	ldrb	r2, [r3, #0]
 8009e90:	4b05      	ldr	r3, [pc, #20]	; (8009ea8 <CDC_Receive_FS+0x34>)
 8009e92:	701a      	strb	r2, [r3, #0]
  flag_receive = 1;
 8009e94:	4b05      	ldr	r3, [pc, #20]	; (8009eac <CDC_Receive_FS+0x38>)
 8009e96:	2201      	movs	r2, #1
 8009e98:	701a      	strb	r2, [r3, #0]


  return (USBD_OK);
 8009e9a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	2000056c 	.word	0x2000056c
 8009ea8:	2000049d 	.word	0x2000049d
 8009eac:	2000049c 	.word	0x2000049c

08009eb0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009ec0:	4b0d      	ldr	r3, [pc, #52]	; (8009ef8 <CDC_Transmit_FS+0x48>)
 8009ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ec6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d001      	beq.n	8009ed6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e00b      	b.n	8009eee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009ed6:	887b      	ldrh	r3, [r7, #2]
 8009ed8:	461a      	mov	r2, r3
 8009eda:	6879      	ldr	r1, [r7, #4]
 8009edc:	4806      	ldr	r0, [pc, #24]	; (8009ef8 <CDC_Transmit_FS+0x48>)
 8009ede:	f7fe fdf3 	bl	8008ac8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009ee2:	4805      	ldr	r0, [pc, #20]	; (8009ef8 <CDC_Transmit_FS+0x48>)
 8009ee4:	f7fe fe1c 	bl	8008b20 <USBD_CDC_TransmitPacket>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	2000056c 	.word	0x2000056c

08009efc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	4603      	mov	r3, r0
 8009f04:	6039      	str	r1, [r7, #0]
 8009f06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	2212      	movs	r2, #18
 8009f0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009f0e:	4b03      	ldr	r3, [pc, #12]	; (8009f1c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bc80      	pop	{r7}
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	20000148 	.word	0x20000148

08009f20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	4603      	mov	r3, r0
 8009f28:	6039      	str	r1, [r7, #0]
 8009f2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	2204      	movs	r2, #4
 8009f30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009f32:	4b03      	ldr	r3, [pc, #12]	; (8009f40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bc80      	pop	{r7}
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	2000015c 	.word	0x2000015c

08009f44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	6039      	str	r1, [r7, #0]
 8009f4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f50:	79fb      	ldrb	r3, [r7, #7]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d105      	bne.n	8009f62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	4907      	ldr	r1, [pc, #28]	; (8009f78 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f5a:	4808      	ldr	r0, [pc, #32]	; (8009f7c <USBD_FS_ProductStrDescriptor+0x38>)
 8009f5c:	f7ff fdf6 	bl	8009b4c <USBD_GetString>
 8009f60:	e004      	b.n	8009f6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f62:	683a      	ldr	r2, [r7, #0]
 8009f64:	4904      	ldr	r1, [pc, #16]	; (8009f78 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f66:	4805      	ldr	r0, [pc, #20]	; (8009f7c <USBD_FS_ProductStrDescriptor+0x38>)
 8009f68:	f7ff fdf0 	bl	8009b4c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f6c:	4b02      	ldr	r3, [pc, #8]	; (8009f78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	20001004 	.word	0x20001004
 8009f7c:	0800d52c 	.word	0x0800d52c

08009f80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	4603      	mov	r3, r0
 8009f88:	6039      	str	r1, [r7, #0]
 8009f8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	4904      	ldr	r1, [pc, #16]	; (8009fa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009f90:	4804      	ldr	r0, [pc, #16]	; (8009fa4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009f92:	f7ff fddb 	bl	8009b4c <USBD_GetString>
  return USBD_StrDesc;
 8009f96:	4b02      	ldr	r3, [pc, #8]	; (8009fa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	20001004 	.word	0x20001004
 8009fa4:	0800d544 	.word	0x0800d544

08009fa8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	4603      	mov	r3, r0
 8009fb0:	6039      	str	r1, [r7, #0]
 8009fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	221a      	movs	r2, #26
 8009fb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009fba:	f000 f843 	bl	800a044 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009fbe:	4b02      	ldr	r3, [pc, #8]	; (8009fc8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	20000160 	.word	0x20000160

08009fcc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	6039      	str	r1, [r7, #0]
 8009fd6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009fd8:	79fb      	ldrb	r3, [r7, #7]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d105      	bne.n	8009fea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	4907      	ldr	r1, [pc, #28]	; (800a000 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009fe2:	4808      	ldr	r0, [pc, #32]	; (800a004 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009fe4:	f7ff fdb2 	bl	8009b4c <USBD_GetString>
 8009fe8:	e004      	b.n	8009ff4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009fea:	683a      	ldr	r2, [r7, #0]
 8009fec:	4904      	ldr	r1, [pc, #16]	; (800a000 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009fee:	4805      	ldr	r0, [pc, #20]	; (800a004 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ff0:	f7ff fdac 	bl	8009b4c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ff4:	4b02      	ldr	r3, [pc, #8]	; (800a000 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	20001004 	.word	0x20001004
 800a004:	0800d558 	.word	0x0800d558

0800a008 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	4603      	mov	r3, r0
 800a010:	6039      	str	r1, [r7, #0]
 800a012:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a014:	79fb      	ldrb	r3, [r7, #7]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d105      	bne.n	800a026 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a01a:	683a      	ldr	r2, [r7, #0]
 800a01c:	4907      	ldr	r1, [pc, #28]	; (800a03c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a01e:	4808      	ldr	r0, [pc, #32]	; (800a040 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a020:	f7ff fd94 	bl	8009b4c <USBD_GetString>
 800a024:	e004      	b.n	800a030 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a026:	683a      	ldr	r2, [r7, #0]
 800a028:	4904      	ldr	r1, [pc, #16]	; (800a03c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a02a:	4805      	ldr	r0, [pc, #20]	; (800a040 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a02c:	f7ff fd8e 	bl	8009b4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a030:	4b02      	ldr	r3, [pc, #8]	; (800a03c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a032:	4618      	mov	r0, r3
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	20001004 	.word	0x20001004
 800a040:	0800d564 	.word	0x0800d564

0800a044 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a04a:	4b0f      	ldr	r3, [pc, #60]	; (800a088 <Get_SerialNum+0x44>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a050:	4b0e      	ldr	r3, [pc, #56]	; (800a08c <Get_SerialNum+0x48>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a056:	4b0e      	ldr	r3, [pc, #56]	; (800a090 <Get_SerialNum+0x4c>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4413      	add	r3, r2
 800a062:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d009      	beq.n	800a07e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a06a:	2208      	movs	r2, #8
 800a06c:	4909      	ldr	r1, [pc, #36]	; (800a094 <Get_SerialNum+0x50>)
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f000 f814 	bl	800a09c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a074:	2204      	movs	r2, #4
 800a076:	4908      	ldr	r1, [pc, #32]	; (800a098 <Get_SerialNum+0x54>)
 800a078:	68b8      	ldr	r0, [r7, #8]
 800a07a:	f000 f80f 	bl	800a09c <IntToUnicode>
  }
}
 800a07e:	bf00      	nop
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	1ffff7e8 	.word	0x1ffff7e8
 800a08c:	1ffff7ec 	.word	0x1ffff7ec
 800a090:	1ffff7f0 	.word	0x1ffff7f0
 800a094:	20000162 	.word	0x20000162
 800a098:	20000172 	.word	0x20000172

0800a09c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b087      	sub	sp, #28
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	75fb      	strb	r3, [r7, #23]
 800a0b2:	e027      	b.n	800a104 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	0f1b      	lsrs	r3, r3, #28
 800a0b8:	2b09      	cmp	r3, #9
 800a0ba:	d80b      	bhi.n	800a0d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	0f1b      	lsrs	r3, r3, #28
 800a0c0:	b2da      	uxtb	r2, r3
 800a0c2:	7dfb      	ldrb	r3, [r7, #23]
 800a0c4:	005b      	lsls	r3, r3, #1
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	440b      	add	r3, r1
 800a0cc:	3230      	adds	r2, #48	; 0x30
 800a0ce:	b2d2      	uxtb	r2, r2
 800a0d0:	701a      	strb	r2, [r3, #0]
 800a0d2:	e00a      	b.n	800a0ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	0f1b      	lsrs	r3, r3, #28
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	7dfb      	ldrb	r3, [r7, #23]
 800a0dc:	005b      	lsls	r3, r3, #1
 800a0de:	4619      	mov	r1, r3
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	440b      	add	r3, r1
 800a0e4:	3237      	adds	r2, #55	; 0x37
 800a0e6:	b2d2      	uxtb	r2, r2
 800a0e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	011b      	lsls	r3, r3, #4
 800a0ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a0f0:	7dfb      	ldrb	r3, [r7, #23]
 800a0f2:	005b      	lsls	r3, r3, #1
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a0fe:	7dfb      	ldrb	r3, [r7, #23]
 800a100:	3301      	adds	r3, #1
 800a102:	75fb      	strb	r3, [r7, #23]
 800a104:	7dfa      	ldrb	r2, [r7, #23]
 800a106:	79fb      	ldrb	r3, [r7, #7]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d3d3      	bcc.n	800a0b4 <IntToUnicode+0x18>
  }
}
 800a10c:	bf00      	nop
 800a10e:	bf00      	nop
 800a110:	371c      	adds	r7, #28
 800a112:	46bd      	mov	sp, r7
 800a114:	bc80      	pop	{r7}
 800a116:	4770      	bx	lr

0800a118 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a0d      	ldr	r2, [pc, #52]	; (800a15c <HAL_PCD_MspInit+0x44>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d113      	bne.n	800a152 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a12a:	4b0d      	ldr	r3, [pc, #52]	; (800a160 <HAL_PCD_MspInit+0x48>)
 800a12c:	69db      	ldr	r3, [r3, #28]
 800a12e:	4a0c      	ldr	r2, [pc, #48]	; (800a160 <HAL_PCD_MspInit+0x48>)
 800a130:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a134:	61d3      	str	r3, [r2, #28]
 800a136:	4b0a      	ldr	r3, [pc, #40]	; (800a160 <HAL_PCD_MspInit+0x48>)
 800a138:	69db      	ldr	r3, [r3, #28]
 800a13a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a13e:	60fb      	str	r3, [r7, #12]
 800a140:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a142:	2200      	movs	r2, #0
 800a144:	2100      	movs	r1, #0
 800a146:	2014      	movs	r0, #20
 800a148:	f7f8 fcf7 	bl	8002b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a14c:	2014      	movs	r0, #20
 800a14e:	f7f8 fd10 	bl	8002b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a152:	bf00      	nop
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	40005c00 	.word	0x40005c00
 800a160:	40021000 	.word	0x40021000

0800a164 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a178:	4619      	mov	r1, r3
 800a17a:	4610      	mov	r0, r2
 800a17c:	f7fe fdb5 	bl	8008cea <USBD_LL_SetupStage>
}
 800a180:	bf00      	nop
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	460b      	mov	r3, r1
 800a192:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a19a:	78fa      	ldrb	r2, [r7, #3]
 800a19c:	6879      	ldr	r1, [r7, #4]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	00db      	lsls	r3, r3, #3
 800a1a6:	440b      	add	r3, r1
 800a1a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	78fb      	ldrb	r3, [r7, #3]
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	f7fe fde7 	bl	8008d84 <USBD_LL_DataOutStage>
}
 800a1b6:	bf00      	nop
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b082      	sub	sp, #8
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a1d0:	78fa      	ldrb	r2, [r7, #3]
 800a1d2:	6879      	ldr	r1, [r7, #4]
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	4413      	add	r3, r2
 800a1da:	00db      	lsls	r3, r3, #3
 800a1dc:	440b      	add	r3, r1
 800a1de:	333c      	adds	r3, #60	; 0x3c
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	78fb      	ldrb	r3, [r7, #3]
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	f7fe fe3e 	bl	8008e66 <USBD_LL_DataInStage>
}
 800a1ea:	bf00      	nop
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b082      	sub	sp, #8
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a200:	4618      	mov	r0, r3
 800a202:	f7fe ff4e 	bl	80090a2 <USBD_LL_SOF>
}
 800a206:	bf00      	nop
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b084      	sub	sp, #16
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a216:	2301      	movs	r3, #1
 800a218:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d001      	beq.n	800a226 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a222:	f7f7 fd97 	bl	8001d54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a22c:	7bfa      	ldrb	r2, [r7, #15]
 800a22e:	4611      	mov	r1, r2
 800a230:	4618      	mov	r0, r3
 800a232:	f7fe fefe 	bl	8009032 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fe feb7 	bl	8008fb0 <USBD_LL_Reset>
}
 800a242:	bf00      	nop
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
	...

0800a24c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fe fef8 	bl	8009050 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	699b      	ldr	r3, [r3, #24]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d005      	beq.n	800a274 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a268:	4b04      	ldr	r3, [pc, #16]	; (800a27c <HAL_PCD_SuspendCallback+0x30>)
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	4a03      	ldr	r2, [pc, #12]	; (800a27c <HAL_PCD_SuspendCallback+0x30>)
 800a26e:	f043 0306 	orr.w	r3, r3, #6
 800a272:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a274:	bf00      	nop
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	e000ed00 	.word	0xe000ed00

0800a280 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fe fef2 	bl	8009078 <USBD_LL_Resume>
}
 800a294:	bf00      	nop
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a2a4:	4a28      	ldr	r2, [pc, #160]	; (800a348 <USBD_LL_Init+0xac>)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a26      	ldr	r2, [pc, #152]	; (800a348 <USBD_LL_Init+0xac>)
 800a2b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a2b4:	4b24      	ldr	r3, [pc, #144]	; (800a348 <USBD_LL_Init+0xac>)
 800a2b6:	4a25      	ldr	r2, [pc, #148]	; (800a34c <USBD_LL_Init+0xb0>)
 800a2b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a2ba:	4b23      	ldr	r3, [pc, #140]	; (800a348 <USBD_LL_Init+0xac>)
 800a2bc:	2208      	movs	r2, #8
 800a2be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a2c0:	4b21      	ldr	r3, [pc, #132]	; (800a348 <USBD_LL_Init+0xac>)
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a2c6:	4b20      	ldr	r3, [pc, #128]	; (800a348 <USBD_LL_Init+0xac>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a2cc:	4b1e      	ldr	r3, [pc, #120]	; (800a348 <USBD_LL_Init+0xac>)
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a2d2:	4b1d      	ldr	r3, [pc, #116]	; (800a348 <USBD_LL_Init+0xac>)
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a2d8:	481b      	ldr	r0, [pc, #108]	; (800a348 <USBD_LL_Init+0xac>)
 800a2da:	f7f9 f808 	bl	80032ee <HAL_PCD_Init>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d001      	beq.n	800a2e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a2e4:	f7f7 fd36 	bl	8001d54 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a2ee:	2318      	movs	r3, #24
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	f7fa fd27 	bl	8004d46 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a2fe:	2358      	movs	r3, #88	; 0x58
 800a300:	2200      	movs	r2, #0
 800a302:	2180      	movs	r1, #128	; 0x80
 800a304:	f7fa fd1f 	bl	8004d46 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a30e:	23c0      	movs	r3, #192	; 0xc0
 800a310:	2200      	movs	r2, #0
 800a312:	2181      	movs	r1, #129	; 0x81
 800a314:	f7fa fd17 	bl	8004d46 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a31e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a322:	2200      	movs	r2, #0
 800a324:	2101      	movs	r1, #1
 800a326:	f7fa fd0e 	bl	8004d46 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a330:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a334:	2200      	movs	r2, #0
 800a336:	2182      	movs	r1, #130	; 0x82
 800a338:	f7fa fd05 	bl	8004d46 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	20001204 	.word	0x20001204
 800a34c:	40005c00 	.word	0x40005c00

0800a350 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a366:	4618      	mov	r0, r3
 800a368:	f7f9 f8c0 	bl	80034ec <HAL_PCD_Start>
 800a36c:	4603      	mov	r3, r0
 800a36e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a370:	7bfb      	ldrb	r3, [r7, #15]
 800a372:	4618      	mov	r0, r3
 800a374:	f000 f94e 	bl	800a614 <USBD_Get_USB_Status>
 800a378:	4603      	mov	r3, r0
 800a37a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a37c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b084      	sub	sp, #16
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	4608      	mov	r0, r1
 800a390:	4611      	mov	r1, r2
 800a392:	461a      	mov	r2, r3
 800a394:	4603      	mov	r3, r0
 800a396:	70fb      	strb	r3, [r7, #3]
 800a398:	460b      	mov	r3, r1
 800a39a:	70bb      	strb	r3, [r7, #2]
 800a39c:	4613      	mov	r3, r2
 800a39e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a3ae:	78bb      	ldrb	r3, [r7, #2]
 800a3b0:	883a      	ldrh	r2, [r7, #0]
 800a3b2:	78f9      	ldrb	r1, [r7, #3]
 800a3b4:	f7f9 fa15 	bl	80037e2 <HAL_PCD_EP_Open>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 f928 	bl	800a614 <USBD_Get_USB_Status>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b084      	sub	sp, #16
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	460b      	mov	r3, r1
 800a3dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3ec:	78fa      	ldrb	r2, [r7, #3]
 800a3ee:	4611      	mov	r1, r2
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7f9 fa53 	bl	800389c <HAL_PCD_EP_Close>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f000 f909 	bl	800a614 <USBD_Get_USB_Status>
 800a402:	4603      	mov	r3, r0
 800a404:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a406:	7bbb      	ldrb	r3, [r7, #14]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3710      	adds	r7, #16
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a41c:	2300      	movs	r3, #0
 800a41e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a420:	2300      	movs	r3, #0
 800a422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a42a:	78fa      	ldrb	r2, [r7, #3]
 800a42c:	4611      	mov	r1, r2
 800a42e:	4618      	mov	r0, r3
 800a430:	f7f9 fafb 	bl	8003a2a <HAL_PCD_EP_SetStall>
 800a434:	4603      	mov	r3, r0
 800a436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a438:	7bfb      	ldrb	r3, [r7, #15]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f000 f8ea 	bl	800a614 <USBD_Get_USB_Status>
 800a440:	4603      	mov	r3, r0
 800a442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a444:	7bbb      	ldrb	r3, [r7, #14]
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b084      	sub	sp, #16
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	460b      	mov	r3, r1
 800a458:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a45e:	2300      	movs	r3, #0
 800a460:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a468:	78fa      	ldrb	r2, [r7, #3]
 800a46a:	4611      	mov	r1, r2
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7f9 fb3c 	bl	8003aea <HAL_PCD_EP_ClrStall>
 800a472:	4603      	mov	r3, r0
 800a474:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a476:	7bfb      	ldrb	r3, [r7, #15]
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 f8cb 	bl	800a614 <USBD_Get_USB_Status>
 800a47e:	4603      	mov	r3, r0
 800a480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a482:	7bbb      	ldrb	r3, [r7, #14]
}
 800a484:	4618      	mov	r0, r3
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	460b      	mov	r3, r1
 800a496:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a49e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a4a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	da0c      	bge.n	800a4c2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a4a8:	78fb      	ldrb	r3, [r7, #3]
 800a4aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4ae:	68f9      	ldr	r1, [r7, #12]
 800a4b0:	1c5a      	adds	r2, r3, #1
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	4413      	add	r3, r2
 800a4b8:	00db      	lsls	r3, r3, #3
 800a4ba:	440b      	add	r3, r1
 800a4bc:	3302      	adds	r3, #2
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	e00b      	b.n	800a4da <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a4c2:	78fb      	ldrb	r3, [r7, #3]
 800a4c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4c8:	68f9      	ldr	r1, [r7, #12]
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	4413      	add	r3, r2
 800a4d0:	00db      	lsls	r3, r3, #3
 800a4d2:	440b      	add	r3, r1
 800a4d4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a4d8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3714      	adds	r7, #20
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bc80      	pop	{r7}
 800a4e2:	4770      	bx	lr

0800a4e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4fe:	78fa      	ldrb	r2, [r7, #3]
 800a500:	4611      	mov	r1, r2
 800a502:	4618      	mov	r0, r3
 800a504:	f7f9 f948 	bl	8003798 <HAL_PCD_SetAddress>
 800a508:	4603      	mov	r3, r0
 800a50a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a50c:	7bfb      	ldrb	r3, [r7, #15]
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 f880 	bl	800a614 <USBD_Get_USB_Status>
 800a514:	4603      	mov	r3, r0
 800a516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a518:	7bbb      	ldrb	r3, [r7, #14]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b086      	sub	sp, #24
 800a526:	af00      	add	r7, sp, #0
 800a528:	60f8      	str	r0, [r7, #12]
 800a52a:	607a      	str	r2, [r7, #4]
 800a52c:	461a      	mov	r2, r3
 800a52e:	460b      	mov	r3, r1
 800a530:	72fb      	strb	r3, [r7, #11]
 800a532:	4613      	mov	r3, r2
 800a534:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a536:	2300      	movs	r3, #0
 800a538:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a53a:	2300      	movs	r3, #0
 800a53c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a544:	893b      	ldrh	r3, [r7, #8]
 800a546:	7af9      	ldrb	r1, [r7, #11]
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	f7f9 fa37 	bl	80039bc <HAL_PCD_EP_Transmit>
 800a54e:	4603      	mov	r3, r0
 800a550:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a552:	7dfb      	ldrb	r3, [r7, #23]
 800a554:	4618      	mov	r0, r3
 800a556:	f000 f85d 	bl	800a614 <USBD_Get_USB_Status>
 800a55a:	4603      	mov	r3, r0
 800a55c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a55e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a560:	4618      	mov	r0, r3
 800a562:	3718      	adds	r7, #24
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b086      	sub	sp, #24
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	607a      	str	r2, [r7, #4]
 800a572:	461a      	mov	r2, r3
 800a574:	460b      	mov	r3, r1
 800a576:	72fb      	strb	r3, [r7, #11]
 800a578:	4613      	mov	r3, r2
 800a57a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a580:	2300      	movs	r3, #0
 800a582:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a58a:	893b      	ldrh	r3, [r7, #8]
 800a58c:	7af9      	ldrb	r1, [r7, #11]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	f7f9 f9cc 	bl	800392c <HAL_PCD_EP_Receive>
 800a594:	4603      	mov	r3, r0
 800a596:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a598:	7dfb      	ldrb	r3, [r7, #23]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 f83a 	bl	800a614 <USBD_Get_USB_Status>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a5a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3718      	adds	r7, #24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5c0:	78fa      	ldrb	r2, [r7, #3]
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7f9 f9e2 	bl	800398e <HAL_PCD_EP_GetRxCount>
 800a5ca:	4603      	mov	r3, r0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a5dc:	4b02      	ldr	r3, [pc, #8]	; (800a5e8 <USBD_static_malloc+0x14>)
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bc80      	pop	{r7}
 800a5e6:	4770      	bx	lr
 800a5e8:	200014f4 	.word	0x200014f4

0800a5ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]

}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bc80      	pop	{r7}
 800a5fc:	4770      	bx	lr

0800a5fe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5fe:	b480      	push	{r7}
 800a600:	b083      	sub	sp, #12
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	460b      	mov	r3, r1
 800a608:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a60a:	bf00      	nop
 800a60c:	370c      	adds	r7, #12
 800a60e:	46bd      	mov	sp, r7
 800a610:	bc80      	pop	{r7}
 800a612:	4770      	bx	lr

0800a614 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	4603      	mov	r3, r0
 800a61c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a61e:	2300      	movs	r3, #0
 800a620:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a622:	79fb      	ldrb	r3, [r7, #7]
 800a624:	2b03      	cmp	r3, #3
 800a626:	d817      	bhi.n	800a658 <USBD_Get_USB_Status+0x44>
 800a628:	a201      	add	r2, pc, #4	; (adr r2, 800a630 <USBD_Get_USB_Status+0x1c>)
 800a62a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a62e:	bf00      	nop
 800a630:	0800a641 	.word	0x0800a641
 800a634:	0800a647 	.word	0x0800a647
 800a638:	0800a64d 	.word	0x0800a64d
 800a63c:	0800a653 	.word	0x0800a653
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a640:	2300      	movs	r3, #0
 800a642:	73fb      	strb	r3, [r7, #15]
    break;
 800a644:	e00b      	b.n	800a65e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a646:	2302      	movs	r3, #2
 800a648:	73fb      	strb	r3, [r7, #15]
    break;
 800a64a:	e008      	b.n	800a65e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a64c:	2301      	movs	r3, #1
 800a64e:	73fb      	strb	r3, [r7, #15]
    break;
 800a650:	e005      	b.n	800a65e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a652:	2302      	movs	r3, #2
 800a654:	73fb      	strb	r3, [r7, #15]
    break;
 800a656:	e002      	b.n	800a65e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a658:	2302      	movs	r3, #2
 800a65a:	73fb      	strb	r3, [r7, #15]
    break;
 800a65c:	bf00      	nop
  }
  return usb_status;
 800a65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a660:	4618      	mov	r0, r3
 800a662:	3714      	adds	r7, #20
 800a664:	46bd      	mov	sp, r7
 800a666:	bc80      	pop	{r7}
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop

0800a66c <__errno>:
 800a66c:	4b01      	ldr	r3, [pc, #4]	; (800a674 <__errno+0x8>)
 800a66e:	6818      	ldr	r0, [r3, #0]
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	2000017c 	.word	0x2000017c

0800a678 <__libc_init_array>:
 800a678:	b570      	push	{r4, r5, r6, lr}
 800a67a:	2600      	movs	r6, #0
 800a67c:	4d0c      	ldr	r5, [pc, #48]	; (800a6b0 <__libc_init_array+0x38>)
 800a67e:	4c0d      	ldr	r4, [pc, #52]	; (800a6b4 <__libc_init_array+0x3c>)
 800a680:	1b64      	subs	r4, r4, r5
 800a682:	10a4      	asrs	r4, r4, #2
 800a684:	42a6      	cmp	r6, r4
 800a686:	d109      	bne.n	800a69c <__libc_init_array+0x24>
 800a688:	f002 fefa 	bl	800d480 <_init>
 800a68c:	2600      	movs	r6, #0
 800a68e:	4d0a      	ldr	r5, [pc, #40]	; (800a6b8 <__libc_init_array+0x40>)
 800a690:	4c0a      	ldr	r4, [pc, #40]	; (800a6bc <__libc_init_array+0x44>)
 800a692:	1b64      	subs	r4, r4, r5
 800a694:	10a4      	asrs	r4, r4, #2
 800a696:	42a6      	cmp	r6, r4
 800a698:	d105      	bne.n	800a6a6 <__libc_init_array+0x2e>
 800a69a:	bd70      	pop	{r4, r5, r6, pc}
 800a69c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6a0:	4798      	blx	r3
 800a6a2:	3601      	adds	r6, #1
 800a6a4:	e7ee      	b.n	800a684 <__libc_init_array+0xc>
 800a6a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6aa:	4798      	blx	r3
 800a6ac:	3601      	adds	r6, #1
 800a6ae:	e7f2      	b.n	800a696 <__libc_init_array+0x1e>
 800a6b0:	0800d974 	.word	0x0800d974
 800a6b4:	0800d974 	.word	0x0800d974
 800a6b8:	0800d974 	.word	0x0800d974
 800a6bc:	0800d978 	.word	0x0800d978

0800a6c0 <memset>:
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	4402      	add	r2, r0
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d100      	bne.n	800a6ca <memset+0xa>
 800a6c8:	4770      	bx	lr
 800a6ca:	f803 1b01 	strb.w	r1, [r3], #1
 800a6ce:	e7f9      	b.n	800a6c4 <memset+0x4>

0800a6d0 <__cvt>:
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d6:	461f      	mov	r7, r3
 800a6d8:	bfbb      	ittet	lt
 800a6da:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a6de:	461f      	movlt	r7, r3
 800a6e0:	2300      	movge	r3, #0
 800a6e2:	232d      	movlt	r3, #45	; 0x2d
 800a6e4:	b088      	sub	sp, #32
 800a6e6:	4614      	mov	r4, r2
 800a6e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a6ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a6ec:	7013      	strb	r3, [r2, #0]
 800a6ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a6f4:	f023 0820 	bic.w	r8, r3, #32
 800a6f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a6fc:	d005      	beq.n	800a70a <__cvt+0x3a>
 800a6fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a702:	d100      	bne.n	800a706 <__cvt+0x36>
 800a704:	3501      	adds	r5, #1
 800a706:	2302      	movs	r3, #2
 800a708:	e000      	b.n	800a70c <__cvt+0x3c>
 800a70a:	2303      	movs	r3, #3
 800a70c:	aa07      	add	r2, sp, #28
 800a70e:	9204      	str	r2, [sp, #16]
 800a710:	aa06      	add	r2, sp, #24
 800a712:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a716:	e9cd 3500 	strd	r3, r5, [sp]
 800a71a:	4622      	mov	r2, r4
 800a71c:	463b      	mov	r3, r7
 800a71e:	f000 fce3 	bl	800b0e8 <_dtoa_r>
 800a722:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a726:	4606      	mov	r6, r0
 800a728:	d102      	bne.n	800a730 <__cvt+0x60>
 800a72a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a72c:	07db      	lsls	r3, r3, #31
 800a72e:	d522      	bpl.n	800a776 <__cvt+0xa6>
 800a730:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a734:	eb06 0905 	add.w	r9, r6, r5
 800a738:	d110      	bne.n	800a75c <__cvt+0x8c>
 800a73a:	7833      	ldrb	r3, [r6, #0]
 800a73c:	2b30      	cmp	r3, #48	; 0x30
 800a73e:	d10a      	bne.n	800a756 <__cvt+0x86>
 800a740:	2200      	movs	r2, #0
 800a742:	2300      	movs	r3, #0
 800a744:	4620      	mov	r0, r4
 800a746:	4639      	mov	r1, r7
 800a748:	f7f6 f92e 	bl	80009a8 <__aeabi_dcmpeq>
 800a74c:	b918      	cbnz	r0, 800a756 <__cvt+0x86>
 800a74e:	f1c5 0501 	rsb	r5, r5, #1
 800a752:	f8ca 5000 	str.w	r5, [sl]
 800a756:	f8da 3000 	ldr.w	r3, [sl]
 800a75a:	4499      	add	r9, r3
 800a75c:	2200      	movs	r2, #0
 800a75e:	2300      	movs	r3, #0
 800a760:	4620      	mov	r0, r4
 800a762:	4639      	mov	r1, r7
 800a764:	f7f6 f920 	bl	80009a8 <__aeabi_dcmpeq>
 800a768:	b108      	cbz	r0, 800a76e <__cvt+0x9e>
 800a76a:	f8cd 901c 	str.w	r9, [sp, #28]
 800a76e:	2230      	movs	r2, #48	; 0x30
 800a770:	9b07      	ldr	r3, [sp, #28]
 800a772:	454b      	cmp	r3, r9
 800a774:	d307      	bcc.n	800a786 <__cvt+0xb6>
 800a776:	4630      	mov	r0, r6
 800a778:	9b07      	ldr	r3, [sp, #28]
 800a77a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a77c:	1b9b      	subs	r3, r3, r6
 800a77e:	6013      	str	r3, [r2, #0]
 800a780:	b008      	add	sp, #32
 800a782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a786:	1c59      	adds	r1, r3, #1
 800a788:	9107      	str	r1, [sp, #28]
 800a78a:	701a      	strb	r2, [r3, #0]
 800a78c:	e7f0      	b.n	800a770 <__cvt+0xa0>

0800a78e <__exponent>:
 800a78e:	4603      	mov	r3, r0
 800a790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a792:	2900      	cmp	r1, #0
 800a794:	f803 2b02 	strb.w	r2, [r3], #2
 800a798:	bfb6      	itet	lt
 800a79a:	222d      	movlt	r2, #45	; 0x2d
 800a79c:	222b      	movge	r2, #43	; 0x2b
 800a79e:	4249      	neglt	r1, r1
 800a7a0:	2909      	cmp	r1, #9
 800a7a2:	7042      	strb	r2, [r0, #1]
 800a7a4:	dd2b      	ble.n	800a7fe <__exponent+0x70>
 800a7a6:	f10d 0407 	add.w	r4, sp, #7
 800a7aa:	46a4      	mov	ip, r4
 800a7ac:	270a      	movs	r7, #10
 800a7ae:	fb91 f6f7 	sdiv	r6, r1, r7
 800a7b2:	460a      	mov	r2, r1
 800a7b4:	46a6      	mov	lr, r4
 800a7b6:	fb07 1516 	mls	r5, r7, r6, r1
 800a7ba:	2a63      	cmp	r2, #99	; 0x63
 800a7bc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800a7c0:	4631      	mov	r1, r6
 800a7c2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a7c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a7ca:	dcf0      	bgt.n	800a7ae <__exponent+0x20>
 800a7cc:	3130      	adds	r1, #48	; 0x30
 800a7ce:	f1ae 0502 	sub.w	r5, lr, #2
 800a7d2:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	1c44      	adds	r4, r0, #1
 800a7da:	4561      	cmp	r1, ip
 800a7dc:	d30a      	bcc.n	800a7f4 <__exponent+0x66>
 800a7de:	f10d 0209 	add.w	r2, sp, #9
 800a7e2:	eba2 020e 	sub.w	r2, r2, lr
 800a7e6:	4565      	cmp	r5, ip
 800a7e8:	bf88      	it	hi
 800a7ea:	2200      	movhi	r2, #0
 800a7ec:	4413      	add	r3, r2
 800a7ee:	1a18      	subs	r0, r3, r0
 800a7f0:	b003      	add	sp, #12
 800a7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7f8:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a7fc:	e7ed      	b.n	800a7da <__exponent+0x4c>
 800a7fe:	2330      	movs	r3, #48	; 0x30
 800a800:	3130      	adds	r1, #48	; 0x30
 800a802:	7083      	strb	r3, [r0, #2]
 800a804:	70c1      	strb	r1, [r0, #3]
 800a806:	1d03      	adds	r3, r0, #4
 800a808:	e7f1      	b.n	800a7ee <__exponent+0x60>
	...

0800a80c <_printf_float>:
 800a80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a810:	b091      	sub	sp, #68	; 0x44
 800a812:	460c      	mov	r4, r1
 800a814:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a818:	4616      	mov	r6, r2
 800a81a:	461f      	mov	r7, r3
 800a81c:	4605      	mov	r5, r0
 800a81e:	f001 fa51 	bl	800bcc4 <_localeconv_r>
 800a822:	6803      	ldr	r3, [r0, #0]
 800a824:	4618      	mov	r0, r3
 800a826:	9309      	str	r3, [sp, #36]	; 0x24
 800a828:	f7f5 fc92 	bl	8000150 <strlen>
 800a82c:	2300      	movs	r3, #0
 800a82e:	930e      	str	r3, [sp, #56]	; 0x38
 800a830:	f8d8 3000 	ldr.w	r3, [r8]
 800a834:	900a      	str	r0, [sp, #40]	; 0x28
 800a836:	3307      	adds	r3, #7
 800a838:	f023 0307 	bic.w	r3, r3, #7
 800a83c:	f103 0208 	add.w	r2, r3, #8
 800a840:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a844:	f8d4 b000 	ldr.w	fp, [r4]
 800a848:	f8c8 2000 	str.w	r2, [r8]
 800a84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a850:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a854:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800a858:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a85c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a85e:	f04f 32ff 	mov.w	r2, #4294967295
 800a862:	4640      	mov	r0, r8
 800a864:	4b9c      	ldr	r3, [pc, #624]	; (800aad8 <_printf_float+0x2cc>)
 800a866:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a868:	f7f6 f8d0 	bl	8000a0c <__aeabi_dcmpun>
 800a86c:	bb70      	cbnz	r0, 800a8cc <_printf_float+0xc0>
 800a86e:	f04f 32ff 	mov.w	r2, #4294967295
 800a872:	4640      	mov	r0, r8
 800a874:	4b98      	ldr	r3, [pc, #608]	; (800aad8 <_printf_float+0x2cc>)
 800a876:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a878:	f7f6 f8aa 	bl	80009d0 <__aeabi_dcmple>
 800a87c:	bb30      	cbnz	r0, 800a8cc <_printf_float+0xc0>
 800a87e:	2200      	movs	r2, #0
 800a880:	2300      	movs	r3, #0
 800a882:	4640      	mov	r0, r8
 800a884:	4651      	mov	r1, sl
 800a886:	f7f6 f899 	bl	80009bc <__aeabi_dcmplt>
 800a88a:	b110      	cbz	r0, 800a892 <_printf_float+0x86>
 800a88c:	232d      	movs	r3, #45	; 0x2d
 800a88e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a892:	4b92      	ldr	r3, [pc, #584]	; (800aadc <_printf_float+0x2d0>)
 800a894:	4892      	ldr	r0, [pc, #584]	; (800aae0 <_printf_float+0x2d4>)
 800a896:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a89a:	bf94      	ite	ls
 800a89c:	4698      	movls	r8, r3
 800a89e:	4680      	movhi	r8, r0
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	f04f 0a00 	mov.w	sl, #0
 800a8a6:	6123      	str	r3, [r4, #16]
 800a8a8:	f02b 0304 	bic.w	r3, fp, #4
 800a8ac:	6023      	str	r3, [r4, #0]
 800a8ae:	4633      	mov	r3, r6
 800a8b0:	4621      	mov	r1, r4
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	9700      	str	r7, [sp, #0]
 800a8b6:	aa0f      	add	r2, sp, #60	; 0x3c
 800a8b8:	f000 f9d4 	bl	800ac64 <_printf_common>
 800a8bc:	3001      	adds	r0, #1
 800a8be:	f040 8090 	bne.w	800a9e2 <_printf_float+0x1d6>
 800a8c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c6:	b011      	add	sp, #68	; 0x44
 800a8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8cc:	4642      	mov	r2, r8
 800a8ce:	4653      	mov	r3, sl
 800a8d0:	4640      	mov	r0, r8
 800a8d2:	4651      	mov	r1, sl
 800a8d4:	f7f6 f89a 	bl	8000a0c <__aeabi_dcmpun>
 800a8d8:	b148      	cbz	r0, 800a8ee <_printf_float+0xe2>
 800a8da:	f1ba 0f00 	cmp.w	sl, #0
 800a8de:	bfb8      	it	lt
 800a8e0:	232d      	movlt	r3, #45	; 0x2d
 800a8e2:	4880      	ldr	r0, [pc, #512]	; (800aae4 <_printf_float+0x2d8>)
 800a8e4:	bfb8      	it	lt
 800a8e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a8ea:	4b7f      	ldr	r3, [pc, #508]	; (800aae8 <_printf_float+0x2dc>)
 800a8ec:	e7d3      	b.n	800a896 <_printf_float+0x8a>
 800a8ee:	6863      	ldr	r3, [r4, #4]
 800a8f0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a8f4:	1c5a      	adds	r2, r3, #1
 800a8f6:	d142      	bne.n	800a97e <_printf_float+0x172>
 800a8f8:	2306      	movs	r3, #6
 800a8fa:	6063      	str	r3, [r4, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	9206      	str	r2, [sp, #24]
 800a900:	aa0e      	add	r2, sp, #56	; 0x38
 800a902:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a906:	aa0d      	add	r2, sp, #52	; 0x34
 800a908:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a90c:	9203      	str	r2, [sp, #12]
 800a90e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a912:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a916:	6023      	str	r3, [r4, #0]
 800a918:	6863      	ldr	r3, [r4, #4]
 800a91a:	4642      	mov	r2, r8
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	4628      	mov	r0, r5
 800a920:	4653      	mov	r3, sl
 800a922:	910b      	str	r1, [sp, #44]	; 0x2c
 800a924:	f7ff fed4 	bl	800a6d0 <__cvt>
 800a928:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a92a:	4680      	mov	r8, r0
 800a92c:	2947      	cmp	r1, #71	; 0x47
 800a92e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a930:	d108      	bne.n	800a944 <_printf_float+0x138>
 800a932:	1cc8      	adds	r0, r1, #3
 800a934:	db02      	blt.n	800a93c <_printf_float+0x130>
 800a936:	6863      	ldr	r3, [r4, #4]
 800a938:	4299      	cmp	r1, r3
 800a93a:	dd40      	ble.n	800a9be <_printf_float+0x1b2>
 800a93c:	f1a9 0902 	sub.w	r9, r9, #2
 800a940:	fa5f f989 	uxtb.w	r9, r9
 800a944:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a948:	d81f      	bhi.n	800a98a <_printf_float+0x17e>
 800a94a:	464a      	mov	r2, r9
 800a94c:	3901      	subs	r1, #1
 800a94e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a952:	910d      	str	r1, [sp, #52]	; 0x34
 800a954:	f7ff ff1b 	bl	800a78e <__exponent>
 800a958:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a95a:	4682      	mov	sl, r0
 800a95c:	1813      	adds	r3, r2, r0
 800a95e:	2a01      	cmp	r2, #1
 800a960:	6123      	str	r3, [r4, #16]
 800a962:	dc02      	bgt.n	800a96a <_printf_float+0x15e>
 800a964:	6822      	ldr	r2, [r4, #0]
 800a966:	07d2      	lsls	r2, r2, #31
 800a968:	d501      	bpl.n	800a96e <_printf_float+0x162>
 800a96a:	3301      	adds	r3, #1
 800a96c:	6123      	str	r3, [r4, #16]
 800a96e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a972:	2b00      	cmp	r3, #0
 800a974:	d09b      	beq.n	800a8ae <_printf_float+0xa2>
 800a976:	232d      	movs	r3, #45	; 0x2d
 800a978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a97c:	e797      	b.n	800a8ae <_printf_float+0xa2>
 800a97e:	2947      	cmp	r1, #71	; 0x47
 800a980:	d1bc      	bne.n	800a8fc <_printf_float+0xf0>
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1ba      	bne.n	800a8fc <_printf_float+0xf0>
 800a986:	2301      	movs	r3, #1
 800a988:	e7b7      	b.n	800a8fa <_printf_float+0xee>
 800a98a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a98e:	d118      	bne.n	800a9c2 <_printf_float+0x1b6>
 800a990:	2900      	cmp	r1, #0
 800a992:	6863      	ldr	r3, [r4, #4]
 800a994:	dd0b      	ble.n	800a9ae <_printf_float+0x1a2>
 800a996:	6121      	str	r1, [r4, #16]
 800a998:	b913      	cbnz	r3, 800a9a0 <_printf_float+0x194>
 800a99a:	6822      	ldr	r2, [r4, #0]
 800a99c:	07d0      	lsls	r0, r2, #31
 800a99e:	d502      	bpl.n	800a9a6 <_printf_float+0x19a>
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	440b      	add	r3, r1
 800a9a4:	6123      	str	r3, [r4, #16]
 800a9a6:	f04f 0a00 	mov.w	sl, #0
 800a9aa:	65a1      	str	r1, [r4, #88]	; 0x58
 800a9ac:	e7df      	b.n	800a96e <_printf_float+0x162>
 800a9ae:	b913      	cbnz	r3, 800a9b6 <_printf_float+0x1aa>
 800a9b0:	6822      	ldr	r2, [r4, #0]
 800a9b2:	07d2      	lsls	r2, r2, #31
 800a9b4:	d501      	bpl.n	800a9ba <_printf_float+0x1ae>
 800a9b6:	3302      	adds	r3, #2
 800a9b8:	e7f4      	b.n	800a9a4 <_printf_float+0x198>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e7f2      	b.n	800a9a4 <_printf_float+0x198>
 800a9be:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a9c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9c4:	4299      	cmp	r1, r3
 800a9c6:	db05      	blt.n	800a9d4 <_printf_float+0x1c8>
 800a9c8:	6823      	ldr	r3, [r4, #0]
 800a9ca:	6121      	str	r1, [r4, #16]
 800a9cc:	07d8      	lsls	r0, r3, #31
 800a9ce:	d5ea      	bpl.n	800a9a6 <_printf_float+0x19a>
 800a9d0:	1c4b      	adds	r3, r1, #1
 800a9d2:	e7e7      	b.n	800a9a4 <_printf_float+0x198>
 800a9d4:	2900      	cmp	r1, #0
 800a9d6:	bfcc      	ite	gt
 800a9d8:	2201      	movgt	r2, #1
 800a9da:	f1c1 0202 	rsble	r2, r1, #2
 800a9de:	4413      	add	r3, r2
 800a9e0:	e7e0      	b.n	800a9a4 <_printf_float+0x198>
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	055a      	lsls	r2, r3, #21
 800a9e6:	d407      	bmi.n	800a9f8 <_printf_float+0x1ec>
 800a9e8:	6923      	ldr	r3, [r4, #16]
 800a9ea:	4642      	mov	r2, r8
 800a9ec:	4631      	mov	r1, r6
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	47b8      	blx	r7
 800a9f2:	3001      	adds	r0, #1
 800a9f4:	d12b      	bne.n	800aa4e <_printf_float+0x242>
 800a9f6:	e764      	b.n	800a8c2 <_printf_float+0xb6>
 800a9f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a9fc:	f240 80dd 	bls.w	800abba <_printf_float+0x3ae>
 800aa00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa04:	2200      	movs	r2, #0
 800aa06:	2300      	movs	r3, #0
 800aa08:	f7f5 ffce 	bl	80009a8 <__aeabi_dcmpeq>
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	d033      	beq.n	800aa78 <_printf_float+0x26c>
 800aa10:	2301      	movs	r3, #1
 800aa12:	4631      	mov	r1, r6
 800aa14:	4628      	mov	r0, r5
 800aa16:	4a35      	ldr	r2, [pc, #212]	; (800aaec <_printf_float+0x2e0>)
 800aa18:	47b8      	blx	r7
 800aa1a:	3001      	adds	r0, #1
 800aa1c:	f43f af51 	beq.w	800a8c2 <_printf_float+0xb6>
 800aa20:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800aa24:	429a      	cmp	r2, r3
 800aa26:	db02      	blt.n	800aa2e <_printf_float+0x222>
 800aa28:	6823      	ldr	r3, [r4, #0]
 800aa2a:	07d8      	lsls	r0, r3, #31
 800aa2c:	d50f      	bpl.n	800aa4e <_printf_float+0x242>
 800aa2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa32:	4631      	mov	r1, r6
 800aa34:	4628      	mov	r0, r5
 800aa36:	47b8      	blx	r7
 800aa38:	3001      	adds	r0, #1
 800aa3a:	f43f af42 	beq.w	800a8c2 <_printf_float+0xb6>
 800aa3e:	f04f 0800 	mov.w	r8, #0
 800aa42:	f104 091a 	add.w	r9, r4, #26
 800aa46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	4543      	cmp	r3, r8
 800aa4c:	dc09      	bgt.n	800aa62 <_printf_float+0x256>
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	079b      	lsls	r3, r3, #30
 800aa52:	f100 8102 	bmi.w	800ac5a <_printf_float+0x44e>
 800aa56:	68e0      	ldr	r0, [r4, #12]
 800aa58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa5a:	4298      	cmp	r0, r3
 800aa5c:	bfb8      	it	lt
 800aa5e:	4618      	movlt	r0, r3
 800aa60:	e731      	b.n	800a8c6 <_printf_float+0xba>
 800aa62:	2301      	movs	r3, #1
 800aa64:	464a      	mov	r2, r9
 800aa66:	4631      	mov	r1, r6
 800aa68:	4628      	mov	r0, r5
 800aa6a:	47b8      	blx	r7
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	f43f af28 	beq.w	800a8c2 <_printf_float+0xb6>
 800aa72:	f108 0801 	add.w	r8, r8, #1
 800aa76:	e7e6      	b.n	800aa46 <_printf_float+0x23a>
 800aa78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	dc38      	bgt.n	800aaf0 <_printf_float+0x2e4>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	4631      	mov	r1, r6
 800aa82:	4628      	mov	r0, r5
 800aa84:	4a19      	ldr	r2, [pc, #100]	; (800aaec <_printf_float+0x2e0>)
 800aa86:	47b8      	blx	r7
 800aa88:	3001      	adds	r0, #1
 800aa8a:	f43f af1a 	beq.w	800a8c2 <_printf_float+0xb6>
 800aa8e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800aa92:	4313      	orrs	r3, r2
 800aa94:	d102      	bne.n	800aa9c <_printf_float+0x290>
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	07d9      	lsls	r1, r3, #31
 800aa9a:	d5d8      	bpl.n	800aa4e <_printf_float+0x242>
 800aa9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aaa0:	4631      	mov	r1, r6
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	47b8      	blx	r7
 800aaa6:	3001      	adds	r0, #1
 800aaa8:	f43f af0b 	beq.w	800a8c2 <_printf_float+0xb6>
 800aaac:	f04f 0900 	mov.w	r9, #0
 800aab0:	f104 0a1a 	add.w	sl, r4, #26
 800aab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aab6:	425b      	negs	r3, r3
 800aab8:	454b      	cmp	r3, r9
 800aaba:	dc01      	bgt.n	800aac0 <_printf_float+0x2b4>
 800aabc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aabe:	e794      	b.n	800a9ea <_printf_float+0x1de>
 800aac0:	2301      	movs	r3, #1
 800aac2:	4652      	mov	r2, sl
 800aac4:	4631      	mov	r1, r6
 800aac6:	4628      	mov	r0, r5
 800aac8:	47b8      	blx	r7
 800aaca:	3001      	adds	r0, #1
 800aacc:	f43f aef9 	beq.w	800a8c2 <_printf_float+0xb6>
 800aad0:	f109 0901 	add.w	r9, r9, #1
 800aad4:	e7ee      	b.n	800aab4 <_printf_float+0x2a8>
 800aad6:	bf00      	nop
 800aad8:	7fefffff 	.word	0x7fefffff
 800aadc:	0800d59c 	.word	0x0800d59c
 800aae0:	0800d5a0 	.word	0x0800d5a0
 800aae4:	0800d5a8 	.word	0x0800d5a8
 800aae8:	0800d5a4 	.word	0x0800d5a4
 800aaec:	0800d5ac 	.word	0x0800d5ac
 800aaf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aaf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	bfa8      	it	ge
 800aaf8:	461a      	movge	r2, r3
 800aafa:	2a00      	cmp	r2, #0
 800aafc:	4691      	mov	r9, r2
 800aafe:	dc37      	bgt.n	800ab70 <_printf_float+0x364>
 800ab00:	f04f 0b00 	mov.w	fp, #0
 800ab04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab08:	f104 021a 	add.w	r2, r4, #26
 800ab0c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ab10:	ebaa 0309 	sub.w	r3, sl, r9
 800ab14:	455b      	cmp	r3, fp
 800ab16:	dc33      	bgt.n	800ab80 <_printf_float+0x374>
 800ab18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	db3b      	blt.n	800ab98 <_printf_float+0x38c>
 800ab20:	6823      	ldr	r3, [r4, #0]
 800ab22:	07da      	lsls	r2, r3, #31
 800ab24:	d438      	bmi.n	800ab98 <_printf_float+0x38c>
 800ab26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab28:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ab2a:	eba3 020a 	sub.w	r2, r3, sl
 800ab2e:	eba3 0901 	sub.w	r9, r3, r1
 800ab32:	4591      	cmp	r9, r2
 800ab34:	bfa8      	it	ge
 800ab36:	4691      	movge	r9, r2
 800ab38:	f1b9 0f00 	cmp.w	r9, #0
 800ab3c:	dc34      	bgt.n	800aba8 <_printf_float+0x39c>
 800ab3e:	f04f 0800 	mov.w	r8, #0
 800ab42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab46:	f104 0a1a 	add.w	sl, r4, #26
 800ab4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ab4e:	1a9b      	subs	r3, r3, r2
 800ab50:	eba3 0309 	sub.w	r3, r3, r9
 800ab54:	4543      	cmp	r3, r8
 800ab56:	f77f af7a 	ble.w	800aa4e <_printf_float+0x242>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	4652      	mov	r2, sl
 800ab5e:	4631      	mov	r1, r6
 800ab60:	4628      	mov	r0, r5
 800ab62:	47b8      	blx	r7
 800ab64:	3001      	adds	r0, #1
 800ab66:	f43f aeac 	beq.w	800a8c2 <_printf_float+0xb6>
 800ab6a:	f108 0801 	add.w	r8, r8, #1
 800ab6e:	e7ec      	b.n	800ab4a <_printf_float+0x33e>
 800ab70:	4613      	mov	r3, r2
 800ab72:	4631      	mov	r1, r6
 800ab74:	4642      	mov	r2, r8
 800ab76:	4628      	mov	r0, r5
 800ab78:	47b8      	blx	r7
 800ab7a:	3001      	adds	r0, #1
 800ab7c:	d1c0      	bne.n	800ab00 <_printf_float+0x2f4>
 800ab7e:	e6a0      	b.n	800a8c2 <_printf_float+0xb6>
 800ab80:	2301      	movs	r3, #1
 800ab82:	4631      	mov	r1, r6
 800ab84:	4628      	mov	r0, r5
 800ab86:	920b      	str	r2, [sp, #44]	; 0x2c
 800ab88:	47b8      	blx	r7
 800ab8a:	3001      	adds	r0, #1
 800ab8c:	f43f ae99 	beq.w	800a8c2 <_printf_float+0xb6>
 800ab90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab92:	f10b 0b01 	add.w	fp, fp, #1
 800ab96:	e7b9      	b.n	800ab0c <_printf_float+0x300>
 800ab98:	4631      	mov	r1, r6
 800ab9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab9e:	4628      	mov	r0, r5
 800aba0:	47b8      	blx	r7
 800aba2:	3001      	adds	r0, #1
 800aba4:	d1bf      	bne.n	800ab26 <_printf_float+0x31a>
 800aba6:	e68c      	b.n	800a8c2 <_printf_float+0xb6>
 800aba8:	464b      	mov	r3, r9
 800abaa:	4631      	mov	r1, r6
 800abac:	4628      	mov	r0, r5
 800abae:	eb08 020a 	add.w	r2, r8, sl
 800abb2:	47b8      	blx	r7
 800abb4:	3001      	adds	r0, #1
 800abb6:	d1c2      	bne.n	800ab3e <_printf_float+0x332>
 800abb8:	e683      	b.n	800a8c2 <_printf_float+0xb6>
 800abba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abbc:	2a01      	cmp	r2, #1
 800abbe:	dc01      	bgt.n	800abc4 <_printf_float+0x3b8>
 800abc0:	07db      	lsls	r3, r3, #31
 800abc2:	d537      	bpl.n	800ac34 <_printf_float+0x428>
 800abc4:	2301      	movs	r3, #1
 800abc6:	4642      	mov	r2, r8
 800abc8:	4631      	mov	r1, r6
 800abca:	4628      	mov	r0, r5
 800abcc:	47b8      	blx	r7
 800abce:	3001      	adds	r0, #1
 800abd0:	f43f ae77 	beq.w	800a8c2 <_printf_float+0xb6>
 800abd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abd8:	4631      	mov	r1, r6
 800abda:	4628      	mov	r0, r5
 800abdc:	47b8      	blx	r7
 800abde:	3001      	adds	r0, #1
 800abe0:	f43f ae6f 	beq.w	800a8c2 <_printf_float+0xb6>
 800abe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abe8:	2200      	movs	r2, #0
 800abea:	2300      	movs	r3, #0
 800abec:	f7f5 fedc 	bl	80009a8 <__aeabi_dcmpeq>
 800abf0:	b9d8      	cbnz	r0, 800ac2a <_printf_float+0x41e>
 800abf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abf4:	f108 0201 	add.w	r2, r8, #1
 800abf8:	3b01      	subs	r3, #1
 800abfa:	4631      	mov	r1, r6
 800abfc:	4628      	mov	r0, r5
 800abfe:	47b8      	blx	r7
 800ac00:	3001      	adds	r0, #1
 800ac02:	d10e      	bne.n	800ac22 <_printf_float+0x416>
 800ac04:	e65d      	b.n	800a8c2 <_printf_float+0xb6>
 800ac06:	2301      	movs	r3, #1
 800ac08:	464a      	mov	r2, r9
 800ac0a:	4631      	mov	r1, r6
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	47b8      	blx	r7
 800ac10:	3001      	adds	r0, #1
 800ac12:	f43f ae56 	beq.w	800a8c2 <_printf_float+0xb6>
 800ac16:	f108 0801 	add.w	r8, r8, #1
 800ac1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	4543      	cmp	r3, r8
 800ac20:	dcf1      	bgt.n	800ac06 <_printf_float+0x3fa>
 800ac22:	4653      	mov	r3, sl
 800ac24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac28:	e6e0      	b.n	800a9ec <_printf_float+0x1e0>
 800ac2a:	f04f 0800 	mov.w	r8, #0
 800ac2e:	f104 091a 	add.w	r9, r4, #26
 800ac32:	e7f2      	b.n	800ac1a <_printf_float+0x40e>
 800ac34:	2301      	movs	r3, #1
 800ac36:	4642      	mov	r2, r8
 800ac38:	e7df      	b.n	800abfa <_printf_float+0x3ee>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	464a      	mov	r2, r9
 800ac3e:	4631      	mov	r1, r6
 800ac40:	4628      	mov	r0, r5
 800ac42:	47b8      	blx	r7
 800ac44:	3001      	adds	r0, #1
 800ac46:	f43f ae3c 	beq.w	800a8c2 <_printf_float+0xb6>
 800ac4a:	f108 0801 	add.w	r8, r8, #1
 800ac4e:	68e3      	ldr	r3, [r4, #12]
 800ac50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ac52:	1a5b      	subs	r3, r3, r1
 800ac54:	4543      	cmp	r3, r8
 800ac56:	dcf0      	bgt.n	800ac3a <_printf_float+0x42e>
 800ac58:	e6fd      	b.n	800aa56 <_printf_float+0x24a>
 800ac5a:	f04f 0800 	mov.w	r8, #0
 800ac5e:	f104 0919 	add.w	r9, r4, #25
 800ac62:	e7f4      	b.n	800ac4e <_printf_float+0x442>

0800ac64 <_printf_common>:
 800ac64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac68:	4616      	mov	r6, r2
 800ac6a:	4699      	mov	r9, r3
 800ac6c:	688a      	ldr	r2, [r1, #8]
 800ac6e:	690b      	ldr	r3, [r1, #16]
 800ac70:	4607      	mov	r7, r0
 800ac72:	4293      	cmp	r3, r2
 800ac74:	bfb8      	it	lt
 800ac76:	4613      	movlt	r3, r2
 800ac78:	6033      	str	r3, [r6, #0]
 800ac7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac7e:	460c      	mov	r4, r1
 800ac80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac84:	b10a      	cbz	r2, 800ac8a <_printf_common+0x26>
 800ac86:	3301      	adds	r3, #1
 800ac88:	6033      	str	r3, [r6, #0]
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	0699      	lsls	r1, r3, #26
 800ac8e:	bf42      	ittt	mi
 800ac90:	6833      	ldrmi	r3, [r6, #0]
 800ac92:	3302      	addmi	r3, #2
 800ac94:	6033      	strmi	r3, [r6, #0]
 800ac96:	6825      	ldr	r5, [r4, #0]
 800ac98:	f015 0506 	ands.w	r5, r5, #6
 800ac9c:	d106      	bne.n	800acac <_printf_common+0x48>
 800ac9e:	f104 0a19 	add.w	sl, r4, #25
 800aca2:	68e3      	ldr	r3, [r4, #12]
 800aca4:	6832      	ldr	r2, [r6, #0]
 800aca6:	1a9b      	subs	r3, r3, r2
 800aca8:	42ab      	cmp	r3, r5
 800acaa:	dc28      	bgt.n	800acfe <_printf_common+0x9a>
 800acac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800acb0:	1e13      	subs	r3, r2, #0
 800acb2:	6822      	ldr	r2, [r4, #0]
 800acb4:	bf18      	it	ne
 800acb6:	2301      	movne	r3, #1
 800acb8:	0692      	lsls	r2, r2, #26
 800acba:	d42d      	bmi.n	800ad18 <_printf_common+0xb4>
 800acbc:	4649      	mov	r1, r9
 800acbe:	4638      	mov	r0, r7
 800acc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acc4:	47c0      	blx	r8
 800acc6:	3001      	adds	r0, #1
 800acc8:	d020      	beq.n	800ad0c <_printf_common+0xa8>
 800acca:	6823      	ldr	r3, [r4, #0]
 800accc:	68e5      	ldr	r5, [r4, #12]
 800acce:	f003 0306 	and.w	r3, r3, #6
 800acd2:	2b04      	cmp	r3, #4
 800acd4:	bf18      	it	ne
 800acd6:	2500      	movne	r5, #0
 800acd8:	6832      	ldr	r2, [r6, #0]
 800acda:	f04f 0600 	mov.w	r6, #0
 800acde:	68a3      	ldr	r3, [r4, #8]
 800ace0:	bf08      	it	eq
 800ace2:	1aad      	subeq	r5, r5, r2
 800ace4:	6922      	ldr	r2, [r4, #16]
 800ace6:	bf08      	it	eq
 800ace8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acec:	4293      	cmp	r3, r2
 800acee:	bfc4      	itt	gt
 800acf0:	1a9b      	subgt	r3, r3, r2
 800acf2:	18ed      	addgt	r5, r5, r3
 800acf4:	341a      	adds	r4, #26
 800acf6:	42b5      	cmp	r5, r6
 800acf8:	d11a      	bne.n	800ad30 <_printf_common+0xcc>
 800acfa:	2000      	movs	r0, #0
 800acfc:	e008      	b.n	800ad10 <_printf_common+0xac>
 800acfe:	2301      	movs	r3, #1
 800ad00:	4652      	mov	r2, sl
 800ad02:	4649      	mov	r1, r9
 800ad04:	4638      	mov	r0, r7
 800ad06:	47c0      	blx	r8
 800ad08:	3001      	adds	r0, #1
 800ad0a:	d103      	bne.n	800ad14 <_printf_common+0xb0>
 800ad0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad14:	3501      	adds	r5, #1
 800ad16:	e7c4      	b.n	800aca2 <_printf_common+0x3e>
 800ad18:	2030      	movs	r0, #48	; 0x30
 800ad1a:	18e1      	adds	r1, r4, r3
 800ad1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad20:	1c5a      	adds	r2, r3, #1
 800ad22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad26:	4422      	add	r2, r4
 800ad28:	3302      	adds	r3, #2
 800ad2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad2e:	e7c5      	b.n	800acbc <_printf_common+0x58>
 800ad30:	2301      	movs	r3, #1
 800ad32:	4622      	mov	r2, r4
 800ad34:	4649      	mov	r1, r9
 800ad36:	4638      	mov	r0, r7
 800ad38:	47c0      	blx	r8
 800ad3a:	3001      	adds	r0, #1
 800ad3c:	d0e6      	beq.n	800ad0c <_printf_common+0xa8>
 800ad3e:	3601      	adds	r6, #1
 800ad40:	e7d9      	b.n	800acf6 <_printf_common+0x92>
	...

0800ad44 <_printf_i>:
 800ad44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad48:	7e0f      	ldrb	r7, [r1, #24]
 800ad4a:	4691      	mov	r9, r2
 800ad4c:	2f78      	cmp	r7, #120	; 0x78
 800ad4e:	4680      	mov	r8, r0
 800ad50:	460c      	mov	r4, r1
 800ad52:	469a      	mov	sl, r3
 800ad54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad5a:	d807      	bhi.n	800ad6c <_printf_i+0x28>
 800ad5c:	2f62      	cmp	r7, #98	; 0x62
 800ad5e:	d80a      	bhi.n	800ad76 <_printf_i+0x32>
 800ad60:	2f00      	cmp	r7, #0
 800ad62:	f000 80d9 	beq.w	800af18 <_printf_i+0x1d4>
 800ad66:	2f58      	cmp	r7, #88	; 0x58
 800ad68:	f000 80a4 	beq.w	800aeb4 <_printf_i+0x170>
 800ad6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad74:	e03a      	b.n	800adec <_printf_i+0xa8>
 800ad76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad7a:	2b15      	cmp	r3, #21
 800ad7c:	d8f6      	bhi.n	800ad6c <_printf_i+0x28>
 800ad7e:	a101      	add	r1, pc, #4	; (adr r1, 800ad84 <_printf_i+0x40>)
 800ad80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad84:	0800addd 	.word	0x0800addd
 800ad88:	0800adf1 	.word	0x0800adf1
 800ad8c:	0800ad6d 	.word	0x0800ad6d
 800ad90:	0800ad6d 	.word	0x0800ad6d
 800ad94:	0800ad6d 	.word	0x0800ad6d
 800ad98:	0800ad6d 	.word	0x0800ad6d
 800ad9c:	0800adf1 	.word	0x0800adf1
 800ada0:	0800ad6d 	.word	0x0800ad6d
 800ada4:	0800ad6d 	.word	0x0800ad6d
 800ada8:	0800ad6d 	.word	0x0800ad6d
 800adac:	0800ad6d 	.word	0x0800ad6d
 800adb0:	0800aeff 	.word	0x0800aeff
 800adb4:	0800ae21 	.word	0x0800ae21
 800adb8:	0800aee1 	.word	0x0800aee1
 800adbc:	0800ad6d 	.word	0x0800ad6d
 800adc0:	0800ad6d 	.word	0x0800ad6d
 800adc4:	0800af21 	.word	0x0800af21
 800adc8:	0800ad6d 	.word	0x0800ad6d
 800adcc:	0800ae21 	.word	0x0800ae21
 800add0:	0800ad6d 	.word	0x0800ad6d
 800add4:	0800ad6d 	.word	0x0800ad6d
 800add8:	0800aee9 	.word	0x0800aee9
 800addc:	682b      	ldr	r3, [r5, #0]
 800adde:	1d1a      	adds	r2, r3, #4
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	602a      	str	r2, [r5, #0]
 800ade4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ade8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adec:	2301      	movs	r3, #1
 800adee:	e0a4      	b.n	800af3a <_printf_i+0x1f6>
 800adf0:	6820      	ldr	r0, [r4, #0]
 800adf2:	6829      	ldr	r1, [r5, #0]
 800adf4:	0606      	lsls	r6, r0, #24
 800adf6:	f101 0304 	add.w	r3, r1, #4
 800adfa:	d50a      	bpl.n	800ae12 <_printf_i+0xce>
 800adfc:	680e      	ldr	r6, [r1, #0]
 800adfe:	602b      	str	r3, [r5, #0]
 800ae00:	2e00      	cmp	r6, #0
 800ae02:	da03      	bge.n	800ae0c <_printf_i+0xc8>
 800ae04:	232d      	movs	r3, #45	; 0x2d
 800ae06:	4276      	negs	r6, r6
 800ae08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae0c:	230a      	movs	r3, #10
 800ae0e:	485e      	ldr	r0, [pc, #376]	; (800af88 <_printf_i+0x244>)
 800ae10:	e019      	b.n	800ae46 <_printf_i+0x102>
 800ae12:	680e      	ldr	r6, [r1, #0]
 800ae14:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae18:	602b      	str	r3, [r5, #0]
 800ae1a:	bf18      	it	ne
 800ae1c:	b236      	sxthne	r6, r6
 800ae1e:	e7ef      	b.n	800ae00 <_printf_i+0xbc>
 800ae20:	682b      	ldr	r3, [r5, #0]
 800ae22:	6820      	ldr	r0, [r4, #0]
 800ae24:	1d19      	adds	r1, r3, #4
 800ae26:	6029      	str	r1, [r5, #0]
 800ae28:	0601      	lsls	r1, r0, #24
 800ae2a:	d501      	bpl.n	800ae30 <_printf_i+0xec>
 800ae2c:	681e      	ldr	r6, [r3, #0]
 800ae2e:	e002      	b.n	800ae36 <_printf_i+0xf2>
 800ae30:	0646      	lsls	r6, r0, #25
 800ae32:	d5fb      	bpl.n	800ae2c <_printf_i+0xe8>
 800ae34:	881e      	ldrh	r6, [r3, #0]
 800ae36:	2f6f      	cmp	r7, #111	; 0x6f
 800ae38:	bf0c      	ite	eq
 800ae3a:	2308      	moveq	r3, #8
 800ae3c:	230a      	movne	r3, #10
 800ae3e:	4852      	ldr	r0, [pc, #328]	; (800af88 <_printf_i+0x244>)
 800ae40:	2100      	movs	r1, #0
 800ae42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae46:	6865      	ldr	r5, [r4, #4]
 800ae48:	2d00      	cmp	r5, #0
 800ae4a:	bfa8      	it	ge
 800ae4c:	6821      	ldrge	r1, [r4, #0]
 800ae4e:	60a5      	str	r5, [r4, #8]
 800ae50:	bfa4      	itt	ge
 800ae52:	f021 0104 	bicge.w	r1, r1, #4
 800ae56:	6021      	strge	r1, [r4, #0]
 800ae58:	b90e      	cbnz	r6, 800ae5e <_printf_i+0x11a>
 800ae5a:	2d00      	cmp	r5, #0
 800ae5c:	d04d      	beq.n	800aefa <_printf_i+0x1b6>
 800ae5e:	4615      	mov	r5, r2
 800ae60:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae64:	fb03 6711 	mls	r7, r3, r1, r6
 800ae68:	5dc7      	ldrb	r7, [r0, r7]
 800ae6a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae6e:	4637      	mov	r7, r6
 800ae70:	42bb      	cmp	r3, r7
 800ae72:	460e      	mov	r6, r1
 800ae74:	d9f4      	bls.n	800ae60 <_printf_i+0x11c>
 800ae76:	2b08      	cmp	r3, #8
 800ae78:	d10b      	bne.n	800ae92 <_printf_i+0x14e>
 800ae7a:	6823      	ldr	r3, [r4, #0]
 800ae7c:	07de      	lsls	r6, r3, #31
 800ae7e:	d508      	bpl.n	800ae92 <_printf_i+0x14e>
 800ae80:	6923      	ldr	r3, [r4, #16]
 800ae82:	6861      	ldr	r1, [r4, #4]
 800ae84:	4299      	cmp	r1, r3
 800ae86:	bfde      	ittt	le
 800ae88:	2330      	movle	r3, #48	; 0x30
 800ae8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae92:	1b52      	subs	r2, r2, r5
 800ae94:	6122      	str	r2, [r4, #16]
 800ae96:	464b      	mov	r3, r9
 800ae98:	4621      	mov	r1, r4
 800ae9a:	4640      	mov	r0, r8
 800ae9c:	f8cd a000 	str.w	sl, [sp]
 800aea0:	aa03      	add	r2, sp, #12
 800aea2:	f7ff fedf 	bl	800ac64 <_printf_common>
 800aea6:	3001      	adds	r0, #1
 800aea8:	d14c      	bne.n	800af44 <_printf_i+0x200>
 800aeaa:	f04f 30ff 	mov.w	r0, #4294967295
 800aeae:	b004      	add	sp, #16
 800aeb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb4:	4834      	ldr	r0, [pc, #208]	; (800af88 <_printf_i+0x244>)
 800aeb6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aeba:	6829      	ldr	r1, [r5, #0]
 800aebc:	6823      	ldr	r3, [r4, #0]
 800aebe:	f851 6b04 	ldr.w	r6, [r1], #4
 800aec2:	6029      	str	r1, [r5, #0]
 800aec4:	061d      	lsls	r5, r3, #24
 800aec6:	d514      	bpl.n	800aef2 <_printf_i+0x1ae>
 800aec8:	07df      	lsls	r7, r3, #31
 800aeca:	bf44      	itt	mi
 800aecc:	f043 0320 	orrmi.w	r3, r3, #32
 800aed0:	6023      	strmi	r3, [r4, #0]
 800aed2:	b91e      	cbnz	r6, 800aedc <_printf_i+0x198>
 800aed4:	6823      	ldr	r3, [r4, #0]
 800aed6:	f023 0320 	bic.w	r3, r3, #32
 800aeda:	6023      	str	r3, [r4, #0]
 800aedc:	2310      	movs	r3, #16
 800aede:	e7af      	b.n	800ae40 <_printf_i+0xfc>
 800aee0:	6823      	ldr	r3, [r4, #0]
 800aee2:	f043 0320 	orr.w	r3, r3, #32
 800aee6:	6023      	str	r3, [r4, #0]
 800aee8:	2378      	movs	r3, #120	; 0x78
 800aeea:	4828      	ldr	r0, [pc, #160]	; (800af8c <_printf_i+0x248>)
 800aeec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aef0:	e7e3      	b.n	800aeba <_printf_i+0x176>
 800aef2:	0659      	lsls	r1, r3, #25
 800aef4:	bf48      	it	mi
 800aef6:	b2b6      	uxthmi	r6, r6
 800aef8:	e7e6      	b.n	800aec8 <_printf_i+0x184>
 800aefa:	4615      	mov	r5, r2
 800aefc:	e7bb      	b.n	800ae76 <_printf_i+0x132>
 800aefe:	682b      	ldr	r3, [r5, #0]
 800af00:	6826      	ldr	r6, [r4, #0]
 800af02:	1d18      	adds	r0, r3, #4
 800af04:	6961      	ldr	r1, [r4, #20]
 800af06:	6028      	str	r0, [r5, #0]
 800af08:	0635      	lsls	r5, r6, #24
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	d501      	bpl.n	800af12 <_printf_i+0x1ce>
 800af0e:	6019      	str	r1, [r3, #0]
 800af10:	e002      	b.n	800af18 <_printf_i+0x1d4>
 800af12:	0670      	lsls	r0, r6, #25
 800af14:	d5fb      	bpl.n	800af0e <_printf_i+0x1ca>
 800af16:	8019      	strh	r1, [r3, #0]
 800af18:	2300      	movs	r3, #0
 800af1a:	4615      	mov	r5, r2
 800af1c:	6123      	str	r3, [r4, #16]
 800af1e:	e7ba      	b.n	800ae96 <_printf_i+0x152>
 800af20:	682b      	ldr	r3, [r5, #0]
 800af22:	2100      	movs	r1, #0
 800af24:	1d1a      	adds	r2, r3, #4
 800af26:	602a      	str	r2, [r5, #0]
 800af28:	681d      	ldr	r5, [r3, #0]
 800af2a:	6862      	ldr	r2, [r4, #4]
 800af2c:	4628      	mov	r0, r5
 800af2e:	f000 fed5 	bl	800bcdc <memchr>
 800af32:	b108      	cbz	r0, 800af38 <_printf_i+0x1f4>
 800af34:	1b40      	subs	r0, r0, r5
 800af36:	6060      	str	r0, [r4, #4]
 800af38:	6863      	ldr	r3, [r4, #4]
 800af3a:	6123      	str	r3, [r4, #16]
 800af3c:	2300      	movs	r3, #0
 800af3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af42:	e7a8      	b.n	800ae96 <_printf_i+0x152>
 800af44:	462a      	mov	r2, r5
 800af46:	4649      	mov	r1, r9
 800af48:	4640      	mov	r0, r8
 800af4a:	6923      	ldr	r3, [r4, #16]
 800af4c:	47d0      	blx	sl
 800af4e:	3001      	adds	r0, #1
 800af50:	d0ab      	beq.n	800aeaa <_printf_i+0x166>
 800af52:	6823      	ldr	r3, [r4, #0]
 800af54:	079b      	lsls	r3, r3, #30
 800af56:	d413      	bmi.n	800af80 <_printf_i+0x23c>
 800af58:	68e0      	ldr	r0, [r4, #12]
 800af5a:	9b03      	ldr	r3, [sp, #12]
 800af5c:	4298      	cmp	r0, r3
 800af5e:	bfb8      	it	lt
 800af60:	4618      	movlt	r0, r3
 800af62:	e7a4      	b.n	800aeae <_printf_i+0x16a>
 800af64:	2301      	movs	r3, #1
 800af66:	4632      	mov	r2, r6
 800af68:	4649      	mov	r1, r9
 800af6a:	4640      	mov	r0, r8
 800af6c:	47d0      	blx	sl
 800af6e:	3001      	adds	r0, #1
 800af70:	d09b      	beq.n	800aeaa <_printf_i+0x166>
 800af72:	3501      	adds	r5, #1
 800af74:	68e3      	ldr	r3, [r4, #12]
 800af76:	9903      	ldr	r1, [sp, #12]
 800af78:	1a5b      	subs	r3, r3, r1
 800af7a:	42ab      	cmp	r3, r5
 800af7c:	dcf2      	bgt.n	800af64 <_printf_i+0x220>
 800af7e:	e7eb      	b.n	800af58 <_printf_i+0x214>
 800af80:	2500      	movs	r5, #0
 800af82:	f104 0619 	add.w	r6, r4, #25
 800af86:	e7f5      	b.n	800af74 <_printf_i+0x230>
 800af88:	0800d5ae 	.word	0x0800d5ae
 800af8c:	0800d5bf 	.word	0x0800d5bf

0800af90 <siprintf>:
 800af90:	b40e      	push	{r1, r2, r3}
 800af92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af96:	b500      	push	{lr}
 800af98:	b09c      	sub	sp, #112	; 0x70
 800af9a:	ab1d      	add	r3, sp, #116	; 0x74
 800af9c:	9002      	str	r0, [sp, #8]
 800af9e:	9006      	str	r0, [sp, #24]
 800afa0:	9107      	str	r1, [sp, #28]
 800afa2:	9104      	str	r1, [sp, #16]
 800afa4:	4808      	ldr	r0, [pc, #32]	; (800afc8 <siprintf+0x38>)
 800afa6:	4909      	ldr	r1, [pc, #36]	; (800afcc <siprintf+0x3c>)
 800afa8:	f853 2b04 	ldr.w	r2, [r3], #4
 800afac:	9105      	str	r1, [sp, #20]
 800afae:	6800      	ldr	r0, [r0, #0]
 800afb0:	a902      	add	r1, sp, #8
 800afb2:	9301      	str	r3, [sp, #4]
 800afb4:	f001 fb7c 	bl	800c6b0 <_svfiprintf_r>
 800afb8:	2200      	movs	r2, #0
 800afba:	9b02      	ldr	r3, [sp, #8]
 800afbc:	701a      	strb	r2, [r3, #0]
 800afbe:	b01c      	add	sp, #112	; 0x70
 800afc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800afc4:	b003      	add	sp, #12
 800afc6:	4770      	bx	lr
 800afc8:	2000017c 	.word	0x2000017c
 800afcc:	ffff0208 	.word	0xffff0208

0800afd0 <quorem>:
 800afd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd4:	6903      	ldr	r3, [r0, #16]
 800afd6:	690c      	ldr	r4, [r1, #16]
 800afd8:	4607      	mov	r7, r0
 800afda:	42a3      	cmp	r3, r4
 800afdc:	f2c0 8082 	blt.w	800b0e4 <quorem+0x114>
 800afe0:	3c01      	subs	r4, #1
 800afe2:	f100 0514 	add.w	r5, r0, #20
 800afe6:	f101 0814 	add.w	r8, r1, #20
 800afea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afee:	9301      	str	r3, [sp, #4]
 800aff0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aff4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aff8:	3301      	adds	r3, #1
 800affa:	429a      	cmp	r2, r3
 800affc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b000:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b004:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b008:	d331      	bcc.n	800b06e <quorem+0x9e>
 800b00a:	f04f 0e00 	mov.w	lr, #0
 800b00e:	4640      	mov	r0, r8
 800b010:	46ac      	mov	ip, r5
 800b012:	46f2      	mov	sl, lr
 800b014:	f850 2b04 	ldr.w	r2, [r0], #4
 800b018:	b293      	uxth	r3, r2
 800b01a:	fb06 e303 	mla	r3, r6, r3, lr
 800b01e:	0c12      	lsrs	r2, r2, #16
 800b020:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b024:	b29b      	uxth	r3, r3
 800b026:	fb06 e202 	mla	r2, r6, r2, lr
 800b02a:	ebaa 0303 	sub.w	r3, sl, r3
 800b02e:	f8dc a000 	ldr.w	sl, [ip]
 800b032:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b036:	fa1f fa8a 	uxth.w	sl, sl
 800b03a:	4453      	add	r3, sl
 800b03c:	f8dc a000 	ldr.w	sl, [ip]
 800b040:	b292      	uxth	r2, r2
 800b042:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b046:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b050:	4581      	cmp	r9, r0
 800b052:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b056:	f84c 3b04 	str.w	r3, [ip], #4
 800b05a:	d2db      	bcs.n	800b014 <quorem+0x44>
 800b05c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b060:	b92b      	cbnz	r3, 800b06e <quorem+0x9e>
 800b062:	9b01      	ldr	r3, [sp, #4]
 800b064:	3b04      	subs	r3, #4
 800b066:	429d      	cmp	r5, r3
 800b068:	461a      	mov	r2, r3
 800b06a:	d32f      	bcc.n	800b0cc <quorem+0xfc>
 800b06c:	613c      	str	r4, [r7, #16]
 800b06e:	4638      	mov	r0, r7
 800b070:	f001 f8ce 	bl	800c210 <__mcmp>
 800b074:	2800      	cmp	r0, #0
 800b076:	db25      	blt.n	800b0c4 <quorem+0xf4>
 800b078:	4628      	mov	r0, r5
 800b07a:	f04f 0c00 	mov.w	ip, #0
 800b07e:	3601      	adds	r6, #1
 800b080:	f858 1b04 	ldr.w	r1, [r8], #4
 800b084:	f8d0 e000 	ldr.w	lr, [r0]
 800b088:	b28b      	uxth	r3, r1
 800b08a:	ebac 0303 	sub.w	r3, ip, r3
 800b08e:	fa1f f28e 	uxth.w	r2, lr
 800b092:	4413      	add	r3, r2
 800b094:	0c0a      	lsrs	r2, r1, #16
 800b096:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b09a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0a4:	45c1      	cmp	r9, r8
 800b0a6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b0aa:	f840 3b04 	str.w	r3, [r0], #4
 800b0ae:	d2e7      	bcs.n	800b080 <quorem+0xb0>
 800b0b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0b8:	b922      	cbnz	r2, 800b0c4 <quorem+0xf4>
 800b0ba:	3b04      	subs	r3, #4
 800b0bc:	429d      	cmp	r5, r3
 800b0be:	461a      	mov	r2, r3
 800b0c0:	d30a      	bcc.n	800b0d8 <quorem+0x108>
 800b0c2:	613c      	str	r4, [r7, #16]
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	b003      	add	sp, #12
 800b0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0cc:	6812      	ldr	r2, [r2, #0]
 800b0ce:	3b04      	subs	r3, #4
 800b0d0:	2a00      	cmp	r2, #0
 800b0d2:	d1cb      	bne.n	800b06c <quorem+0x9c>
 800b0d4:	3c01      	subs	r4, #1
 800b0d6:	e7c6      	b.n	800b066 <quorem+0x96>
 800b0d8:	6812      	ldr	r2, [r2, #0]
 800b0da:	3b04      	subs	r3, #4
 800b0dc:	2a00      	cmp	r2, #0
 800b0de:	d1f0      	bne.n	800b0c2 <quorem+0xf2>
 800b0e0:	3c01      	subs	r4, #1
 800b0e2:	e7eb      	b.n	800b0bc <quorem+0xec>
 800b0e4:	2000      	movs	r0, #0
 800b0e6:	e7ee      	b.n	800b0c6 <quorem+0xf6>

0800b0e8 <_dtoa_r>:
 800b0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ec:	4616      	mov	r6, r2
 800b0ee:	461f      	mov	r7, r3
 800b0f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b0f2:	b099      	sub	sp, #100	; 0x64
 800b0f4:	4605      	mov	r5, r0
 800b0f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b0fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b0fe:	b974      	cbnz	r4, 800b11e <_dtoa_r+0x36>
 800b100:	2010      	movs	r0, #16
 800b102:	f000 fde3 	bl	800bccc <malloc>
 800b106:	4602      	mov	r2, r0
 800b108:	6268      	str	r0, [r5, #36]	; 0x24
 800b10a:	b920      	cbnz	r0, 800b116 <_dtoa_r+0x2e>
 800b10c:	21ea      	movs	r1, #234	; 0xea
 800b10e:	4ba8      	ldr	r3, [pc, #672]	; (800b3b0 <_dtoa_r+0x2c8>)
 800b110:	48a8      	ldr	r0, [pc, #672]	; (800b3b4 <_dtoa_r+0x2cc>)
 800b112:	f001 fbdd 	bl	800c8d0 <__assert_func>
 800b116:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b11a:	6004      	str	r4, [r0, #0]
 800b11c:	60c4      	str	r4, [r0, #12]
 800b11e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b120:	6819      	ldr	r1, [r3, #0]
 800b122:	b151      	cbz	r1, 800b13a <_dtoa_r+0x52>
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	2301      	movs	r3, #1
 800b128:	4093      	lsls	r3, r2
 800b12a:	604a      	str	r2, [r1, #4]
 800b12c:	608b      	str	r3, [r1, #8]
 800b12e:	4628      	mov	r0, r5
 800b130:	f000 fe30 	bl	800bd94 <_Bfree>
 800b134:	2200      	movs	r2, #0
 800b136:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b138:	601a      	str	r2, [r3, #0]
 800b13a:	1e3b      	subs	r3, r7, #0
 800b13c:	bfaf      	iteee	ge
 800b13e:	2300      	movge	r3, #0
 800b140:	2201      	movlt	r2, #1
 800b142:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b146:	9305      	strlt	r3, [sp, #20]
 800b148:	bfa8      	it	ge
 800b14a:	f8c8 3000 	strge.w	r3, [r8]
 800b14e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b152:	4b99      	ldr	r3, [pc, #612]	; (800b3b8 <_dtoa_r+0x2d0>)
 800b154:	bfb8      	it	lt
 800b156:	f8c8 2000 	strlt.w	r2, [r8]
 800b15a:	ea33 0309 	bics.w	r3, r3, r9
 800b15e:	d119      	bne.n	800b194 <_dtoa_r+0xac>
 800b160:	f242 730f 	movw	r3, #9999	; 0x270f
 800b164:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b166:	6013      	str	r3, [r2, #0]
 800b168:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b16c:	4333      	orrs	r3, r6
 800b16e:	f000 857f 	beq.w	800bc70 <_dtoa_r+0xb88>
 800b172:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b174:	b953      	cbnz	r3, 800b18c <_dtoa_r+0xa4>
 800b176:	4b91      	ldr	r3, [pc, #580]	; (800b3bc <_dtoa_r+0x2d4>)
 800b178:	e022      	b.n	800b1c0 <_dtoa_r+0xd8>
 800b17a:	4b91      	ldr	r3, [pc, #580]	; (800b3c0 <_dtoa_r+0x2d8>)
 800b17c:	9303      	str	r3, [sp, #12]
 800b17e:	3308      	adds	r3, #8
 800b180:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b182:	6013      	str	r3, [r2, #0]
 800b184:	9803      	ldr	r0, [sp, #12]
 800b186:	b019      	add	sp, #100	; 0x64
 800b188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b18c:	4b8b      	ldr	r3, [pc, #556]	; (800b3bc <_dtoa_r+0x2d4>)
 800b18e:	9303      	str	r3, [sp, #12]
 800b190:	3303      	adds	r3, #3
 800b192:	e7f5      	b.n	800b180 <_dtoa_r+0x98>
 800b194:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b198:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b19c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	f7f5 fc00 	bl	80009a8 <__aeabi_dcmpeq>
 800b1a8:	4680      	mov	r8, r0
 800b1aa:	b158      	cbz	r0, 800b1c4 <_dtoa_r+0xdc>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b1b0:	6013      	str	r3, [r2, #0]
 800b1b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f000 8558 	beq.w	800bc6a <_dtoa_r+0xb82>
 800b1ba:	4882      	ldr	r0, [pc, #520]	; (800b3c4 <_dtoa_r+0x2dc>)
 800b1bc:	6018      	str	r0, [r3, #0]
 800b1be:	1e43      	subs	r3, r0, #1
 800b1c0:	9303      	str	r3, [sp, #12]
 800b1c2:	e7df      	b.n	800b184 <_dtoa_r+0x9c>
 800b1c4:	ab16      	add	r3, sp, #88	; 0x58
 800b1c6:	9301      	str	r3, [sp, #4]
 800b1c8:	ab17      	add	r3, sp, #92	; 0x5c
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	4628      	mov	r0, r5
 800b1ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b1d2:	f001 f8c5 	bl	800c360 <__d2b>
 800b1d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b1da:	4683      	mov	fp, r0
 800b1dc:	2c00      	cmp	r4, #0
 800b1de:	d07f      	beq.n	800b2e0 <_dtoa_r+0x1f8>
 800b1e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b1e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b1ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b1f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b1f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	4b72      	ldr	r3, [pc, #456]	; (800b3c8 <_dtoa_r+0x2e0>)
 800b1fe:	f7f4 ffb3 	bl	8000168 <__aeabi_dsub>
 800b202:	a365      	add	r3, pc, #404	; (adr r3, 800b398 <_dtoa_r+0x2b0>)
 800b204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b208:	f7f5 f966 	bl	80004d8 <__aeabi_dmul>
 800b20c:	a364      	add	r3, pc, #400	; (adr r3, 800b3a0 <_dtoa_r+0x2b8>)
 800b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b212:	f7f4 ffab 	bl	800016c <__adddf3>
 800b216:	4606      	mov	r6, r0
 800b218:	4620      	mov	r0, r4
 800b21a:	460f      	mov	r7, r1
 800b21c:	f7f5 f8f2 	bl	8000404 <__aeabi_i2d>
 800b220:	a361      	add	r3, pc, #388	; (adr r3, 800b3a8 <_dtoa_r+0x2c0>)
 800b222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b226:	f7f5 f957 	bl	80004d8 <__aeabi_dmul>
 800b22a:	4602      	mov	r2, r0
 800b22c:	460b      	mov	r3, r1
 800b22e:	4630      	mov	r0, r6
 800b230:	4639      	mov	r1, r7
 800b232:	f7f4 ff9b 	bl	800016c <__adddf3>
 800b236:	4606      	mov	r6, r0
 800b238:	460f      	mov	r7, r1
 800b23a:	f7f5 fbfd 	bl	8000a38 <__aeabi_d2iz>
 800b23e:	2200      	movs	r2, #0
 800b240:	4682      	mov	sl, r0
 800b242:	2300      	movs	r3, #0
 800b244:	4630      	mov	r0, r6
 800b246:	4639      	mov	r1, r7
 800b248:	f7f5 fbb8 	bl	80009bc <__aeabi_dcmplt>
 800b24c:	b148      	cbz	r0, 800b262 <_dtoa_r+0x17a>
 800b24e:	4650      	mov	r0, sl
 800b250:	f7f5 f8d8 	bl	8000404 <__aeabi_i2d>
 800b254:	4632      	mov	r2, r6
 800b256:	463b      	mov	r3, r7
 800b258:	f7f5 fba6 	bl	80009a8 <__aeabi_dcmpeq>
 800b25c:	b908      	cbnz	r0, 800b262 <_dtoa_r+0x17a>
 800b25e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b262:	f1ba 0f16 	cmp.w	sl, #22
 800b266:	d858      	bhi.n	800b31a <_dtoa_r+0x232>
 800b268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b26c:	4b57      	ldr	r3, [pc, #348]	; (800b3cc <_dtoa_r+0x2e4>)
 800b26e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b276:	f7f5 fba1 	bl	80009bc <__aeabi_dcmplt>
 800b27a:	2800      	cmp	r0, #0
 800b27c:	d04f      	beq.n	800b31e <_dtoa_r+0x236>
 800b27e:	2300      	movs	r3, #0
 800b280:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b284:	930f      	str	r3, [sp, #60]	; 0x3c
 800b286:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b288:	1b1c      	subs	r4, r3, r4
 800b28a:	1e63      	subs	r3, r4, #1
 800b28c:	9309      	str	r3, [sp, #36]	; 0x24
 800b28e:	bf49      	itett	mi
 800b290:	f1c4 0301 	rsbmi	r3, r4, #1
 800b294:	2300      	movpl	r3, #0
 800b296:	9306      	strmi	r3, [sp, #24]
 800b298:	2300      	movmi	r3, #0
 800b29a:	bf54      	ite	pl
 800b29c:	9306      	strpl	r3, [sp, #24]
 800b29e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b2a0:	f1ba 0f00 	cmp.w	sl, #0
 800b2a4:	db3d      	blt.n	800b322 <_dtoa_r+0x23a>
 800b2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b2ac:	4453      	add	r3, sl
 800b2ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	930a      	str	r3, [sp, #40]	; 0x28
 800b2b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2b6:	2b09      	cmp	r3, #9
 800b2b8:	f200 808c 	bhi.w	800b3d4 <_dtoa_r+0x2ec>
 800b2bc:	2b05      	cmp	r3, #5
 800b2be:	bfc4      	itt	gt
 800b2c0:	3b04      	subgt	r3, #4
 800b2c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b2c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2c6:	bfc8      	it	gt
 800b2c8:	2400      	movgt	r4, #0
 800b2ca:	f1a3 0302 	sub.w	r3, r3, #2
 800b2ce:	bfd8      	it	le
 800b2d0:	2401      	movle	r4, #1
 800b2d2:	2b03      	cmp	r3, #3
 800b2d4:	f200 808a 	bhi.w	800b3ec <_dtoa_r+0x304>
 800b2d8:	e8df f003 	tbb	[pc, r3]
 800b2dc:	5b4d4f2d 	.word	0x5b4d4f2d
 800b2e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b2e4:	441c      	add	r4, r3
 800b2e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b2ea:	2b20      	cmp	r3, #32
 800b2ec:	bfc3      	ittte	gt
 800b2ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b2f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b2f6:	fa09 f303 	lslgt.w	r3, r9, r3
 800b2fa:	f1c3 0320 	rsble	r3, r3, #32
 800b2fe:	bfc6      	itte	gt
 800b300:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b304:	4318      	orrgt	r0, r3
 800b306:	fa06 f003 	lslle.w	r0, r6, r3
 800b30a:	f7f5 f86b 	bl	80003e4 <__aeabi_ui2d>
 800b30e:	2301      	movs	r3, #1
 800b310:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b314:	3c01      	subs	r4, #1
 800b316:	9313      	str	r3, [sp, #76]	; 0x4c
 800b318:	e76f      	b.n	800b1fa <_dtoa_r+0x112>
 800b31a:	2301      	movs	r3, #1
 800b31c:	e7b2      	b.n	800b284 <_dtoa_r+0x19c>
 800b31e:	900f      	str	r0, [sp, #60]	; 0x3c
 800b320:	e7b1      	b.n	800b286 <_dtoa_r+0x19e>
 800b322:	9b06      	ldr	r3, [sp, #24]
 800b324:	eba3 030a 	sub.w	r3, r3, sl
 800b328:	9306      	str	r3, [sp, #24]
 800b32a:	f1ca 0300 	rsb	r3, sl, #0
 800b32e:	930a      	str	r3, [sp, #40]	; 0x28
 800b330:	2300      	movs	r3, #0
 800b332:	930e      	str	r3, [sp, #56]	; 0x38
 800b334:	e7be      	b.n	800b2b4 <_dtoa_r+0x1cc>
 800b336:	2300      	movs	r3, #0
 800b338:	930b      	str	r3, [sp, #44]	; 0x2c
 800b33a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	dc58      	bgt.n	800b3f2 <_dtoa_r+0x30a>
 800b340:	f04f 0901 	mov.w	r9, #1
 800b344:	464b      	mov	r3, r9
 800b346:	f8cd 9020 	str.w	r9, [sp, #32]
 800b34a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800b34e:	2200      	movs	r2, #0
 800b350:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b352:	6042      	str	r2, [r0, #4]
 800b354:	2204      	movs	r2, #4
 800b356:	f102 0614 	add.w	r6, r2, #20
 800b35a:	429e      	cmp	r6, r3
 800b35c:	6841      	ldr	r1, [r0, #4]
 800b35e:	d94e      	bls.n	800b3fe <_dtoa_r+0x316>
 800b360:	4628      	mov	r0, r5
 800b362:	f000 fcd7 	bl	800bd14 <_Balloc>
 800b366:	9003      	str	r0, [sp, #12]
 800b368:	2800      	cmp	r0, #0
 800b36a:	d14c      	bne.n	800b406 <_dtoa_r+0x31e>
 800b36c:	4602      	mov	r2, r0
 800b36e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b372:	4b17      	ldr	r3, [pc, #92]	; (800b3d0 <_dtoa_r+0x2e8>)
 800b374:	e6cc      	b.n	800b110 <_dtoa_r+0x28>
 800b376:	2301      	movs	r3, #1
 800b378:	e7de      	b.n	800b338 <_dtoa_r+0x250>
 800b37a:	2300      	movs	r3, #0
 800b37c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b37e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b380:	eb0a 0903 	add.w	r9, sl, r3
 800b384:	f109 0301 	add.w	r3, r9, #1
 800b388:	2b01      	cmp	r3, #1
 800b38a:	9308      	str	r3, [sp, #32]
 800b38c:	bfb8      	it	lt
 800b38e:	2301      	movlt	r3, #1
 800b390:	e7dd      	b.n	800b34e <_dtoa_r+0x266>
 800b392:	2301      	movs	r3, #1
 800b394:	e7f2      	b.n	800b37c <_dtoa_r+0x294>
 800b396:	bf00      	nop
 800b398:	636f4361 	.word	0x636f4361
 800b39c:	3fd287a7 	.word	0x3fd287a7
 800b3a0:	8b60c8b3 	.word	0x8b60c8b3
 800b3a4:	3fc68a28 	.word	0x3fc68a28
 800b3a8:	509f79fb 	.word	0x509f79fb
 800b3ac:	3fd34413 	.word	0x3fd34413
 800b3b0:	0800d5dd 	.word	0x0800d5dd
 800b3b4:	0800d5f4 	.word	0x0800d5f4
 800b3b8:	7ff00000 	.word	0x7ff00000
 800b3bc:	0800d5d9 	.word	0x0800d5d9
 800b3c0:	0800d5d0 	.word	0x0800d5d0
 800b3c4:	0800d5ad 	.word	0x0800d5ad
 800b3c8:	3ff80000 	.word	0x3ff80000
 800b3cc:	0800d6e8 	.word	0x0800d6e8
 800b3d0:	0800d64f 	.word	0x0800d64f
 800b3d4:	2401      	movs	r4, #1
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	940b      	str	r4, [sp, #44]	; 0x2c
 800b3da:	9322      	str	r3, [sp, #136]	; 0x88
 800b3dc:	f04f 39ff 	mov.w	r9, #4294967295
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	2312      	movs	r3, #18
 800b3e4:	f8cd 9020 	str.w	r9, [sp, #32]
 800b3e8:	9223      	str	r2, [sp, #140]	; 0x8c
 800b3ea:	e7b0      	b.n	800b34e <_dtoa_r+0x266>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3f0:	e7f4      	b.n	800b3dc <_dtoa_r+0x2f4>
 800b3f2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800b3f6:	464b      	mov	r3, r9
 800b3f8:	f8cd 9020 	str.w	r9, [sp, #32]
 800b3fc:	e7a7      	b.n	800b34e <_dtoa_r+0x266>
 800b3fe:	3101      	adds	r1, #1
 800b400:	6041      	str	r1, [r0, #4]
 800b402:	0052      	lsls	r2, r2, #1
 800b404:	e7a7      	b.n	800b356 <_dtoa_r+0x26e>
 800b406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b408:	9a03      	ldr	r2, [sp, #12]
 800b40a:	601a      	str	r2, [r3, #0]
 800b40c:	9b08      	ldr	r3, [sp, #32]
 800b40e:	2b0e      	cmp	r3, #14
 800b410:	f200 80a8 	bhi.w	800b564 <_dtoa_r+0x47c>
 800b414:	2c00      	cmp	r4, #0
 800b416:	f000 80a5 	beq.w	800b564 <_dtoa_r+0x47c>
 800b41a:	f1ba 0f00 	cmp.w	sl, #0
 800b41e:	dd34      	ble.n	800b48a <_dtoa_r+0x3a2>
 800b420:	4a9a      	ldr	r2, [pc, #616]	; (800b68c <_dtoa_r+0x5a4>)
 800b422:	f00a 030f 	and.w	r3, sl, #15
 800b426:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b42a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b42e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b432:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b436:	ea4f 142a 	mov.w	r4, sl, asr #4
 800b43a:	d016      	beq.n	800b46a <_dtoa_r+0x382>
 800b43c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b440:	4b93      	ldr	r3, [pc, #588]	; (800b690 <_dtoa_r+0x5a8>)
 800b442:	2703      	movs	r7, #3
 800b444:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b448:	f7f5 f970 	bl	800072c <__aeabi_ddiv>
 800b44c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b450:	f004 040f 	and.w	r4, r4, #15
 800b454:	4e8e      	ldr	r6, [pc, #568]	; (800b690 <_dtoa_r+0x5a8>)
 800b456:	b954      	cbnz	r4, 800b46e <_dtoa_r+0x386>
 800b458:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b45c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b460:	f7f5 f964 	bl	800072c <__aeabi_ddiv>
 800b464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b468:	e029      	b.n	800b4be <_dtoa_r+0x3d6>
 800b46a:	2702      	movs	r7, #2
 800b46c:	e7f2      	b.n	800b454 <_dtoa_r+0x36c>
 800b46e:	07e1      	lsls	r1, r4, #31
 800b470:	d508      	bpl.n	800b484 <_dtoa_r+0x39c>
 800b472:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b476:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b47a:	f7f5 f82d 	bl	80004d8 <__aeabi_dmul>
 800b47e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b482:	3701      	adds	r7, #1
 800b484:	1064      	asrs	r4, r4, #1
 800b486:	3608      	adds	r6, #8
 800b488:	e7e5      	b.n	800b456 <_dtoa_r+0x36e>
 800b48a:	f000 80a5 	beq.w	800b5d8 <_dtoa_r+0x4f0>
 800b48e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b492:	f1ca 0400 	rsb	r4, sl, #0
 800b496:	4b7d      	ldr	r3, [pc, #500]	; (800b68c <_dtoa_r+0x5a4>)
 800b498:	f004 020f 	and.w	r2, r4, #15
 800b49c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a4:	f7f5 f818 	bl	80004d8 <__aeabi_dmul>
 800b4a8:	2702      	movs	r7, #2
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4b0:	4e77      	ldr	r6, [pc, #476]	; (800b690 <_dtoa_r+0x5a8>)
 800b4b2:	1124      	asrs	r4, r4, #4
 800b4b4:	2c00      	cmp	r4, #0
 800b4b6:	f040 8084 	bne.w	800b5c2 <_dtoa_r+0x4da>
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d1d2      	bne.n	800b464 <_dtoa_r+0x37c>
 800b4be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	f000 808b 	beq.w	800b5dc <_dtoa_r+0x4f4>
 800b4c6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b4ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b4ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	4b6f      	ldr	r3, [pc, #444]	; (800b694 <_dtoa_r+0x5ac>)
 800b4d6:	f7f5 fa71 	bl	80009bc <__aeabi_dcmplt>
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	d07e      	beq.n	800b5dc <_dtoa_r+0x4f4>
 800b4de:	9b08      	ldr	r3, [sp, #32]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d07b      	beq.n	800b5dc <_dtoa_r+0x4f4>
 800b4e4:	f1b9 0f00 	cmp.w	r9, #0
 800b4e8:	dd38      	ble.n	800b55c <_dtoa_r+0x474>
 800b4ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	4b69      	ldr	r3, [pc, #420]	; (800b698 <_dtoa_r+0x5b0>)
 800b4f2:	f7f4 fff1 	bl	80004d8 <__aeabi_dmul>
 800b4f6:	464c      	mov	r4, r9
 800b4f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4fc:	f10a 38ff 	add.w	r8, sl, #4294967295
 800b500:	3701      	adds	r7, #1
 800b502:	4638      	mov	r0, r7
 800b504:	f7f4 ff7e 	bl	8000404 <__aeabi_i2d>
 800b508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b50c:	f7f4 ffe4 	bl	80004d8 <__aeabi_dmul>
 800b510:	2200      	movs	r2, #0
 800b512:	4b62      	ldr	r3, [pc, #392]	; (800b69c <_dtoa_r+0x5b4>)
 800b514:	f7f4 fe2a 	bl	800016c <__adddf3>
 800b518:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b51c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b520:	9611      	str	r6, [sp, #68]	; 0x44
 800b522:	2c00      	cmp	r4, #0
 800b524:	d15d      	bne.n	800b5e2 <_dtoa_r+0x4fa>
 800b526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b52a:	2200      	movs	r2, #0
 800b52c:	4b5c      	ldr	r3, [pc, #368]	; (800b6a0 <_dtoa_r+0x5b8>)
 800b52e:	f7f4 fe1b 	bl	8000168 <__aeabi_dsub>
 800b532:	4602      	mov	r2, r0
 800b534:	460b      	mov	r3, r1
 800b536:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b53a:	4633      	mov	r3, r6
 800b53c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b53e:	f7f5 fa5b 	bl	80009f8 <__aeabi_dcmpgt>
 800b542:	2800      	cmp	r0, #0
 800b544:	f040 829c 	bne.w	800ba80 <_dtoa_r+0x998>
 800b548:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b54c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b54e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b552:	f7f5 fa33 	bl	80009bc <__aeabi_dcmplt>
 800b556:	2800      	cmp	r0, #0
 800b558:	f040 8290 	bne.w	800ba7c <_dtoa_r+0x994>
 800b55c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b560:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b564:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b566:	2b00      	cmp	r3, #0
 800b568:	f2c0 8152 	blt.w	800b810 <_dtoa_r+0x728>
 800b56c:	f1ba 0f0e 	cmp.w	sl, #14
 800b570:	f300 814e 	bgt.w	800b810 <_dtoa_r+0x728>
 800b574:	4b45      	ldr	r3, [pc, #276]	; (800b68c <_dtoa_r+0x5a4>)
 800b576:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b57a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b57e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b582:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b584:	2b00      	cmp	r3, #0
 800b586:	f280 80db 	bge.w	800b740 <_dtoa_r+0x658>
 800b58a:	9b08      	ldr	r3, [sp, #32]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f300 80d7 	bgt.w	800b740 <_dtoa_r+0x658>
 800b592:	f040 8272 	bne.w	800ba7a <_dtoa_r+0x992>
 800b596:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b59a:	2200      	movs	r2, #0
 800b59c:	4b40      	ldr	r3, [pc, #256]	; (800b6a0 <_dtoa_r+0x5b8>)
 800b59e:	f7f4 ff9b 	bl	80004d8 <__aeabi_dmul>
 800b5a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5a6:	f7f5 fa1d 	bl	80009e4 <__aeabi_dcmpge>
 800b5aa:	9c08      	ldr	r4, [sp, #32]
 800b5ac:	4626      	mov	r6, r4
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	f040 8248 	bne.w	800ba44 <_dtoa_r+0x95c>
 800b5b4:	2331      	movs	r3, #49	; 0x31
 800b5b6:	9f03      	ldr	r7, [sp, #12]
 800b5b8:	f10a 0a01 	add.w	sl, sl, #1
 800b5bc:	f807 3b01 	strb.w	r3, [r7], #1
 800b5c0:	e244      	b.n	800ba4c <_dtoa_r+0x964>
 800b5c2:	07e2      	lsls	r2, r4, #31
 800b5c4:	d505      	bpl.n	800b5d2 <_dtoa_r+0x4ea>
 800b5c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b5ca:	f7f4 ff85 	bl	80004d8 <__aeabi_dmul>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	3701      	adds	r7, #1
 800b5d2:	1064      	asrs	r4, r4, #1
 800b5d4:	3608      	adds	r6, #8
 800b5d6:	e76d      	b.n	800b4b4 <_dtoa_r+0x3cc>
 800b5d8:	2702      	movs	r7, #2
 800b5da:	e770      	b.n	800b4be <_dtoa_r+0x3d6>
 800b5dc:	46d0      	mov	r8, sl
 800b5de:	9c08      	ldr	r4, [sp, #32]
 800b5e0:	e78f      	b.n	800b502 <_dtoa_r+0x41a>
 800b5e2:	9903      	ldr	r1, [sp, #12]
 800b5e4:	4b29      	ldr	r3, [pc, #164]	; (800b68c <_dtoa_r+0x5a4>)
 800b5e6:	4421      	add	r1, r4
 800b5e8:	9112      	str	r1, [sp, #72]	; 0x48
 800b5ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b5f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5f8:	2900      	cmp	r1, #0
 800b5fa:	d055      	beq.n	800b6a8 <_dtoa_r+0x5c0>
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	4929      	ldr	r1, [pc, #164]	; (800b6a4 <_dtoa_r+0x5bc>)
 800b600:	f7f5 f894 	bl	800072c <__aeabi_ddiv>
 800b604:	463b      	mov	r3, r7
 800b606:	4632      	mov	r2, r6
 800b608:	f7f4 fdae 	bl	8000168 <__aeabi_dsub>
 800b60c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b610:	9f03      	ldr	r7, [sp, #12]
 800b612:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b616:	f7f5 fa0f 	bl	8000a38 <__aeabi_d2iz>
 800b61a:	4604      	mov	r4, r0
 800b61c:	f7f4 fef2 	bl	8000404 <__aeabi_i2d>
 800b620:	4602      	mov	r2, r0
 800b622:	460b      	mov	r3, r1
 800b624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b628:	f7f4 fd9e 	bl	8000168 <__aeabi_dsub>
 800b62c:	4602      	mov	r2, r0
 800b62e:	460b      	mov	r3, r1
 800b630:	3430      	adds	r4, #48	; 0x30
 800b632:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b636:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b63a:	f807 4b01 	strb.w	r4, [r7], #1
 800b63e:	f7f5 f9bd 	bl	80009bc <__aeabi_dcmplt>
 800b642:	2800      	cmp	r0, #0
 800b644:	d174      	bne.n	800b730 <_dtoa_r+0x648>
 800b646:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b64a:	2000      	movs	r0, #0
 800b64c:	4911      	ldr	r1, [pc, #68]	; (800b694 <_dtoa_r+0x5ac>)
 800b64e:	f7f4 fd8b 	bl	8000168 <__aeabi_dsub>
 800b652:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b656:	f7f5 f9b1 	bl	80009bc <__aeabi_dcmplt>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	f040 80b7 	bne.w	800b7ce <_dtoa_r+0x6e6>
 800b660:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b662:	429f      	cmp	r7, r3
 800b664:	f43f af7a 	beq.w	800b55c <_dtoa_r+0x474>
 800b668:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b66c:	2200      	movs	r2, #0
 800b66e:	4b0a      	ldr	r3, [pc, #40]	; (800b698 <_dtoa_r+0x5b0>)
 800b670:	f7f4 ff32 	bl	80004d8 <__aeabi_dmul>
 800b674:	2200      	movs	r2, #0
 800b676:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b67a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b67e:	4b06      	ldr	r3, [pc, #24]	; (800b698 <_dtoa_r+0x5b0>)
 800b680:	f7f4 ff2a 	bl	80004d8 <__aeabi_dmul>
 800b684:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b688:	e7c3      	b.n	800b612 <_dtoa_r+0x52a>
 800b68a:	bf00      	nop
 800b68c:	0800d6e8 	.word	0x0800d6e8
 800b690:	0800d6c0 	.word	0x0800d6c0
 800b694:	3ff00000 	.word	0x3ff00000
 800b698:	40240000 	.word	0x40240000
 800b69c:	401c0000 	.word	0x401c0000
 800b6a0:	40140000 	.word	0x40140000
 800b6a4:	3fe00000 	.word	0x3fe00000
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	4639      	mov	r1, r7
 800b6ac:	f7f4 ff14 	bl	80004d8 <__aeabi_dmul>
 800b6b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b6b6:	9c03      	ldr	r4, [sp, #12]
 800b6b8:	9314      	str	r3, [sp, #80]	; 0x50
 800b6ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6be:	f7f5 f9bb 	bl	8000a38 <__aeabi_d2iz>
 800b6c2:	9015      	str	r0, [sp, #84]	; 0x54
 800b6c4:	f7f4 fe9e 	bl	8000404 <__aeabi_i2d>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6d0:	f7f4 fd4a 	bl	8000168 <__aeabi_dsub>
 800b6d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	3330      	adds	r3, #48	; 0x30
 800b6da:	f804 3b01 	strb.w	r3, [r4], #1
 800b6de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6e0:	460f      	mov	r7, r1
 800b6e2:	429c      	cmp	r4, r3
 800b6e4:	f04f 0200 	mov.w	r2, #0
 800b6e8:	d124      	bne.n	800b734 <_dtoa_r+0x64c>
 800b6ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b6ee:	4bb0      	ldr	r3, [pc, #704]	; (800b9b0 <_dtoa_r+0x8c8>)
 800b6f0:	f7f4 fd3c 	bl	800016c <__adddf3>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	4639      	mov	r1, r7
 800b6fc:	f7f5 f97c 	bl	80009f8 <__aeabi_dcmpgt>
 800b700:	2800      	cmp	r0, #0
 800b702:	d163      	bne.n	800b7cc <_dtoa_r+0x6e4>
 800b704:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b708:	2000      	movs	r0, #0
 800b70a:	49a9      	ldr	r1, [pc, #676]	; (800b9b0 <_dtoa_r+0x8c8>)
 800b70c:	f7f4 fd2c 	bl	8000168 <__aeabi_dsub>
 800b710:	4602      	mov	r2, r0
 800b712:	460b      	mov	r3, r1
 800b714:	4630      	mov	r0, r6
 800b716:	4639      	mov	r1, r7
 800b718:	f7f5 f950 	bl	80009bc <__aeabi_dcmplt>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	f43f af1d 	beq.w	800b55c <_dtoa_r+0x474>
 800b722:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b724:	1e7b      	subs	r3, r7, #1
 800b726:	9314      	str	r3, [sp, #80]	; 0x50
 800b728:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b72c:	2b30      	cmp	r3, #48	; 0x30
 800b72e:	d0f8      	beq.n	800b722 <_dtoa_r+0x63a>
 800b730:	46c2      	mov	sl, r8
 800b732:	e03b      	b.n	800b7ac <_dtoa_r+0x6c4>
 800b734:	4b9f      	ldr	r3, [pc, #636]	; (800b9b4 <_dtoa_r+0x8cc>)
 800b736:	f7f4 fecf 	bl	80004d8 <__aeabi_dmul>
 800b73a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b73e:	e7bc      	b.n	800b6ba <_dtoa_r+0x5d2>
 800b740:	9f03      	ldr	r7, [sp, #12]
 800b742:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b746:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b74a:	4640      	mov	r0, r8
 800b74c:	4649      	mov	r1, r9
 800b74e:	f7f4 ffed 	bl	800072c <__aeabi_ddiv>
 800b752:	f7f5 f971 	bl	8000a38 <__aeabi_d2iz>
 800b756:	4604      	mov	r4, r0
 800b758:	f7f4 fe54 	bl	8000404 <__aeabi_i2d>
 800b75c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b760:	f7f4 feba 	bl	80004d8 <__aeabi_dmul>
 800b764:	4602      	mov	r2, r0
 800b766:	460b      	mov	r3, r1
 800b768:	4640      	mov	r0, r8
 800b76a:	4649      	mov	r1, r9
 800b76c:	f7f4 fcfc 	bl	8000168 <__aeabi_dsub>
 800b770:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b774:	f807 6b01 	strb.w	r6, [r7], #1
 800b778:	9e03      	ldr	r6, [sp, #12]
 800b77a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b77e:	1bbe      	subs	r6, r7, r6
 800b780:	45b4      	cmp	ip, r6
 800b782:	4602      	mov	r2, r0
 800b784:	460b      	mov	r3, r1
 800b786:	d136      	bne.n	800b7f6 <_dtoa_r+0x70e>
 800b788:	f7f4 fcf0 	bl	800016c <__adddf3>
 800b78c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b790:	4680      	mov	r8, r0
 800b792:	4689      	mov	r9, r1
 800b794:	f7f5 f930 	bl	80009f8 <__aeabi_dcmpgt>
 800b798:	bb58      	cbnz	r0, 800b7f2 <_dtoa_r+0x70a>
 800b79a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b79e:	4640      	mov	r0, r8
 800b7a0:	4649      	mov	r1, r9
 800b7a2:	f7f5 f901 	bl	80009a8 <__aeabi_dcmpeq>
 800b7a6:	b108      	cbz	r0, 800b7ac <_dtoa_r+0x6c4>
 800b7a8:	07e1      	lsls	r1, r4, #31
 800b7aa:	d422      	bmi.n	800b7f2 <_dtoa_r+0x70a>
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	4659      	mov	r1, fp
 800b7b0:	f000 faf0 	bl	800bd94 <_Bfree>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	703b      	strb	r3, [r7, #0]
 800b7b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b7ba:	f10a 0001 	add.w	r0, sl, #1
 800b7be:	6018      	str	r0, [r3, #0]
 800b7c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f43f acde 	beq.w	800b184 <_dtoa_r+0x9c>
 800b7c8:	601f      	str	r7, [r3, #0]
 800b7ca:	e4db      	b.n	800b184 <_dtoa_r+0x9c>
 800b7cc:	4627      	mov	r7, r4
 800b7ce:	463b      	mov	r3, r7
 800b7d0:	461f      	mov	r7, r3
 800b7d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7d6:	2a39      	cmp	r2, #57	; 0x39
 800b7d8:	d107      	bne.n	800b7ea <_dtoa_r+0x702>
 800b7da:	9a03      	ldr	r2, [sp, #12]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d1f7      	bne.n	800b7d0 <_dtoa_r+0x6e8>
 800b7e0:	2230      	movs	r2, #48	; 0x30
 800b7e2:	9903      	ldr	r1, [sp, #12]
 800b7e4:	f108 0801 	add.w	r8, r8, #1
 800b7e8:	700a      	strb	r2, [r1, #0]
 800b7ea:	781a      	ldrb	r2, [r3, #0]
 800b7ec:	3201      	adds	r2, #1
 800b7ee:	701a      	strb	r2, [r3, #0]
 800b7f0:	e79e      	b.n	800b730 <_dtoa_r+0x648>
 800b7f2:	46d0      	mov	r8, sl
 800b7f4:	e7eb      	b.n	800b7ce <_dtoa_r+0x6e6>
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	4b6e      	ldr	r3, [pc, #440]	; (800b9b4 <_dtoa_r+0x8cc>)
 800b7fa:	f7f4 fe6d 	bl	80004d8 <__aeabi_dmul>
 800b7fe:	2200      	movs	r2, #0
 800b800:	2300      	movs	r3, #0
 800b802:	4680      	mov	r8, r0
 800b804:	4689      	mov	r9, r1
 800b806:	f7f5 f8cf 	bl	80009a8 <__aeabi_dcmpeq>
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d09b      	beq.n	800b746 <_dtoa_r+0x65e>
 800b80e:	e7cd      	b.n	800b7ac <_dtoa_r+0x6c4>
 800b810:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b812:	2a00      	cmp	r2, #0
 800b814:	f000 80d0 	beq.w	800b9b8 <_dtoa_r+0x8d0>
 800b818:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b81a:	2a01      	cmp	r2, #1
 800b81c:	f300 80ae 	bgt.w	800b97c <_dtoa_r+0x894>
 800b820:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b822:	2a00      	cmp	r2, #0
 800b824:	f000 80a6 	beq.w	800b974 <_dtoa_r+0x88c>
 800b828:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b82c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b82e:	9f06      	ldr	r7, [sp, #24]
 800b830:	9a06      	ldr	r2, [sp, #24]
 800b832:	2101      	movs	r1, #1
 800b834:	441a      	add	r2, r3
 800b836:	9206      	str	r2, [sp, #24]
 800b838:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b83a:	4628      	mov	r0, r5
 800b83c:	441a      	add	r2, r3
 800b83e:	9209      	str	r2, [sp, #36]	; 0x24
 800b840:	f000 fb5e 	bl	800bf00 <__i2b>
 800b844:	4606      	mov	r6, r0
 800b846:	2f00      	cmp	r7, #0
 800b848:	dd0c      	ble.n	800b864 <_dtoa_r+0x77c>
 800b84a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	dd09      	ble.n	800b864 <_dtoa_r+0x77c>
 800b850:	42bb      	cmp	r3, r7
 800b852:	bfa8      	it	ge
 800b854:	463b      	movge	r3, r7
 800b856:	9a06      	ldr	r2, [sp, #24]
 800b858:	1aff      	subs	r7, r7, r3
 800b85a:	1ad2      	subs	r2, r2, r3
 800b85c:	9206      	str	r2, [sp, #24]
 800b85e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	9309      	str	r3, [sp, #36]	; 0x24
 800b864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b866:	b1f3      	cbz	r3, 800b8a6 <_dtoa_r+0x7be>
 800b868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f000 80a8 	beq.w	800b9c0 <_dtoa_r+0x8d8>
 800b870:	2c00      	cmp	r4, #0
 800b872:	dd10      	ble.n	800b896 <_dtoa_r+0x7ae>
 800b874:	4631      	mov	r1, r6
 800b876:	4622      	mov	r2, r4
 800b878:	4628      	mov	r0, r5
 800b87a:	f000 fbff 	bl	800c07c <__pow5mult>
 800b87e:	465a      	mov	r2, fp
 800b880:	4601      	mov	r1, r0
 800b882:	4606      	mov	r6, r0
 800b884:	4628      	mov	r0, r5
 800b886:	f000 fb51 	bl	800bf2c <__multiply>
 800b88a:	4680      	mov	r8, r0
 800b88c:	4659      	mov	r1, fp
 800b88e:	4628      	mov	r0, r5
 800b890:	f000 fa80 	bl	800bd94 <_Bfree>
 800b894:	46c3      	mov	fp, r8
 800b896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b898:	1b1a      	subs	r2, r3, r4
 800b89a:	d004      	beq.n	800b8a6 <_dtoa_r+0x7be>
 800b89c:	4659      	mov	r1, fp
 800b89e:	4628      	mov	r0, r5
 800b8a0:	f000 fbec 	bl	800c07c <__pow5mult>
 800b8a4:	4683      	mov	fp, r0
 800b8a6:	2101      	movs	r1, #1
 800b8a8:	4628      	mov	r0, r5
 800b8aa:	f000 fb29 	bl	800bf00 <__i2b>
 800b8ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f340 8086 	ble.w	800b9c4 <_dtoa_r+0x8dc>
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	4628      	mov	r0, r5
 800b8be:	f000 fbdd 	bl	800c07c <__pow5mult>
 800b8c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	dd7f      	ble.n	800b9ca <_dtoa_r+0x8e2>
 800b8ca:	f04f 0800 	mov.w	r8, #0
 800b8ce:	6923      	ldr	r3, [r4, #16]
 800b8d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b8d4:	6918      	ldr	r0, [r3, #16]
 800b8d6:	f000 fac5 	bl	800be64 <__hi0bits>
 800b8da:	f1c0 0020 	rsb	r0, r0, #32
 800b8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8e0:	4418      	add	r0, r3
 800b8e2:	f010 001f 	ands.w	r0, r0, #31
 800b8e6:	f000 8092 	beq.w	800ba0e <_dtoa_r+0x926>
 800b8ea:	f1c0 0320 	rsb	r3, r0, #32
 800b8ee:	2b04      	cmp	r3, #4
 800b8f0:	f340 808a 	ble.w	800ba08 <_dtoa_r+0x920>
 800b8f4:	f1c0 001c 	rsb	r0, r0, #28
 800b8f8:	9b06      	ldr	r3, [sp, #24]
 800b8fa:	4407      	add	r7, r0
 800b8fc:	4403      	add	r3, r0
 800b8fe:	9306      	str	r3, [sp, #24]
 800b900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b902:	4403      	add	r3, r0
 800b904:	9309      	str	r3, [sp, #36]	; 0x24
 800b906:	9b06      	ldr	r3, [sp, #24]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	dd05      	ble.n	800b918 <_dtoa_r+0x830>
 800b90c:	4659      	mov	r1, fp
 800b90e:	461a      	mov	r2, r3
 800b910:	4628      	mov	r0, r5
 800b912:	f000 fc0d 	bl	800c130 <__lshift>
 800b916:	4683      	mov	fp, r0
 800b918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	dd05      	ble.n	800b92a <_dtoa_r+0x842>
 800b91e:	4621      	mov	r1, r4
 800b920:	461a      	mov	r2, r3
 800b922:	4628      	mov	r0, r5
 800b924:	f000 fc04 	bl	800c130 <__lshift>
 800b928:	4604      	mov	r4, r0
 800b92a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d070      	beq.n	800ba12 <_dtoa_r+0x92a>
 800b930:	4621      	mov	r1, r4
 800b932:	4658      	mov	r0, fp
 800b934:	f000 fc6c 	bl	800c210 <__mcmp>
 800b938:	2800      	cmp	r0, #0
 800b93a:	da6a      	bge.n	800ba12 <_dtoa_r+0x92a>
 800b93c:	2300      	movs	r3, #0
 800b93e:	4659      	mov	r1, fp
 800b940:	220a      	movs	r2, #10
 800b942:	4628      	mov	r0, r5
 800b944:	f000 fa48 	bl	800bdd8 <__multadd>
 800b948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b94a:	4683      	mov	fp, r0
 800b94c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b950:	2b00      	cmp	r3, #0
 800b952:	f000 8194 	beq.w	800bc7e <_dtoa_r+0xb96>
 800b956:	4631      	mov	r1, r6
 800b958:	2300      	movs	r3, #0
 800b95a:	220a      	movs	r2, #10
 800b95c:	4628      	mov	r0, r5
 800b95e:	f000 fa3b 	bl	800bdd8 <__multadd>
 800b962:	f1b9 0f00 	cmp.w	r9, #0
 800b966:	4606      	mov	r6, r0
 800b968:	f300 8093 	bgt.w	800ba92 <_dtoa_r+0x9aa>
 800b96c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b96e:	2b02      	cmp	r3, #2
 800b970:	dc57      	bgt.n	800ba22 <_dtoa_r+0x93a>
 800b972:	e08e      	b.n	800ba92 <_dtoa_r+0x9aa>
 800b974:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b976:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b97a:	e757      	b.n	800b82c <_dtoa_r+0x744>
 800b97c:	9b08      	ldr	r3, [sp, #32]
 800b97e:	1e5c      	subs	r4, r3, #1
 800b980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b982:	42a3      	cmp	r3, r4
 800b984:	bfb7      	itett	lt
 800b986:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b988:	1b1c      	subge	r4, r3, r4
 800b98a:	1ae2      	sublt	r2, r4, r3
 800b98c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b98e:	bfbe      	ittt	lt
 800b990:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b992:	189b      	addlt	r3, r3, r2
 800b994:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b996:	9b08      	ldr	r3, [sp, #32]
 800b998:	bfb8      	it	lt
 800b99a:	2400      	movlt	r4, #0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	bfbb      	ittet	lt
 800b9a0:	9b06      	ldrlt	r3, [sp, #24]
 800b9a2:	9a08      	ldrlt	r2, [sp, #32]
 800b9a4:	9f06      	ldrge	r7, [sp, #24]
 800b9a6:	1a9f      	sublt	r7, r3, r2
 800b9a8:	bfac      	ite	ge
 800b9aa:	9b08      	ldrge	r3, [sp, #32]
 800b9ac:	2300      	movlt	r3, #0
 800b9ae:	e73f      	b.n	800b830 <_dtoa_r+0x748>
 800b9b0:	3fe00000 	.word	0x3fe00000
 800b9b4:	40240000 	.word	0x40240000
 800b9b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b9ba:	9f06      	ldr	r7, [sp, #24]
 800b9bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b9be:	e742      	b.n	800b846 <_dtoa_r+0x75e>
 800b9c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9c2:	e76b      	b.n	800b89c <_dtoa_r+0x7b4>
 800b9c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	dc19      	bgt.n	800b9fe <_dtoa_r+0x916>
 800b9ca:	9b04      	ldr	r3, [sp, #16]
 800b9cc:	b9bb      	cbnz	r3, 800b9fe <_dtoa_r+0x916>
 800b9ce:	9b05      	ldr	r3, [sp, #20]
 800b9d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9d4:	b99b      	cbnz	r3, 800b9fe <_dtoa_r+0x916>
 800b9d6:	9b05      	ldr	r3, [sp, #20]
 800b9d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b9dc:	0d1b      	lsrs	r3, r3, #20
 800b9de:	051b      	lsls	r3, r3, #20
 800b9e0:	b183      	cbz	r3, 800ba04 <_dtoa_r+0x91c>
 800b9e2:	f04f 0801 	mov.w	r8, #1
 800b9e6:	9b06      	ldr	r3, [sp, #24]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	9306      	str	r3, [sp, #24]
 800b9ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b9f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f47f af6a 	bne.w	800b8ce <_dtoa_r+0x7e6>
 800b9fa:	2001      	movs	r0, #1
 800b9fc:	e76f      	b.n	800b8de <_dtoa_r+0x7f6>
 800b9fe:	f04f 0800 	mov.w	r8, #0
 800ba02:	e7f6      	b.n	800b9f2 <_dtoa_r+0x90a>
 800ba04:	4698      	mov	r8, r3
 800ba06:	e7f4      	b.n	800b9f2 <_dtoa_r+0x90a>
 800ba08:	f43f af7d 	beq.w	800b906 <_dtoa_r+0x81e>
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	301c      	adds	r0, #28
 800ba10:	e772      	b.n	800b8f8 <_dtoa_r+0x810>
 800ba12:	9b08      	ldr	r3, [sp, #32]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	dc36      	bgt.n	800ba86 <_dtoa_r+0x99e>
 800ba18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	dd33      	ble.n	800ba86 <_dtoa_r+0x99e>
 800ba1e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba22:	f1b9 0f00 	cmp.w	r9, #0
 800ba26:	d10d      	bne.n	800ba44 <_dtoa_r+0x95c>
 800ba28:	4621      	mov	r1, r4
 800ba2a:	464b      	mov	r3, r9
 800ba2c:	2205      	movs	r2, #5
 800ba2e:	4628      	mov	r0, r5
 800ba30:	f000 f9d2 	bl	800bdd8 <__multadd>
 800ba34:	4601      	mov	r1, r0
 800ba36:	4604      	mov	r4, r0
 800ba38:	4658      	mov	r0, fp
 800ba3a:	f000 fbe9 	bl	800c210 <__mcmp>
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	f73f adb8 	bgt.w	800b5b4 <_dtoa_r+0x4cc>
 800ba44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ba46:	9f03      	ldr	r7, [sp, #12]
 800ba48:	ea6f 0a03 	mvn.w	sl, r3
 800ba4c:	f04f 0800 	mov.w	r8, #0
 800ba50:	4621      	mov	r1, r4
 800ba52:	4628      	mov	r0, r5
 800ba54:	f000 f99e 	bl	800bd94 <_Bfree>
 800ba58:	2e00      	cmp	r6, #0
 800ba5a:	f43f aea7 	beq.w	800b7ac <_dtoa_r+0x6c4>
 800ba5e:	f1b8 0f00 	cmp.w	r8, #0
 800ba62:	d005      	beq.n	800ba70 <_dtoa_r+0x988>
 800ba64:	45b0      	cmp	r8, r6
 800ba66:	d003      	beq.n	800ba70 <_dtoa_r+0x988>
 800ba68:	4641      	mov	r1, r8
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	f000 f992 	bl	800bd94 <_Bfree>
 800ba70:	4631      	mov	r1, r6
 800ba72:	4628      	mov	r0, r5
 800ba74:	f000 f98e 	bl	800bd94 <_Bfree>
 800ba78:	e698      	b.n	800b7ac <_dtoa_r+0x6c4>
 800ba7a:	2400      	movs	r4, #0
 800ba7c:	4626      	mov	r6, r4
 800ba7e:	e7e1      	b.n	800ba44 <_dtoa_r+0x95c>
 800ba80:	46c2      	mov	sl, r8
 800ba82:	4626      	mov	r6, r4
 800ba84:	e596      	b.n	800b5b4 <_dtoa_r+0x4cc>
 800ba86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	f000 80fd 	beq.w	800bc8c <_dtoa_r+0xba4>
 800ba92:	2f00      	cmp	r7, #0
 800ba94:	dd05      	ble.n	800baa2 <_dtoa_r+0x9ba>
 800ba96:	4631      	mov	r1, r6
 800ba98:	463a      	mov	r2, r7
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	f000 fb48 	bl	800c130 <__lshift>
 800baa0:	4606      	mov	r6, r0
 800baa2:	f1b8 0f00 	cmp.w	r8, #0
 800baa6:	d05c      	beq.n	800bb62 <_dtoa_r+0xa7a>
 800baa8:	4628      	mov	r0, r5
 800baaa:	6871      	ldr	r1, [r6, #4]
 800baac:	f000 f932 	bl	800bd14 <_Balloc>
 800bab0:	4607      	mov	r7, r0
 800bab2:	b928      	cbnz	r0, 800bac0 <_dtoa_r+0x9d8>
 800bab4:	4602      	mov	r2, r0
 800bab6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800baba:	4b7f      	ldr	r3, [pc, #508]	; (800bcb8 <_dtoa_r+0xbd0>)
 800babc:	f7ff bb28 	b.w	800b110 <_dtoa_r+0x28>
 800bac0:	6932      	ldr	r2, [r6, #16]
 800bac2:	f106 010c 	add.w	r1, r6, #12
 800bac6:	3202      	adds	r2, #2
 800bac8:	0092      	lsls	r2, r2, #2
 800baca:	300c      	adds	r0, #12
 800bacc:	f000 f914 	bl	800bcf8 <memcpy>
 800bad0:	2201      	movs	r2, #1
 800bad2:	4639      	mov	r1, r7
 800bad4:	4628      	mov	r0, r5
 800bad6:	f000 fb2b 	bl	800c130 <__lshift>
 800bada:	46b0      	mov	r8, r6
 800badc:	4606      	mov	r6, r0
 800bade:	9b03      	ldr	r3, [sp, #12]
 800bae0:	3301      	adds	r3, #1
 800bae2:	9308      	str	r3, [sp, #32]
 800bae4:	9b03      	ldr	r3, [sp, #12]
 800bae6:	444b      	add	r3, r9
 800bae8:	930a      	str	r3, [sp, #40]	; 0x28
 800baea:	9b04      	ldr	r3, [sp, #16]
 800baec:	f003 0301 	and.w	r3, r3, #1
 800baf0:	9309      	str	r3, [sp, #36]	; 0x24
 800baf2:	9b08      	ldr	r3, [sp, #32]
 800baf4:	4621      	mov	r1, r4
 800baf6:	3b01      	subs	r3, #1
 800baf8:	4658      	mov	r0, fp
 800bafa:	9304      	str	r3, [sp, #16]
 800bafc:	f7ff fa68 	bl	800afd0 <quorem>
 800bb00:	4603      	mov	r3, r0
 800bb02:	4641      	mov	r1, r8
 800bb04:	3330      	adds	r3, #48	; 0x30
 800bb06:	9006      	str	r0, [sp, #24]
 800bb08:	4658      	mov	r0, fp
 800bb0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb0c:	f000 fb80 	bl	800c210 <__mcmp>
 800bb10:	4632      	mov	r2, r6
 800bb12:	4681      	mov	r9, r0
 800bb14:	4621      	mov	r1, r4
 800bb16:	4628      	mov	r0, r5
 800bb18:	f000 fb96 	bl	800c248 <__mdiff>
 800bb1c:	68c2      	ldr	r2, [r0, #12]
 800bb1e:	4607      	mov	r7, r0
 800bb20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb22:	bb02      	cbnz	r2, 800bb66 <_dtoa_r+0xa7e>
 800bb24:	4601      	mov	r1, r0
 800bb26:	4658      	mov	r0, fp
 800bb28:	f000 fb72 	bl	800c210 <__mcmp>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb30:	4639      	mov	r1, r7
 800bb32:	4628      	mov	r0, r5
 800bb34:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800bb38:	f000 f92c 	bl	800bd94 <_Bfree>
 800bb3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb40:	9f08      	ldr	r7, [sp, #32]
 800bb42:	ea43 0102 	orr.w	r1, r3, r2
 800bb46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb48:	430b      	orrs	r3, r1
 800bb4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb4c:	d10d      	bne.n	800bb6a <_dtoa_r+0xa82>
 800bb4e:	2b39      	cmp	r3, #57	; 0x39
 800bb50:	d029      	beq.n	800bba6 <_dtoa_r+0xabe>
 800bb52:	f1b9 0f00 	cmp.w	r9, #0
 800bb56:	dd01      	ble.n	800bb5c <_dtoa_r+0xa74>
 800bb58:	9b06      	ldr	r3, [sp, #24]
 800bb5a:	3331      	adds	r3, #49	; 0x31
 800bb5c:	9a04      	ldr	r2, [sp, #16]
 800bb5e:	7013      	strb	r3, [r2, #0]
 800bb60:	e776      	b.n	800ba50 <_dtoa_r+0x968>
 800bb62:	4630      	mov	r0, r6
 800bb64:	e7b9      	b.n	800bada <_dtoa_r+0x9f2>
 800bb66:	2201      	movs	r2, #1
 800bb68:	e7e2      	b.n	800bb30 <_dtoa_r+0xa48>
 800bb6a:	f1b9 0f00 	cmp.w	r9, #0
 800bb6e:	db06      	blt.n	800bb7e <_dtoa_r+0xa96>
 800bb70:	9922      	ldr	r1, [sp, #136]	; 0x88
 800bb72:	ea41 0909 	orr.w	r9, r1, r9
 800bb76:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb78:	ea59 0101 	orrs.w	r1, r9, r1
 800bb7c:	d120      	bne.n	800bbc0 <_dtoa_r+0xad8>
 800bb7e:	2a00      	cmp	r2, #0
 800bb80:	ddec      	ble.n	800bb5c <_dtoa_r+0xa74>
 800bb82:	4659      	mov	r1, fp
 800bb84:	2201      	movs	r2, #1
 800bb86:	4628      	mov	r0, r5
 800bb88:	9308      	str	r3, [sp, #32]
 800bb8a:	f000 fad1 	bl	800c130 <__lshift>
 800bb8e:	4621      	mov	r1, r4
 800bb90:	4683      	mov	fp, r0
 800bb92:	f000 fb3d 	bl	800c210 <__mcmp>
 800bb96:	2800      	cmp	r0, #0
 800bb98:	9b08      	ldr	r3, [sp, #32]
 800bb9a:	dc02      	bgt.n	800bba2 <_dtoa_r+0xaba>
 800bb9c:	d1de      	bne.n	800bb5c <_dtoa_r+0xa74>
 800bb9e:	07da      	lsls	r2, r3, #31
 800bba0:	d5dc      	bpl.n	800bb5c <_dtoa_r+0xa74>
 800bba2:	2b39      	cmp	r3, #57	; 0x39
 800bba4:	d1d8      	bne.n	800bb58 <_dtoa_r+0xa70>
 800bba6:	2339      	movs	r3, #57	; 0x39
 800bba8:	9a04      	ldr	r2, [sp, #16]
 800bbaa:	7013      	strb	r3, [r2, #0]
 800bbac:	463b      	mov	r3, r7
 800bbae:	461f      	mov	r7, r3
 800bbb0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800bbb4:	3b01      	subs	r3, #1
 800bbb6:	2a39      	cmp	r2, #57	; 0x39
 800bbb8:	d050      	beq.n	800bc5c <_dtoa_r+0xb74>
 800bbba:	3201      	adds	r2, #1
 800bbbc:	701a      	strb	r2, [r3, #0]
 800bbbe:	e747      	b.n	800ba50 <_dtoa_r+0x968>
 800bbc0:	2a00      	cmp	r2, #0
 800bbc2:	dd03      	ble.n	800bbcc <_dtoa_r+0xae4>
 800bbc4:	2b39      	cmp	r3, #57	; 0x39
 800bbc6:	d0ee      	beq.n	800bba6 <_dtoa_r+0xabe>
 800bbc8:	3301      	adds	r3, #1
 800bbca:	e7c7      	b.n	800bb5c <_dtoa_r+0xa74>
 800bbcc:	9a08      	ldr	r2, [sp, #32]
 800bbce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bbd0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bbd4:	428a      	cmp	r2, r1
 800bbd6:	d02a      	beq.n	800bc2e <_dtoa_r+0xb46>
 800bbd8:	4659      	mov	r1, fp
 800bbda:	2300      	movs	r3, #0
 800bbdc:	220a      	movs	r2, #10
 800bbde:	4628      	mov	r0, r5
 800bbe0:	f000 f8fa 	bl	800bdd8 <__multadd>
 800bbe4:	45b0      	cmp	r8, r6
 800bbe6:	4683      	mov	fp, r0
 800bbe8:	f04f 0300 	mov.w	r3, #0
 800bbec:	f04f 020a 	mov.w	r2, #10
 800bbf0:	4641      	mov	r1, r8
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	d107      	bne.n	800bc06 <_dtoa_r+0xb1e>
 800bbf6:	f000 f8ef 	bl	800bdd8 <__multadd>
 800bbfa:	4680      	mov	r8, r0
 800bbfc:	4606      	mov	r6, r0
 800bbfe:	9b08      	ldr	r3, [sp, #32]
 800bc00:	3301      	adds	r3, #1
 800bc02:	9308      	str	r3, [sp, #32]
 800bc04:	e775      	b.n	800baf2 <_dtoa_r+0xa0a>
 800bc06:	f000 f8e7 	bl	800bdd8 <__multadd>
 800bc0a:	4631      	mov	r1, r6
 800bc0c:	4680      	mov	r8, r0
 800bc0e:	2300      	movs	r3, #0
 800bc10:	220a      	movs	r2, #10
 800bc12:	4628      	mov	r0, r5
 800bc14:	f000 f8e0 	bl	800bdd8 <__multadd>
 800bc18:	4606      	mov	r6, r0
 800bc1a:	e7f0      	b.n	800bbfe <_dtoa_r+0xb16>
 800bc1c:	f1b9 0f00 	cmp.w	r9, #0
 800bc20:	bfcc      	ite	gt
 800bc22:	464f      	movgt	r7, r9
 800bc24:	2701      	movle	r7, #1
 800bc26:	f04f 0800 	mov.w	r8, #0
 800bc2a:	9a03      	ldr	r2, [sp, #12]
 800bc2c:	4417      	add	r7, r2
 800bc2e:	4659      	mov	r1, fp
 800bc30:	2201      	movs	r2, #1
 800bc32:	4628      	mov	r0, r5
 800bc34:	9308      	str	r3, [sp, #32]
 800bc36:	f000 fa7b 	bl	800c130 <__lshift>
 800bc3a:	4621      	mov	r1, r4
 800bc3c:	4683      	mov	fp, r0
 800bc3e:	f000 fae7 	bl	800c210 <__mcmp>
 800bc42:	2800      	cmp	r0, #0
 800bc44:	dcb2      	bgt.n	800bbac <_dtoa_r+0xac4>
 800bc46:	d102      	bne.n	800bc4e <_dtoa_r+0xb66>
 800bc48:	9b08      	ldr	r3, [sp, #32]
 800bc4a:	07db      	lsls	r3, r3, #31
 800bc4c:	d4ae      	bmi.n	800bbac <_dtoa_r+0xac4>
 800bc4e:	463b      	mov	r3, r7
 800bc50:	461f      	mov	r7, r3
 800bc52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc56:	2a30      	cmp	r2, #48	; 0x30
 800bc58:	d0fa      	beq.n	800bc50 <_dtoa_r+0xb68>
 800bc5a:	e6f9      	b.n	800ba50 <_dtoa_r+0x968>
 800bc5c:	9a03      	ldr	r2, [sp, #12]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d1a5      	bne.n	800bbae <_dtoa_r+0xac6>
 800bc62:	2331      	movs	r3, #49	; 0x31
 800bc64:	f10a 0a01 	add.w	sl, sl, #1
 800bc68:	e779      	b.n	800bb5e <_dtoa_r+0xa76>
 800bc6a:	4b14      	ldr	r3, [pc, #80]	; (800bcbc <_dtoa_r+0xbd4>)
 800bc6c:	f7ff baa8 	b.w	800b1c0 <_dtoa_r+0xd8>
 800bc70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	f47f aa81 	bne.w	800b17a <_dtoa_r+0x92>
 800bc78:	4b11      	ldr	r3, [pc, #68]	; (800bcc0 <_dtoa_r+0xbd8>)
 800bc7a:	f7ff baa1 	b.w	800b1c0 <_dtoa_r+0xd8>
 800bc7e:	f1b9 0f00 	cmp.w	r9, #0
 800bc82:	dc03      	bgt.n	800bc8c <_dtoa_r+0xba4>
 800bc84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc86:	2b02      	cmp	r3, #2
 800bc88:	f73f aecb 	bgt.w	800ba22 <_dtoa_r+0x93a>
 800bc8c:	9f03      	ldr	r7, [sp, #12]
 800bc8e:	4621      	mov	r1, r4
 800bc90:	4658      	mov	r0, fp
 800bc92:	f7ff f99d 	bl	800afd0 <quorem>
 800bc96:	9a03      	ldr	r2, [sp, #12]
 800bc98:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bc9c:	f807 3b01 	strb.w	r3, [r7], #1
 800bca0:	1aba      	subs	r2, r7, r2
 800bca2:	4591      	cmp	r9, r2
 800bca4:	ddba      	ble.n	800bc1c <_dtoa_r+0xb34>
 800bca6:	4659      	mov	r1, fp
 800bca8:	2300      	movs	r3, #0
 800bcaa:	220a      	movs	r2, #10
 800bcac:	4628      	mov	r0, r5
 800bcae:	f000 f893 	bl	800bdd8 <__multadd>
 800bcb2:	4683      	mov	fp, r0
 800bcb4:	e7eb      	b.n	800bc8e <_dtoa_r+0xba6>
 800bcb6:	bf00      	nop
 800bcb8:	0800d64f 	.word	0x0800d64f
 800bcbc:	0800d5ac 	.word	0x0800d5ac
 800bcc0:	0800d5d0 	.word	0x0800d5d0

0800bcc4 <_localeconv_r>:
 800bcc4:	4800      	ldr	r0, [pc, #0]	; (800bcc8 <_localeconv_r+0x4>)
 800bcc6:	4770      	bx	lr
 800bcc8:	200002d0 	.word	0x200002d0

0800bccc <malloc>:
 800bccc:	4b02      	ldr	r3, [pc, #8]	; (800bcd8 <malloc+0xc>)
 800bcce:	4601      	mov	r1, r0
 800bcd0:	6818      	ldr	r0, [r3, #0]
 800bcd2:	f000 bc1d 	b.w	800c510 <_malloc_r>
 800bcd6:	bf00      	nop
 800bcd8:	2000017c 	.word	0x2000017c

0800bcdc <memchr>:
 800bcdc:	4603      	mov	r3, r0
 800bcde:	b510      	push	{r4, lr}
 800bce0:	b2c9      	uxtb	r1, r1
 800bce2:	4402      	add	r2, r0
 800bce4:	4293      	cmp	r3, r2
 800bce6:	4618      	mov	r0, r3
 800bce8:	d101      	bne.n	800bcee <memchr+0x12>
 800bcea:	2000      	movs	r0, #0
 800bcec:	e003      	b.n	800bcf6 <memchr+0x1a>
 800bcee:	7804      	ldrb	r4, [r0, #0]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	428c      	cmp	r4, r1
 800bcf4:	d1f6      	bne.n	800bce4 <memchr+0x8>
 800bcf6:	bd10      	pop	{r4, pc}

0800bcf8 <memcpy>:
 800bcf8:	440a      	add	r2, r1
 800bcfa:	4291      	cmp	r1, r2
 800bcfc:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd00:	d100      	bne.n	800bd04 <memcpy+0xc>
 800bd02:	4770      	bx	lr
 800bd04:	b510      	push	{r4, lr}
 800bd06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd0a:	4291      	cmp	r1, r2
 800bd0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd10:	d1f9      	bne.n	800bd06 <memcpy+0xe>
 800bd12:	bd10      	pop	{r4, pc}

0800bd14 <_Balloc>:
 800bd14:	b570      	push	{r4, r5, r6, lr}
 800bd16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd18:	4604      	mov	r4, r0
 800bd1a:	460d      	mov	r5, r1
 800bd1c:	b976      	cbnz	r6, 800bd3c <_Balloc+0x28>
 800bd1e:	2010      	movs	r0, #16
 800bd20:	f7ff ffd4 	bl	800bccc <malloc>
 800bd24:	4602      	mov	r2, r0
 800bd26:	6260      	str	r0, [r4, #36]	; 0x24
 800bd28:	b920      	cbnz	r0, 800bd34 <_Balloc+0x20>
 800bd2a:	2166      	movs	r1, #102	; 0x66
 800bd2c:	4b17      	ldr	r3, [pc, #92]	; (800bd8c <_Balloc+0x78>)
 800bd2e:	4818      	ldr	r0, [pc, #96]	; (800bd90 <_Balloc+0x7c>)
 800bd30:	f000 fdce 	bl	800c8d0 <__assert_func>
 800bd34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd38:	6006      	str	r6, [r0, #0]
 800bd3a:	60c6      	str	r6, [r0, #12]
 800bd3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bd3e:	68f3      	ldr	r3, [r6, #12]
 800bd40:	b183      	cbz	r3, 800bd64 <_Balloc+0x50>
 800bd42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd44:	68db      	ldr	r3, [r3, #12]
 800bd46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd4a:	b9b8      	cbnz	r0, 800bd7c <_Balloc+0x68>
 800bd4c:	2101      	movs	r1, #1
 800bd4e:	fa01 f605 	lsl.w	r6, r1, r5
 800bd52:	1d72      	adds	r2, r6, #5
 800bd54:	4620      	mov	r0, r4
 800bd56:	0092      	lsls	r2, r2, #2
 800bd58:	f000 fb5e 	bl	800c418 <_calloc_r>
 800bd5c:	b160      	cbz	r0, 800bd78 <_Balloc+0x64>
 800bd5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd62:	e00e      	b.n	800bd82 <_Balloc+0x6e>
 800bd64:	2221      	movs	r2, #33	; 0x21
 800bd66:	2104      	movs	r1, #4
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f000 fb55 	bl	800c418 <_calloc_r>
 800bd6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd70:	60f0      	str	r0, [r6, #12]
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d1e4      	bne.n	800bd42 <_Balloc+0x2e>
 800bd78:	2000      	movs	r0, #0
 800bd7a:	bd70      	pop	{r4, r5, r6, pc}
 800bd7c:	6802      	ldr	r2, [r0, #0]
 800bd7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd82:	2300      	movs	r3, #0
 800bd84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd88:	e7f7      	b.n	800bd7a <_Balloc+0x66>
 800bd8a:	bf00      	nop
 800bd8c:	0800d5dd 	.word	0x0800d5dd
 800bd90:	0800d660 	.word	0x0800d660

0800bd94 <_Bfree>:
 800bd94:	b570      	push	{r4, r5, r6, lr}
 800bd96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd98:	4605      	mov	r5, r0
 800bd9a:	460c      	mov	r4, r1
 800bd9c:	b976      	cbnz	r6, 800bdbc <_Bfree+0x28>
 800bd9e:	2010      	movs	r0, #16
 800bda0:	f7ff ff94 	bl	800bccc <malloc>
 800bda4:	4602      	mov	r2, r0
 800bda6:	6268      	str	r0, [r5, #36]	; 0x24
 800bda8:	b920      	cbnz	r0, 800bdb4 <_Bfree+0x20>
 800bdaa:	218a      	movs	r1, #138	; 0x8a
 800bdac:	4b08      	ldr	r3, [pc, #32]	; (800bdd0 <_Bfree+0x3c>)
 800bdae:	4809      	ldr	r0, [pc, #36]	; (800bdd4 <_Bfree+0x40>)
 800bdb0:	f000 fd8e 	bl	800c8d0 <__assert_func>
 800bdb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdb8:	6006      	str	r6, [r0, #0]
 800bdba:	60c6      	str	r6, [r0, #12]
 800bdbc:	b13c      	cbz	r4, 800bdce <_Bfree+0x3a>
 800bdbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bdc0:	6862      	ldr	r2, [r4, #4]
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bdc8:	6021      	str	r1, [r4, #0]
 800bdca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bdce:	bd70      	pop	{r4, r5, r6, pc}
 800bdd0:	0800d5dd 	.word	0x0800d5dd
 800bdd4:	0800d660 	.word	0x0800d660

0800bdd8 <__multadd>:
 800bdd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bddc:	4607      	mov	r7, r0
 800bdde:	460c      	mov	r4, r1
 800bde0:	461e      	mov	r6, r3
 800bde2:	2000      	movs	r0, #0
 800bde4:	690d      	ldr	r5, [r1, #16]
 800bde6:	f101 0c14 	add.w	ip, r1, #20
 800bdea:	f8dc 3000 	ldr.w	r3, [ip]
 800bdee:	3001      	adds	r0, #1
 800bdf0:	b299      	uxth	r1, r3
 800bdf2:	fb02 6101 	mla	r1, r2, r1, r6
 800bdf6:	0c1e      	lsrs	r6, r3, #16
 800bdf8:	0c0b      	lsrs	r3, r1, #16
 800bdfa:	fb02 3306 	mla	r3, r2, r6, r3
 800bdfe:	b289      	uxth	r1, r1
 800be00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be04:	4285      	cmp	r5, r0
 800be06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be0a:	f84c 1b04 	str.w	r1, [ip], #4
 800be0e:	dcec      	bgt.n	800bdea <__multadd+0x12>
 800be10:	b30e      	cbz	r6, 800be56 <__multadd+0x7e>
 800be12:	68a3      	ldr	r3, [r4, #8]
 800be14:	42ab      	cmp	r3, r5
 800be16:	dc19      	bgt.n	800be4c <__multadd+0x74>
 800be18:	6861      	ldr	r1, [r4, #4]
 800be1a:	4638      	mov	r0, r7
 800be1c:	3101      	adds	r1, #1
 800be1e:	f7ff ff79 	bl	800bd14 <_Balloc>
 800be22:	4680      	mov	r8, r0
 800be24:	b928      	cbnz	r0, 800be32 <__multadd+0x5a>
 800be26:	4602      	mov	r2, r0
 800be28:	21b5      	movs	r1, #181	; 0xb5
 800be2a:	4b0c      	ldr	r3, [pc, #48]	; (800be5c <__multadd+0x84>)
 800be2c:	480c      	ldr	r0, [pc, #48]	; (800be60 <__multadd+0x88>)
 800be2e:	f000 fd4f 	bl	800c8d0 <__assert_func>
 800be32:	6922      	ldr	r2, [r4, #16]
 800be34:	f104 010c 	add.w	r1, r4, #12
 800be38:	3202      	adds	r2, #2
 800be3a:	0092      	lsls	r2, r2, #2
 800be3c:	300c      	adds	r0, #12
 800be3e:	f7ff ff5b 	bl	800bcf8 <memcpy>
 800be42:	4621      	mov	r1, r4
 800be44:	4638      	mov	r0, r7
 800be46:	f7ff ffa5 	bl	800bd94 <_Bfree>
 800be4a:	4644      	mov	r4, r8
 800be4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be50:	3501      	adds	r5, #1
 800be52:	615e      	str	r6, [r3, #20]
 800be54:	6125      	str	r5, [r4, #16]
 800be56:	4620      	mov	r0, r4
 800be58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be5c:	0800d64f 	.word	0x0800d64f
 800be60:	0800d660 	.word	0x0800d660

0800be64 <__hi0bits>:
 800be64:	0c02      	lsrs	r2, r0, #16
 800be66:	0412      	lsls	r2, r2, #16
 800be68:	4603      	mov	r3, r0
 800be6a:	b9ca      	cbnz	r2, 800bea0 <__hi0bits+0x3c>
 800be6c:	0403      	lsls	r3, r0, #16
 800be6e:	2010      	movs	r0, #16
 800be70:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800be74:	bf04      	itt	eq
 800be76:	021b      	lsleq	r3, r3, #8
 800be78:	3008      	addeq	r0, #8
 800be7a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800be7e:	bf04      	itt	eq
 800be80:	011b      	lsleq	r3, r3, #4
 800be82:	3004      	addeq	r0, #4
 800be84:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800be88:	bf04      	itt	eq
 800be8a:	009b      	lsleq	r3, r3, #2
 800be8c:	3002      	addeq	r0, #2
 800be8e:	2b00      	cmp	r3, #0
 800be90:	db05      	blt.n	800be9e <__hi0bits+0x3a>
 800be92:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800be96:	f100 0001 	add.w	r0, r0, #1
 800be9a:	bf08      	it	eq
 800be9c:	2020      	moveq	r0, #32
 800be9e:	4770      	bx	lr
 800bea0:	2000      	movs	r0, #0
 800bea2:	e7e5      	b.n	800be70 <__hi0bits+0xc>

0800bea4 <__lo0bits>:
 800bea4:	6803      	ldr	r3, [r0, #0]
 800bea6:	4602      	mov	r2, r0
 800bea8:	f013 0007 	ands.w	r0, r3, #7
 800beac:	d00b      	beq.n	800bec6 <__lo0bits+0x22>
 800beae:	07d9      	lsls	r1, r3, #31
 800beb0:	d421      	bmi.n	800bef6 <__lo0bits+0x52>
 800beb2:	0798      	lsls	r0, r3, #30
 800beb4:	bf49      	itett	mi
 800beb6:	085b      	lsrmi	r3, r3, #1
 800beb8:	089b      	lsrpl	r3, r3, #2
 800beba:	2001      	movmi	r0, #1
 800bebc:	6013      	strmi	r3, [r2, #0]
 800bebe:	bf5c      	itt	pl
 800bec0:	2002      	movpl	r0, #2
 800bec2:	6013      	strpl	r3, [r2, #0]
 800bec4:	4770      	bx	lr
 800bec6:	b299      	uxth	r1, r3
 800bec8:	b909      	cbnz	r1, 800bece <__lo0bits+0x2a>
 800beca:	2010      	movs	r0, #16
 800becc:	0c1b      	lsrs	r3, r3, #16
 800bece:	b2d9      	uxtb	r1, r3
 800bed0:	b909      	cbnz	r1, 800bed6 <__lo0bits+0x32>
 800bed2:	3008      	adds	r0, #8
 800bed4:	0a1b      	lsrs	r3, r3, #8
 800bed6:	0719      	lsls	r1, r3, #28
 800bed8:	bf04      	itt	eq
 800beda:	091b      	lsreq	r3, r3, #4
 800bedc:	3004      	addeq	r0, #4
 800bede:	0799      	lsls	r1, r3, #30
 800bee0:	bf04      	itt	eq
 800bee2:	089b      	lsreq	r3, r3, #2
 800bee4:	3002      	addeq	r0, #2
 800bee6:	07d9      	lsls	r1, r3, #31
 800bee8:	d403      	bmi.n	800bef2 <__lo0bits+0x4e>
 800beea:	085b      	lsrs	r3, r3, #1
 800beec:	f100 0001 	add.w	r0, r0, #1
 800bef0:	d003      	beq.n	800befa <__lo0bits+0x56>
 800bef2:	6013      	str	r3, [r2, #0]
 800bef4:	4770      	bx	lr
 800bef6:	2000      	movs	r0, #0
 800bef8:	4770      	bx	lr
 800befa:	2020      	movs	r0, #32
 800befc:	4770      	bx	lr
	...

0800bf00 <__i2b>:
 800bf00:	b510      	push	{r4, lr}
 800bf02:	460c      	mov	r4, r1
 800bf04:	2101      	movs	r1, #1
 800bf06:	f7ff ff05 	bl	800bd14 <_Balloc>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	b928      	cbnz	r0, 800bf1a <__i2b+0x1a>
 800bf0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bf12:	4b04      	ldr	r3, [pc, #16]	; (800bf24 <__i2b+0x24>)
 800bf14:	4804      	ldr	r0, [pc, #16]	; (800bf28 <__i2b+0x28>)
 800bf16:	f000 fcdb 	bl	800c8d0 <__assert_func>
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	6144      	str	r4, [r0, #20]
 800bf1e:	6103      	str	r3, [r0, #16]
 800bf20:	bd10      	pop	{r4, pc}
 800bf22:	bf00      	nop
 800bf24:	0800d64f 	.word	0x0800d64f
 800bf28:	0800d660 	.word	0x0800d660

0800bf2c <__multiply>:
 800bf2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf30:	4691      	mov	r9, r2
 800bf32:	690a      	ldr	r2, [r1, #16]
 800bf34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf38:	460c      	mov	r4, r1
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	bfbe      	ittt	lt
 800bf3e:	460b      	movlt	r3, r1
 800bf40:	464c      	movlt	r4, r9
 800bf42:	4699      	movlt	r9, r3
 800bf44:	6927      	ldr	r7, [r4, #16]
 800bf46:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bf4a:	68a3      	ldr	r3, [r4, #8]
 800bf4c:	6861      	ldr	r1, [r4, #4]
 800bf4e:	eb07 060a 	add.w	r6, r7, sl
 800bf52:	42b3      	cmp	r3, r6
 800bf54:	b085      	sub	sp, #20
 800bf56:	bfb8      	it	lt
 800bf58:	3101      	addlt	r1, #1
 800bf5a:	f7ff fedb 	bl	800bd14 <_Balloc>
 800bf5e:	b930      	cbnz	r0, 800bf6e <__multiply+0x42>
 800bf60:	4602      	mov	r2, r0
 800bf62:	f240 115d 	movw	r1, #349	; 0x15d
 800bf66:	4b43      	ldr	r3, [pc, #268]	; (800c074 <__multiply+0x148>)
 800bf68:	4843      	ldr	r0, [pc, #268]	; (800c078 <__multiply+0x14c>)
 800bf6a:	f000 fcb1 	bl	800c8d0 <__assert_func>
 800bf6e:	f100 0514 	add.w	r5, r0, #20
 800bf72:	462b      	mov	r3, r5
 800bf74:	2200      	movs	r2, #0
 800bf76:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bf7a:	4543      	cmp	r3, r8
 800bf7c:	d321      	bcc.n	800bfc2 <__multiply+0x96>
 800bf7e:	f104 0314 	add.w	r3, r4, #20
 800bf82:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bf86:	f109 0314 	add.w	r3, r9, #20
 800bf8a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bf8e:	9202      	str	r2, [sp, #8]
 800bf90:	1b3a      	subs	r2, r7, r4
 800bf92:	3a15      	subs	r2, #21
 800bf94:	f022 0203 	bic.w	r2, r2, #3
 800bf98:	3204      	adds	r2, #4
 800bf9a:	f104 0115 	add.w	r1, r4, #21
 800bf9e:	428f      	cmp	r7, r1
 800bfa0:	bf38      	it	cc
 800bfa2:	2204      	movcc	r2, #4
 800bfa4:	9201      	str	r2, [sp, #4]
 800bfa6:	9a02      	ldr	r2, [sp, #8]
 800bfa8:	9303      	str	r3, [sp, #12]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d80c      	bhi.n	800bfc8 <__multiply+0x9c>
 800bfae:	2e00      	cmp	r6, #0
 800bfb0:	dd03      	ble.n	800bfba <__multiply+0x8e>
 800bfb2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d059      	beq.n	800c06e <__multiply+0x142>
 800bfba:	6106      	str	r6, [r0, #16]
 800bfbc:	b005      	add	sp, #20
 800bfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfc2:	f843 2b04 	str.w	r2, [r3], #4
 800bfc6:	e7d8      	b.n	800bf7a <__multiply+0x4e>
 800bfc8:	f8b3 a000 	ldrh.w	sl, [r3]
 800bfcc:	f1ba 0f00 	cmp.w	sl, #0
 800bfd0:	d023      	beq.n	800c01a <__multiply+0xee>
 800bfd2:	46a9      	mov	r9, r5
 800bfd4:	f04f 0c00 	mov.w	ip, #0
 800bfd8:	f104 0e14 	add.w	lr, r4, #20
 800bfdc:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bfe0:	f8d9 1000 	ldr.w	r1, [r9]
 800bfe4:	fa1f fb82 	uxth.w	fp, r2
 800bfe8:	b289      	uxth	r1, r1
 800bfea:	fb0a 110b 	mla	r1, sl, fp, r1
 800bfee:	4461      	add	r1, ip
 800bff0:	f8d9 c000 	ldr.w	ip, [r9]
 800bff4:	0c12      	lsrs	r2, r2, #16
 800bff6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bffa:	fb0a c202 	mla	r2, sl, r2, ip
 800bffe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c002:	b289      	uxth	r1, r1
 800c004:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c008:	4577      	cmp	r7, lr
 800c00a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c00e:	f849 1b04 	str.w	r1, [r9], #4
 800c012:	d8e3      	bhi.n	800bfdc <__multiply+0xb0>
 800c014:	9a01      	ldr	r2, [sp, #4]
 800c016:	f845 c002 	str.w	ip, [r5, r2]
 800c01a:	9a03      	ldr	r2, [sp, #12]
 800c01c:	3304      	adds	r3, #4
 800c01e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c022:	f1b9 0f00 	cmp.w	r9, #0
 800c026:	d020      	beq.n	800c06a <__multiply+0x13e>
 800c028:	46ae      	mov	lr, r5
 800c02a:	f04f 0a00 	mov.w	sl, #0
 800c02e:	6829      	ldr	r1, [r5, #0]
 800c030:	f104 0c14 	add.w	ip, r4, #20
 800c034:	f8bc b000 	ldrh.w	fp, [ip]
 800c038:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c03c:	b289      	uxth	r1, r1
 800c03e:	fb09 220b 	mla	r2, r9, fp, r2
 800c042:	4492      	add	sl, r2
 800c044:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c048:	f84e 1b04 	str.w	r1, [lr], #4
 800c04c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c050:	f8be 1000 	ldrh.w	r1, [lr]
 800c054:	0c12      	lsrs	r2, r2, #16
 800c056:	fb09 1102 	mla	r1, r9, r2, r1
 800c05a:	4567      	cmp	r7, ip
 800c05c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c060:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c064:	d8e6      	bhi.n	800c034 <__multiply+0x108>
 800c066:	9a01      	ldr	r2, [sp, #4]
 800c068:	50a9      	str	r1, [r5, r2]
 800c06a:	3504      	adds	r5, #4
 800c06c:	e79b      	b.n	800bfa6 <__multiply+0x7a>
 800c06e:	3e01      	subs	r6, #1
 800c070:	e79d      	b.n	800bfae <__multiply+0x82>
 800c072:	bf00      	nop
 800c074:	0800d64f 	.word	0x0800d64f
 800c078:	0800d660 	.word	0x0800d660

0800c07c <__pow5mult>:
 800c07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c080:	4615      	mov	r5, r2
 800c082:	f012 0203 	ands.w	r2, r2, #3
 800c086:	4606      	mov	r6, r0
 800c088:	460f      	mov	r7, r1
 800c08a:	d007      	beq.n	800c09c <__pow5mult+0x20>
 800c08c:	4c25      	ldr	r4, [pc, #148]	; (800c124 <__pow5mult+0xa8>)
 800c08e:	3a01      	subs	r2, #1
 800c090:	2300      	movs	r3, #0
 800c092:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c096:	f7ff fe9f 	bl	800bdd8 <__multadd>
 800c09a:	4607      	mov	r7, r0
 800c09c:	10ad      	asrs	r5, r5, #2
 800c09e:	d03d      	beq.n	800c11c <__pow5mult+0xa0>
 800c0a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c0a2:	b97c      	cbnz	r4, 800c0c4 <__pow5mult+0x48>
 800c0a4:	2010      	movs	r0, #16
 800c0a6:	f7ff fe11 	bl	800bccc <malloc>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	6270      	str	r0, [r6, #36]	; 0x24
 800c0ae:	b928      	cbnz	r0, 800c0bc <__pow5mult+0x40>
 800c0b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c0b4:	4b1c      	ldr	r3, [pc, #112]	; (800c128 <__pow5mult+0xac>)
 800c0b6:	481d      	ldr	r0, [pc, #116]	; (800c12c <__pow5mult+0xb0>)
 800c0b8:	f000 fc0a 	bl	800c8d0 <__assert_func>
 800c0bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0c0:	6004      	str	r4, [r0, #0]
 800c0c2:	60c4      	str	r4, [r0, #12]
 800c0c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c0c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c0cc:	b94c      	cbnz	r4, 800c0e2 <__pow5mult+0x66>
 800c0ce:	f240 2171 	movw	r1, #625	; 0x271
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	f7ff ff14 	bl	800bf00 <__i2b>
 800c0d8:	2300      	movs	r3, #0
 800c0da:	4604      	mov	r4, r0
 800c0dc:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0e0:	6003      	str	r3, [r0, #0]
 800c0e2:	f04f 0900 	mov.w	r9, #0
 800c0e6:	07eb      	lsls	r3, r5, #31
 800c0e8:	d50a      	bpl.n	800c100 <__pow5mult+0x84>
 800c0ea:	4639      	mov	r1, r7
 800c0ec:	4622      	mov	r2, r4
 800c0ee:	4630      	mov	r0, r6
 800c0f0:	f7ff ff1c 	bl	800bf2c <__multiply>
 800c0f4:	4680      	mov	r8, r0
 800c0f6:	4639      	mov	r1, r7
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	f7ff fe4b 	bl	800bd94 <_Bfree>
 800c0fe:	4647      	mov	r7, r8
 800c100:	106d      	asrs	r5, r5, #1
 800c102:	d00b      	beq.n	800c11c <__pow5mult+0xa0>
 800c104:	6820      	ldr	r0, [r4, #0]
 800c106:	b938      	cbnz	r0, 800c118 <__pow5mult+0x9c>
 800c108:	4622      	mov	r2, r4
 800c10a:	4621      	mov	r1, r4
 800c10c:	4630      	mov	r0, r6
 800c10e:	f7ff ff0d 	bl	800bf2c <__multiply>
 800c112:	6020      	str	r0, [r4, #0]
 800c114:	f8c0 9000 	str.w	r9, [r0]
 800c118:	4604      	mov	r4, r0
 800c11a:	e7e4      	b.n	800c0e6 <__pow5mult+0x6a>
 800c11c:	4638      	mov	r0, r7
 800c11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c122:	bf00      	nop
 800c124:	0800d7b0 	.word	0x0800d7b0
 800c128:	0800d5dd 	.word	0x0800d5dd
 800c12c:	0800d660 	.word	0x0800d660

0800c130 <__lshift>:
 800c130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c134:	460c      	mov	r4, r1
 800c136:	4607      	mov	r7, r0
 800c138:	4691      	mov	r9, r2
 800c13a:	6923      	ldr	r3, [r4, #16]
 800c13c:	6849      	ldr	r1, [r1, #4]
 800c13e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c142:	68a3      	ldr	r3, [r4, #8]
 800c144:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c148:	f108 0601 	add.w	r6, r8, #1
 800c14c:	42b3      	cmp	r3, r6
 800c14e:	db0b      	blt.n	800c168 <__lshift+0x38>
 800c150:	4638      	mov	r0, r7
 800c152:	f7ff fddf 	bl	800bd14 <_Balloc>
 800c156:	4605      	mov	r5, r0
 800c158:	b948      	cbnz	r0, 800c16e <__lshift+0x3e>
 800c15a:	4602      	mov	r2, r0
 800c15c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c160:	4b29      	ldr	r3, [pc, #164]	; (800c208 <__lshift+0xd8>)
 800c162:	482a      	ldr	r0, [pc, #168]	; (800c20c <__lshift+0xdc>)
 800c164:	f000 fbb4 	bl	800c8d0 <__assert_func>
 800c168:	3101      	adds	r1, #1
 800c16a:	005b      	lsls	r3, r3, #1
 800c16c:	e7ee      	b.n	800c14c <__lshift+0x1c>
 800c16e:	2300      	movs	r3, #0
 800c170:	f100 0114 	add.w	r1, r0, #20
 800c174:	f100 0210 	add.w	r2, r0, #16
 800c178:	4618      	mov	r0, r3
 800c17a:	4553      	cmp	r3, sl
 800c17c:	db37      	blt.n	800c1ee <__lshift+0xbe>
 800c17e:	6920      	ldr	r0, [r4, #16]
 800c180:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c184:	f104 0314 	add.w	r3, r4, #20
 800c188:	f019 091f 	ands.w	r9, r9, #31
 800c18c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c190:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c194:	d02f      	beq.n	800c1f6 <__lshift+0xc6>
 800c196:	468a      	mov	sl, r1
 800c198:	f04f 0c00 	mov.w	ip, #0
 800c19c:	f1c9 0e20 	rsb	lr, r9, #32
 800c1a0:	681a      	ldr	r2, [r3, #0]
 800c1a2:	fa02 f209 	lsl.w	r2, r2, r9
 800c1a6:	ea42 020c 	orr.w	r2, r2, ip
 800c1aa:	f84a 2b04 	str.w	r2, [sl], #4
 800c1ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1b2:	4298      	cmp	r0, r3
 800c1b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c1b8:	d8f2      	bhi.n	800c1a0 <__lshift+0x70>
 800c1ba:	1b03      	subs	r3, r0, r4
 800c1bc:	3b15      	subs	r3, #21
 800c1be:	f023 0303 	bic.w	r3, r3, #3
 800c1c2:	3304      	adds	r3, #4
 800c1c4:	f104 0215 	add.w	r2, r4, #21
 800c1c8:	4290      	cmp	r0, r2
 800c1ca:	bf38      	it	cc
 800c1cc:	2304      	movcc	r3, #4
 800c1ce:	f841 c003 	str.w	ip, [r1, r3]
 800c1d2:	f1bc 0f00 	cmp.w	ip, #0
 800c1d6:	d001      	beq.n	800c1dc <__lshift+0xac>
 800c1d8:	f108 0602 	add.w	r6, r8, #2
 800c1dc:	3e01      	subs	r6, #1
 800c1de:	4638      	mov	r0, r7
 800c1e0:	4621      	mov	r1, r4
 800c1e2:	612e      	str	r6, [r5, #16]
 800c1e4:	f7ff fdd6 	bl	800bd94 <_Bfree>
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	e7c1      	b.n	800c17a <__lshift+0x4a>
 800c1f6:	3904      	subs	r1, #4
 800c1f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1fc:	4298      	cmp	r0, r3
 800c1fe:	f841 2f04 	str.w	r2, [r1, #4]!
 800c202:	d8f9      	bhi.n	800c1f8 <__lshift+0xc8>
 800c204:	e7ea      	b.n	800c1dc <__lshift+0xac>
 800c206:	bf00      	nop
 800c208:	0800d64f 	.word	0x0800d64f
 800c20c:	0800d660 	.word	0x0800d660

0800c210 <__mcmp>:
 800c210:	4603      	mov	r3, r0
 800c212:	690a      	ldr	r2, [r1, #16]
 800c214:	6900      	ldr	r0, [r0, #16]
 800c216:	b530      	push	{r4, r5, lr}
 800c218:	1a80      	subs	r0, r0, r2
 800c21a:	d10d      	bne.n	800c238 <__mcmp+0x28>
 800c21c:	3314      	adds	r3, #20
 800c21e:	3114      	adds	r1, #20
 800c220:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c224:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c228:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c22c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c230:	4295      	cmp	r5, r2
 800c232:	d002      	beq.n	800c23a <__mcmp+0x2a>
 800c234:	d304      	bcc.n	800c240 <__mcmp+0x30>
 800c236:	2001      	movs	r0, #1
 800c238:	bd30      	pop	{r4, r5, pc}
 800c23a:	42a3      	cmp	r3, r4
 800c23c:	d3f4      	bcc.n	800c228 <__mcmp+0x18>
 800c23e:	e7fb      	b.n	800c238 <__mcmp+0x28>
 800c240:	f04f 30ff 	mov.w	r0, #4294967295
 800c244:	e7f8      	b.n	800c238 <__mcmp+0x28>
	...

0800c248 <__mdiff>:
 800c248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24c:	460d      	mov	r5, r1
 800c24e:	4607      	mov	r7, r0
 800c250:	4611      	mov	r1, r2
 800c252:	4628      	mov	r0, r5
 800c254:	4614      	mov	r4, r2
 800c256:	f7ff ffdb 	bl	800c210 <__mcmp>
 800c25a:	1e06      	subs	r6, r0, #0
 800c25c:	d111      	bne.n	800c282 <__mdiff+0x3a>
 800c25e:	4631      	mov	r1, r6
 800c260:	4638      	mov	r0, r7
 800c262:	f7ff fd57 	bl	800bd14 <_Balloc>
 800c266:	4602      	mov	r2, r0
 800c268:	b928      	cbnz	r0, 800c276 <__mdiff+0x2e>
 800c26a:	f240 2132 	movw	r1, #562	; 0x232
 800c26e:	4b3a      	ldr	r3, [pc, #232]	; (800c358 <__mdiff+0x110>)
 800c270:	483a      	ldr	r0, [pc, #232]	; (800c35c <__mdiff+0x114>)
 800c272:	f000 fb2d 	bl	800c8d0 <__assert_func>
 800c276:	2301      	movs	r3, #1
 800c278:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c27c:	4610      	mov	r0, r2
 800c27e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c282:	bfa4      	itt	ge
 800c284:	4623      	movge	r3, r4
 800c286:	462c      	movge	r4, r5
 800c288:	4638      	mov	r0, r7
 800c28a:	6861      	ldr	r1, [r4, #4]
 800c28c:	bfa6      	itte	ge
 800c28e:	461d      	movge	r5, r3
 800c290:	2600      	movge	r6, #0
 800c292:	2601      	movlt	r6, #1
 800c294:	f7ff fd3e 	bl	800bd14 <_Balloc>
 800c298:	4602      	mov	r2, r0
 800c29a:	b918      	cbnz	r0, 800c2a4 <__mdiff+0x5c>
 800c29c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c2a0:	4b2d      	ldr	r3, [pc, #180]	; (800c358 <__mdiff+0x110>)
 800c2a2:	e7e5      	b.n	800c270 <__mdiff+0x28>
 800c2a4:	f102 0814 	add.w	r8, r2, #20
 800c2a8:	46c2      	mov	sl, r8
 800c2aa:	f04f 0c00 	mov.w	ip, #0
 800c2ae:	6927      	ldr	r7, [r4, #16]
 800c2b0:	60c6      	str	r6, [r0, #12]
 800c2b2:	692e      	ldr	r6, [r5, #16]
 800c2b4:	f104 0014 	add.w	r0, r4, #20
 800c2b8:	f105 0914 	add.w	r9, r5, #20
 800c2bc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c2c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c2c4:	3410      	adds	r4, #16
 800c2c6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c2ca:	f859 3b04 	ldr.w	r3, [r9], #4
 800c2ce:	fa1f f18b 	uxth.w	r1, fp
 800c2d2:	448c      	add	ip, r1
 800c2d4:	b299      	uxth	r1, r3
 800c2d6:	0c1b      	lsrs	r3, r3, #16
 800c2d8:	ebac 0101 	sub.w	r1, ip, r1
 800c2dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c2e0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c2e4:	b289      	uxth	r1, r1
 800c2e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c2ea:	454e      	cmp	r6, r9
 800c2ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c2f0:	f84a 3b04 	str.w	r3, [sl], #4
 800c2f4:	d8e7      	bhi.n	800c2c6 <__mdiff+0x7e>
 800c2f6:	1b73      	subs	r3, r6, r5
 800c2f8:	3b15      	subs	r3, #21
 800c2fa:	f023 0303 	bic.w	r3, r3, #3
 800c2fe:	3515      	adds	r5, #21
 800c300:	3304      	adds	r3, #4
 800c302:	42ae      	cmp	r6, r5
 800c304:	bf38      	it	cc
 800c306:	2304      	movcc	r3, #4
 800c308:	4418      	add	r0, r3
 800c30a:	4443      	add	r3, r8
 800c30c:	461e      	mov	r6, r3
 800c30e:	4605      	mov	r5, r0
 800c310:	4575      	cmp	r5, lr
 800c312:	d30e      	bcc.n	800c332 <__mdiff+0xea>
 800c314:	f10e 0103 	add.w	r1, lr, #3
 800c318:	1a09      	subs	r1, r1, r0
 800c31a:	f021 0103 	bic.w	r1, r1, #3
 800c31e:	3803      	subs	r0, #3
 800c320:	4586      	cmp	lr, r0
 800c322:	bf38      	it	cc
 800c324:	2100      	movcc	r1, #0
 800c326:	4419      	add	r1, r3
 800c328:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c32c:	b18b      	cbz	r3, 800c352 <__mdiff+0x10a>
 800c32e:	6117      	str	r7, [r2, #16]
 800c330:	e7a4      	b.n	800c27c <__mdiff+0x34>
 800c332:	f855 8b04 	ldr.w	r8, [r5], #4
 800c336:	fa1f f188 	uxth.w	r1, r8
 800c33a:	4461      	add	r1, ip
 800c33c:	140c      	asrs	r4, r1, #16
 800c33e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c342:	b289      	uxth	r1, r1
 800c344:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c348:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c34c:	f846 1b04 	str.w	r1, [r6], #4
 800c350:	e7de      	b.n	800c310 <__mdiff+0xc8>
 800c352:	3f01      	subs	r7, #1
 800c354:	e7e8      	b.n	800c328 <__mdiff+0xe0>
 800c356:	bf00      	nop
 800c358:	0800d64f 	.word	0x0800d64f
 800c35c:	0800d660 	.word	0x0800d660

0800c360 <__d2b>:
 800c360:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c364:	2101      	movs	r1, #1
 800c366:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c36a:	4690      	mov	r8, r2
 800c36c:	461d      	mov	r5, r3
 800c36e:	f7ff fcd1 	bl	800bd14 <_Balloc>
 800c372:	4604      	mov	r4, r0
 800c374:	b930      	cbnz	r0, 800c384 <__d2b+0x24>
 800c376:	4602      	mov	r2, r0
 800c378:	f240 310a 	movw	r1, #778	; 0x30a
 800c37c:	4b24      	ldr	r3, [pc, #144]	; (800c410 <__d2b+0xb0>)
 800c37e:	4825      	ldr	r0, [pc, #148]	; (800c414 <__d2b+0xb4>)
 800c380:	f000 faa6 	bl	800c8d0 <__assert_func>
 800c384:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c388:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c38c:	bb2d      	cbnz	r5, 800c3da <__d2b+0x7a>
 800c38e:	9301      	str	r3, [sp, #4]
 800c390:	f1b8 0300 	subs.w	r3, r8, #0
 800c394:	d026      	beq.n	800c3e4 <__d2b+0x84>
 800c396:	4668      	mov	r0, sp
 800c398:	9300      	str	r3, [sp, #0]
 800c39a:	f7ff fd83 	bl	800bea4 <__lo0bits>
 800c39e:	9900      	ldr	r1, [sp, #0]
 800c3a0:	b1f0      	cbz	r0, 800c3e0 <__d2b+0x80>
 800c3a2:	9a01      	ldr	r2, [sp, #4]
 800c3a4:	f1c0 0320 	rsb	r3, r0, #32
 800c3a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ac:	430b      	orrs	r3, r1
 800c3ae:	40c2      	lsrs	r2, r0
 800c3b0:	6163      	str	r3, [r4, #20]
 800c3b2:	9201      	str	r2, [sp, #4]
 800c3b4:	9b01      	ldr	r3, [sp, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	bf14      	ite	ne
 800c3ba:	2102      	movne	r1, #2
 800c3bc:	2101      	moveq	r1, #1
 800c3be:	61a3      	str	r3, [r4, #24]
 800c3c0:	6121      	str	r1, [r4, #16]
 800c3c2:	b1c5      	cbz	r5, 800c3f6 <__d2b+0x96>
 800c3c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c3c8:	4405      	add	r5, r0
 800c3ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c3ce:	603d      	str	r5, [r7, #0]
 800c3d0:	6030      	str	r0, [r6, #0]
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	b002      	add	sp, #8
 800c3d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3de:	e7d6      	b.n	800c38e <__d2b+0x2e>
 800c3e0:	6161      	str	r1, [r4, #20]
 800c3e2:	e7e7      	b.n	800c3b4 <__d2b+0x54>
 800c3e4:	a801      	add	r0, sp, #4
 800c3e6:	f7ff fd5d 	bl	800bea4 <__lo0bits>
 800c3ea:	2101      	movs	r1, #1
 800c3ec:	9b01      	ldr	r3, [sp, #4]
 800c3ee:	6121      	str	r1, [r4, #16]
 800c3f0:	6163      	str	r3, [r4, #20]
 800c3f2:	3020      	adds	r0, #32
 800c3f4:	e7e5      	b.n	800c3c2 <__d2b+0x62>
 800c3f6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c3fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c3fe:	6038      	str	r0, [r7, #0]
 800c400:	6918      	ldr	r0, [r3, #16]
 800c402:	f7ff fd2f 	bl	800be64 <__hi0bits>
 800c406:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c40a:	6031      	str	r1, [r6, #0]
 800c40c:	e7e1      	b.n	800c3d2 <__d2b+0x72>
 800c40e:	bf00      	nop
 800c410:	0800d64f 	.word	0x0800d64f
 800c414:	0800d660 	.word	0x0800d660

0800c418 <_calloc_r>:
 800c418:	b570      	push	{r4, r5, r6, lr}
 800c41a:	fba1 5402 	umull	r5, r4, r1, r2
 800c41e:	b934      	cbnz	r4, 800c42e <_calloc_r+0x16>
 800c420:	4629      	mov	r1, r5
 800c422:	f000 f875 	bl	800c510 <_malloc_r>
 800c426:	4606      	mov	r6, r0
 800c428:	b928      	cbnz	r0, 800c436 <_calloc_r+0x1e>
 800c42a:	4630      	mov	r0, r6
 800c42c:	bd70      	pop	{r4, r5, r6, pc}
 800c42e:	220c      	movs	r2, #12
 800c430:	2600      	movs	r6, #0
 800c432:	6002      	str	r2, [r0, #0]
 800c434:	e7f9      	b.n	800c42a <_calloc_r+0x12>
 800c436:	462a      	mov	r2, r5
 800c438:	4621      	mov	r1, r4
 800c43a:	f7fe f941 	bl	800a6c0 <memset>
 800c43e:	e7f4      	b.n	800c42a <_calloc_r+0x12>

0800c440 <_free_r>:
 800c440:	b538      	push	{r3, r4, r5, lr}
 800c442:	4605      	mov	r5, r0
 800c444:	2900      	cmp	r1, #0
 800c446:	d040      	beq.n	800c4ca <_free_r+0x8a>
 800c448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c44c:	1f0c      	subs	r4, r1, #4
 800c44e:	2b00      	cmp	r3, #0
 800c450:	bfb8      	it	lt
 800c452:	18e4      	addlt	r4, r4, r3
 800c454:	f000 fa98 	bl	800c988 <__malloc_lock>
 800c458:	4a1c      	ldr	r2, [pc, #112]	; (800c4cc <_free_r+0x8c>)
 800c45a:	6813      	ldr	r3, [r2, #0]
 800c45c:	b933      	cbnz	r3, 800c46c <_free_r+0x2c>
 800c45e:	6063      	str	r3, [r4, #4]
 800c460:	6014      	str	r4, [r2, #0]
 800c462:	4628      	mov	r0, r5
 800c464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c468:	f000 ba94 	b.w	800c994 <__malloc_unlock>
 800c46c:	42a3      	cmp	r3, r4
 800c46e:	d908      	bls.n	800c482 <_free_r+0x42>
 800c470:	6820      	ldr	r0, [r4, #0]
 800c472:	1821      	adds	r1, r4, r0
 800c474:	428b      	cmp	r3, r1
 800c476:	bf01      	itttt	eq
 800c478:	6819      	ldreq	r1, [r3, #0]
 800c47a:	685b      	ldreq	r3, [r3, #4]
 800c47c:	1809      	addeq	r1, r1, r0
 800c47e:	6021      	streq	r1, [r4, #0]
 800c480:	e7ed      	b.n	800c45e <_free_r+0x1e>
 800c482:	461a      	mov	r2, r3
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	b10b      	cbz	r3, 800c48c <_free_r+0x4c>
 800c488:	42a3      	cmp	r3, r4
 800c48a:	d9fa      	bls.n	800c482 <_free_r+0x42>
 800c48c:	6811      	ldr	r1, [r2, #0]
 800c48e:	1850      	adds	r0, r2, r1
 800c490:	42a0      	cmp	r0, r4
 800c492:	d10b      	bne.n	800c4ac <_free_r+0x6c>
 800c494:	6820      	ldr	r0, [r4, #0]
 800c496:	4401      	add	r1, r0
 800c498:	1850      	adds	r0, r2, r1
 800c49a:	4283      	cmp	r3, r0
 800c49c:	6011      	str	r1, [r2, #0]
 800c49e:	d1e0      	bne.n	800c462 <_free_r+0x22>
 800c4a0:	6818      	ldr	r0, [r3, #0]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	4401      	add	r1, r0
 800c4a6:	6011      	str	r1, [r2, #0]
 800c4a8:	6053      	str	r3, [r2, #4]
 800c4aa:	e7da      	b.n	800c462 <_free_r+0x22>
 800c4ac:	d902      	bls.n	800c4b4 <_free_r+0x74>
 800c4ae:	230c      	movs	r3, #12
 800c4b0:	602b      	str	r3, [r5, #0]
 800c4b2:	e7d6      	b.n	800c462 <_free_r+0x22>
 800c4b4:	6820      	ldr	r0, [r4, #0]
 800c4b6:	1821      	adds	r1, r4, r0
 800c4b8:	428b      	cmp	r3, r1
 800c4ba:	bf01      	itttt	eq
 800c4bc:	6819      	ldreq	r1, [r3, #0]
 800c4be:	685b      	ldreq	r3, [r3, #4]
 800c4c0:	1809      	addeq	r1, r1, r0
 800c4c2:	6021      	streq	r1, [r4, #0]
 800c4c4:	6063      	str	r3, [r4, #4]
 800c4c6:	6054      	str	r4, [r2, #4]
 800c4c8:	e7cb      	b.n	800c462 <_free_r+0x22>
 800c4ca:	bd38      	pop	{r3, r4, r5, pc}
 800c4cc:	20001714 	.word	0x20001714

0800c4d0 <sbrk_aligned>:
 800c4d0:	b570      	push	{r4, r5, r6, lr}
 800c4d2:	4e0e      	ldr	r6, [pc, #56]	; (800c50c <sbrk_aligned+0x3c>)
 800c4d4:	460c      	mov	r4, r1
 800c4d6:	6831      	ldr	r1, [r6, #0]
 800c4d8:	4605      	mov	r5, r0
 800c4da:	b911      	cbnz	r1, 800c4e2 <sbrk_aligned+0x12>
 800c4dc:	f000 f9e8 	bl	800c8b0 <_sbrk_r>
 800c4e0:	6030      	str	r0, [r6, #0]
 800c4e2:	4621      	mov	r1, r4
 800c4e4:	4628      	mov	r0, r5
 800c4e6:	f000 f9e3 	bl	800c8b0 <_sbrk_r>
 800c4ea:	1c43      	adds	r3, r0, #1
 800c4ec:	d00a      	beq.n	800c504 <sbrk_aligned+0x34>
 800c4ee:	1cc4      	adds	r4, r0, #3
 800c4f0:	f024 0403 	bic.w	r4, r4, #3
 800c4f4:	42a0      	cmp	r0, r4
 800c4f6:	d007      	beq.n	800c508 <sbrk_aligned+0x38>
 800c4f8:	1a21      	subs	r1, r4, r0
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	f000 f9d8 	bl	800c8b0 <_sbrk_r>
 800c500:	3001      	adds	r0, #1
 800c502:	d101      	bne.n	800c508 <sbrk_aligned+0x38>
 800c504:	f04f 34ff 	mov.w	r4, #4294967295
 800c508:	4620      	mov	r0, r4
 800c50a:	bd70      	pop	{r4, r5, r6, pc}
 800c50c:	20001718 	.word	0x20001718

0800c510 <_malloc_r>:
 800c510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c514:	1ccd      	adds	r5, r1, #3
 800c516:	f025 0503 	bic.w	r5, r5, #3
 800c51a:	3508      	adds	r5, #8
 800c51c:	2d0c      	cmp	r5, #12
 800c51e:	bf38      	it	cc
 800c520:	250c      	movcc	r5, #12
 800c522:	2d00      	cmp	r5, #0
 800c524:	4607      	mov	r7, r0
 800c526:	db01      	blt.n	800c52c <_malloc_r+0x1c>
 800c528:	42a9      	cmp	r1, r5
 800c52a:	d905      	bls.n	800c538 <_malloc_r+0x28>
 800c52c:	230c      	movs	r3, #12
 800c52e:	2600      	movs	r6, #0
 800c530:	603b      	str	r3, [r7, #0]
 800c532:	4630      	mov	r0, r6
 800c534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c538:	4e2e      	ldr	r6, [pc, #184]	; (800c5f4 <_malloc_r+0xe4>)
 800c53a:	f000 fa25 	bl	800c988 <__malloc_lock>
 800c53e:	6833      	ldr	r3, [r6, #0]
 800c540:	461c      	mov	r4, r3
 800c542:	bb34      	cbnz	r4, 800c592 <_malloc_r+0x82>
 800c544:	4629      	mov	r1, r5
 800c546:	4638      	mov	r0, r7
 800c548:	f7ff ffc2 	bl	800c4d0 <sbrk_aligned>
 800c54c:	1c43      	adds	r3, r0, #1
 800c54e:	4604      	mov	r4, r0
 800c550:	d14d      	bne.n	800c5ee <_malloc_r+0xde>
 800c552:	6834      	ldr	r4, [r6, #0]
 800c554:	4626      	mov	r6, r4
 800c556:	2e00      	cmp	r6, #0
 800c558:	d140      	bne.n	800c5dc <_malloc_r+0xcc>
 800c55a:	6823      	ldr	r3, [r4, #0]
 800c55c:	4631      	mov	r1, r6
 800c55e:	4638      	mov	r0, r7
 800c560:	eb04 0803 	add.w	r8, r4, r3
 800c564:	f000 f9a4 	bl	800c8b0 <_sbrk_r>
 800c568:	4580      	cmp	r8, r0
 800c56a:	d13a      	bne.n	800c5e2 <_malloc_r+0xd2>
 800c56c:	6821      	ldr	r1, [r4, #0]
 800c56e:	3503      	adds	r5, #3
 800c570:	1a6d      	subs	r5, r5, r1
 800c572:	f025 0503 	bic.w	r5, r5, #3
 800c576:	3508      	adds	r5, #8
 800c578:	2d0c      	cmp	r5, #12
 800c57a:	bf38      	it	cc
 800c57c:	250c      	movcc	r5, #12
 800c57e:	4638      	mov	r0, r7
 800c580:	4629      	mov	r1, r5
 800c582:	f7ff ffa5 	bl	800c4d0 <sbrk_aligned>
 800c586:	3001      	adds	r0, #1
 800c588:	d02b      	beq.n	800c5e2 <_malloc_r+0xd2>
 800c58a:	6823      	ldr	r3, [r4, #0]
 800c58c:	442b      	add	r3, r5
 800c58e:	6023      	str	r3, [r4, #0]
 800c590:	e00e      	b.n	800c5b0 <_malloc_r+0xa0>
 800c592:	6822      	ldr	r2, [r4, #0]
 800c594:	1b52      	subs	r2, r2, r5
 800c596:	d41e      	bmi.n	800c5d6 <_malloc_r+0xc6>
 800c598:	2a0b      	cmp	r2, #11
 800c59a:	d916      	bls.n	800c5ca <_malloc_r+0xba>
 800c59c:	1961      	adds	r1, r4, r5
 800c59e:	42a3      	cmp	r3, r4
 800c5a0:	6025      	str	r5, [r4, #0]
 800c5a2:	bf18      	it	ne
 800c5a4:	6059      	strne	r1, [r3, #4]
 800c5a6:	6863      	ldr	r3, [r4, #4]
 800c5a8:	bf08      	it	eq
 800c5aa:	6031      	streq	r1, [r6, #0]
 800c5ac:	5162      	str	r2, [r4, r5]
 800c5ae:	604b      	str	r3, [r1, #4]
 800c5b0:	4638      	mov	r0, r7
 800c5b2:	f104 060b 	add.w	r6, r4, #11
 800c5b6:	f000 f9ed 	bl	800c994 <__malloc_unlock>
 800c5ba:	f026 0607 	bic.w	r6, r6, #7
 800c5be:	1d23      	adds	r3, r4, #4
 800c5c0:	1af2      	subs	r2, r6, r3
 800c5c2:	d0b6      	beq.n	800c532 <_malloc_r+0x22>
 800c5c4:	1b9b      	subs	r3, r3, r6
 800c5c6:	50a3      	str	r3, [r4, r2]
 800c5c8:	e7b3      	b.n	800c532 <_malloc_r+0x22>
 800c5ca:	6862      	ldr	r2, [r4, #4]
 800c5cc:	42a3      	cmp	r3, r4
 800c5ce:	bf0c      	ite	eq
 800c5d0:	6032      	streq	r2, [r6, #0]
 800c5d2:	605a      	strne	r2, [r3, #4]
 800c5d4:	e7ec      	b.n	800c5b0 <_malloc_r+0xa0>
 800c5d6:	4623      	mov	r3, r4
 800c5d8:	6864      	ldr	r4, [r4, #4]
 800c5da:	e7b2      	b.n	800c542 <_malloc_r+0x32>
 800c5dc:	4634      	mov	r4, r6
 800c5de:	6876      	ldr	r6, [r6, #4]
 800c5e0:	e7b9      	b.n	800c556 <_malloc_r+0x46>
 800c5e2:	230c      	movs	r3, #12
 800c5e4:	4638      	mov	r0, r7
 800c5e6:	603b      	str	r3, [r7, #0]
 800c5e8:	f000 f9d4 	bl	800c994 <__malloc_unlock>
 800c5ec:	e7a1      	b.n	800c532 <_malloc_r+0x22>
 800c5ee:	6025      	str	r5, [r4, #0]
 800c5f0:	e7de      	b.n	800c5b0 <_malloc_r+0xa0>
 800c5f2:	bf00      	nop
 800c5f4:	20001714 	.word	0x20001714

0800c5f8 <__ssputs_r>:
 800c5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5fc:	688e      	ldr	r6, [r1, #8]
 800c5fe:	4682      	mov	sl, r0
 800c600:	429e      	cmp	r6, r3
 800c602:	460c      	mov	r4, r1
 800c604:	4690      	mov	r8, r2
 800c606:	461f      	mov	r7, r3
 800c608:	d838      	bhi.n	800c67c <__ssputs_r+0x84>
 800c60a:	898a      	ldrh	r2, [r1, #12]
 800c60c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c610:	d032      	beq.n	800c678 <__ssputs_r+0x80>
 800c612:	6825      	ldr	r5, [r4, #0]
 800c614:	6909      	ldr	r1, [r1, #16]
 800c616:	3301      	adds	r3, #1
 800c618:	eba5 0901 	sub.w	r9, r5, r1
 800c61c:	6965      	ldr	r5, [r4, #20]
 800c61e:	444b      	add	r3, r9
 800c620:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c624:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c628:	106d      	asrs	r5, r5, #1
 800c62a:	429d      	cmp	r5, r3
 800c62c:	bf38      	it	cc
 800c62e:	461d      	movcc	r5, r3
 800c630:	0553      	lsls	r3, r2, #21
 800c632:	d531      	bpl.n	800c698 <__ssputs_r+0xa0>
 800c634:	4629      	mov	r1, r5
 800c636:	f7ff ff6b 	bl	800c510 <_malloc_r>
 800c63a:	4606      	mov	r6, r0
 800c63c:	b950      	cbnz	r0, 800c654 <__ssputs_r+0x5c>
 800c63e:	230c      	movs	r3, #12
 800c640:	f04f 30ff 	mov.w	r0, #4294967295
 800c644:	f8ca 3000 	str.w	r3, [sl]
 800c648:	89a3      	ldrh	r3, [r4, #12]
 800c64a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c64e:	81a3      	strh	r3, [r4, #12]
 800c650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c654:	464a      	mov	r2, r9
 800c656:	6921      	ldr	r1, [r4, #16]
 800c658:	f7ff fb4e 	bl	800bcf8 <memcpy>
 800c65c:	89a3      	ldrh	r3, [r4, #12]
 800c65e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c666:	81a3      	strh	r3, [r4, #12]
 800c668:	6126      	str	r6, [r4, #16]
 800c66a:	444e      	add	r6, r9
 800c66c:	6026      	str	r6, [r4, #0]
 800c66e:	463e      	mov	r6, r7
 800c670:	6165      	str	r5, [r4, #20]
 800c672:	eba5 0509 	sub.w	r5, r5, r9
 800c676:	60a5      	str	r5, [r4, #8]
 800c678:	42be      	cmp	r6, r7
 800c67a:	d900      	bls.n	800c67e <__ssputs_r+0x86>
 800c67c:	463e      	mov	r6, r7
 800c67e:	4632      	mov	r2, r6
 800c680:	4641      	mov	r1, r8
 800c682:	6820      	ldr	r0, [r4, #0]
 800c684:	f000 f966 	bl	800c954 <memmove>
 800c688:	68a3      	ldr	r3, [r4, #8]
 800c68a:	2000      	movs	r0, #0
 800c68c:	1b9b      	subs	r3, r3, r6
 800c68e:	60a3      	str	r3, [r4, #8]
 800c690:	6823      	ldr	r3, [r4, #0]
 800c692:	4433      	add	r3, r6
 800c694:	6023      	str	r3, [r4, #0]
 800c696:	e7db      	b.n	800c650 <__ssputs_r+0x58>
 800c698:	462a      	mov	r2, r5
 800c69a:	f000 f981 	bl	800c9a0 <_realloc_r>
 800c69e:	4606      	mov	r6, r0
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	d1e1      	bne.n	800c668 <__ssputs_r+0x70>
 800c6a4:	4650      	mov	r0, sl
 800c6a6:	6921      	ldr	r1, [r4, #16]
 800c6a8:	f7ff feca 	bl	800c440 <_free_r>
 800c6ac:	e7c7      	b.n	800c63e <__ssputs_r+0x46>
	...

0800c6b0 <_svfiprintf_r>:
 800c6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b4:	4698      	mov	r8, r3
 800c6b6:	898b      	ldrh	r3, [r1, #12]
 800c6b8:	4607      	mov	r7, r0
 800c6ba:	061b      	lsls	r3, r3, #24
 800c6bc:	460d      	mov	r5, r1
 800c6be:	4614      	mov	r4, r2
 800c6c0:	b09d      	sub	sp, #116	; 0x74
 800c6c2:	d50e      	bpl.n	800c6e2 <_svfiprintf_r+0x32>
 800c6c4:	690b      	ldr	r3, [r1, #16]
 800c6c6:	b963      	cbnz	r3, 800c6e2 <_svfiprintf_r+0x32>
 800c6c8:	2140      	movs	r1, #64	; 0x40
 800c6ca:	f7ff ff21 	bl	800c510 <_malloc_r>
 800c6ce:	6028      	str	r0, [r5, #0]
 800c6d0:	6128      	str	r0, [r5, #16]
 800c6d2:	b920      	cbnz	r0, 800c6de <_svfiprintf_r+0x2e>
 800c6d4:	230c      	movs	r3, #12
 800c6d6:	603b      	str	r3, [r7, #0]
 800c6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6dc:	e0d1      	b.n	800c882 <_svfiprintf_r+0x1d2>
 800c6de:	2340      	movs	r3, #64	; 0x40
 800c6e0:	616b      	str	r3, [r5, #20]
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c6e6:	2320      	movs	r3, #32
 800c6e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6ec:	2330      	movs	r3, #48	; 0x30
 800c6ee:	f04f 0901 	mov.w	r9, #1
 800c6f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c89c <_svfiprintf_r+0x1ec>
 800c6fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6fe:	4623      	mov	r3, r4
 800c700:	469a      	mov	sl, r3
 800c702:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c706:	b10a      	cbz	r2, 800c70c <_svfiprintf_r+0x5c>
 800c708:	2a25      	cmp	r2, #37	; 0x25
 800c70a:	d1f9      	bne.n	800c700 <_svfiprintf_r+0x50>
 800c70c:	ebba 0b04 	subs.w	fp, sl, r4
 800c710:	d00b      	beq.n	800c72a <_svfiprintf_r+0x7a>
 800c712:	465b      	mov	r3, fp
 800c714:	4622      	mov	r2, r4
 800c716:	4629      	mov	r1, r5
 800c718:	4638      	mov	r0, r7
 800c71a:	f7ff ff6d 	bl	800c5f8 <__ssputs_r>
 800c71e:	3001      	adds	r0, #1
 800c720:	f000 80aa 	beq.w	800c878 <_svfiprintf_r+0x1c8>
 800c724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c726:	445a      	add	r2, fp
 800c728:	9209      	str	r2, [sp, #36]	; 0x24
 800c72a:	f89a 3000 	ldrb.w	r3, [sl]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	f000 80a2 	beq.w	800c878 <_svfiprintf_r+0x1c8>
 800c734:	2300      	movs	r3, #0
 800c736:	f04f 32ff 	mov.w	r2, #4294967295
 800c73a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c73e:	f10a 0a01 	add.w	sl, sl, #1
 800c742:	9304      	str	r3, [sp, #16]
 800c744:	9307      	str	r3, [sp, #28]
 800c746:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c74a:	931a      	str	r3, [sp, #104]	; 0x68
 800c74c:	4654      	mov	r4, sl
 800c74e:	2205      	movs	r2, #5
 800c750:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c754:	4851      	ldr	r0, [pc, #324]	; (800c89c <_svfiprintf_r+0x1ec>)
 800c756:	f7ff fac1 	bl	800bcdc <memchr>
 800c75a:	9a04      	ldr	r2, [sp, #16]
 800c75c:	b9d8      	cbnz	r0, 800c796 <_svfiprintf_r+0xe6>
 800c75e:	06d0      	lsls	r0, r2, #27
 800c760:	bf44      	itt	mi
 800c762:	2320      	movmi	r3, #32
 800c764:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c768:	0711      	lsls	r1, r2, #28
 800c76a:	bf44      	itt	mi
 800c76c:	232b      	movmi	r3, #43	; 0x2b
 800c76e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c772:	f89a 3000 	ldrb.w	r3, [sl]
 800c776:	2b2a      	cmp	r3, #42	; 0x2a
 800c778:	d015      	beq.n	800c7a6 <_svfiprintf_r+0xf6>
 800c77a:	4654      	mov	r4, sl
 800c77c:	2000      	movs	r0, #0
 800c77e:	f04f 0c0a 	mov.w	ip, #10
 800c782:	9a07      	ldr	r2, [sp, #28]
 800c784:	4621      	mov	r1, r4
 800c786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c78a:	3b30      	subs	r3, #48	; 0x30
 800c78c:	2b09      	cmp	r3, #9
 800c78e:	d94e      	bls.n	800c82e <_svfiprintf_r+0x17e>
 800c790:	b1b0      	cbz	r0, 800c7c0 <_svfiprintf_r+0x110>
 800c792:	9207      	str	r2, [sp, #28]
 800c794:	e014      	b.n	800c7c0 <_svfiprintf_r+0x110>
 800c796:	eba0 0308 	sub.w	r3, r0, r8
 800c79a:	fa09 f303 	lsl.w	r3, r9, r3
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	46a2      	mov	sl, r4
 800c7a2:	9304      	str	r3, [sp, #16]
 800c7a4:	e7d2      	b.n	800c74c <_svfiprintf_r+0x9c>
 800c7a6:	9b03      	ldr	r3, [sp, #12]
 800c7a8:	1d19      	adds	r1, r3, #4
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	9103      	str	r1, [sp, #12]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	bfbb      	ittet	lt
 800c7b2:	425b      	neglt	r3, r3
 800c7b4:	f042 0202 	orrlt.w	r2, r2, #2
 800c7b8:	9307      	strge	r3, [sp, #28]
 800c7ba:	9307      	strlt	r3, [sp, #28]
 800c7bc:	bfb8      	it	lt
 800c7be:	9204      	strlt	r2, [sp, #16]
 800c7c0:	7823      	ldrb	r3, [r4, #0]
 800c7c2:	2b2e      	cmp	r3, #46	; 0x2e
 800c7c4:	d10c      	bne.n	800c7e0 <_svfiprintf_r+0x130>
 800c7c6:	7863      	ldrb	r3, [r4, #1]
 800c7c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c7ca:	d135      	bne.n	800c838 <_svfiprintf_r+0x188>
 800c7cc:	9b03      	ldr	r3, [sp, #12]
 800c7ce:	3402      	adds	r4, #2
 800c7d0:	1d1a      	adds	r2, r3, #4
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	9203      	str	r2, [sp, #12]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	bfb8      	it	lt
 800c7da:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7de:	9305      	str	r3, [sp, #20]
 800c7e0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c8a0 <_svfiprintf_r+0x1f0>
 800c7e4:	2203      	movs	r2, #3
 800c7e6:	4650      	mov	r0, sl
 800c7e8:	7821      	ldrb	r1, [r4, #0]
 800c7ea:	f7ff fa77 	bl	800bcdc <memchr>
 800c7ee:	b140      	cbz	r0, 800c802 <_svfiprintf_r+0x152>
 800c7f0:	2340      	movs	r3, #64	; 0x40
 800c7f2:	eba0 000a 	sub.w	r0, r0, sl
 800c7f6:	fa03 f000 	lsl.w	r0, r3, r0
 800c7fa:	9b04      	ldr	r3, [sp, #16]
 800c7fc:	3401      	adds	r4, #1
 800c7fe:	4303      	orrs	r3, r0
 800c800:	9304      	str	r3, [sp, #16]
 800c802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c806:	2206      	movs	r2, #6
 800c808:	4826      	ldr	r0, [pc, #152]	; (800c8a4 <_svfiprintf_r+0x1f4>)
 800c80a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c80e:	f7ff fa65 	bl	800bcdc <memchr>
 800c812:	2800      	cmp	r0, #0
 800c814:	d038      	beq.n	800c888 <_svfiprintf_r+0x1d8>
 800c816:	4b24      	ldr	r3, [pc, #144]	; (800c8a8 <_svfiprintf_r+0x1f8>)
 800c818:	bb1b      	cbnz	r3, 800c862 <_svfiprintf_r+0x1b2>
 800c81a:	9b03      	ldr	r3, [sp, #12]
 800c81c:	3307      	adds	r3, #7
 800c81e:	f023 0307 	bic.w	r3, r3, #7
 800c822:	3308      	adds	r3, #8
 800c824:	9303      	str	r3, [sp, #12]
 800c826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c828:	4433      	add	r3, r6
 800c82a:	9309      	str	r3, [sp, #36]	; 0x24
 800c82c:	e767      	b.n	800c6fe <_svfiprintf_r+0x4e>
 800c82e:	460c      	mov	r4, r1
 800c830:	2001      	movs	r0, #1
 800c832:	fb0c 3202 	mla	r2, ip, r2, r3
 800c836:	e7a5      	b.n	800c784 <_svfiprintf_r+0xd4>
 800c838:	2300      	movs	r3, #0
 800c83a:	f04f 0c0a 	mov.w	ip, #10
 800c83e:	4619      	mov	r1, r3
 800c840:	3401      	adds	r4, #1
 800c842:	9305      	str	r3, [sp, #20]
 800c844:	4620      	mov	r0, r4
 800c846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c84a:	3a30      	subs	r2, #48	; 0x30
 800c84c:	2a09      	cmp	r2, #9
 800c84e:	d903      	bls.n	800c858 <_svfiprintf_r+0x1a8>
 800c850:	2b00      	cmp	r3, #0
 800c852:	d0c5      	beq.n	800c7e0 <_svfiprintf_r+0x130>
 800c854:	9105      	str	r1, [sp, #20]
 800c856:	e7c3      	b.n	800c7e0 <_svfiprintf_r+0x130>
 800c858:	4604      	mov	r4, r0
 800c85a:	2301      	movs	r3, #1
 800c85c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c860:	e7f0      	b.n	800c844 <_svfiprintf_r+0x194>
 800c862:	ab03      	add	r3, sp, #12
 800c864:	9300      	str	r3, [sp, #0]
 800c866:	462a      	mov	r2, r5
 800c868:	4638      	mov	r0, r7
 800c86a:	4b10      	ldr	r3, [pc, #64]	; (800c8ac <_svfiprintf_r+0x1fc>)
 800c86c:	a904      	add	r1, sp, #16
 800c86e:	f7fd ffcd 	bl	800a80c <_printf_float>
 800c872:	1c42      	adds	r2, r0, #1
 800c874:	4606      	mov	r6, r0
 800c876:	d1d6      	bne.n	800c826 <_svfiprintf_r+0x176>
 800c878:	89ab      	ldrh	r3, [r5, #12]
 800c87a:	065b      	lsls	r3, r3, #25
 800c87c:	f53f af2c 	bmi.w	800c6d8 <_svfiprintf_r+0x28>
 800c880:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c882:	b01d      	add	sp, #116	; 0x74
 800c884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c888:	ab03      	add	r3, sp, #12
 800c88a:	9300      	str	r3, [sp, #0]
 800c88c:	462a      	mov	r2, r5
 800c88e:	4638      	mov	r0, r7
 800c890:	4b06      	ldr	r3, [pc, #24]	; (800c8ac <_svfiprintf_r+0x1fc>)
 800c892:	a904      	add	r1, sp, #16
 800c894:	f7fe fa56 	bl	800ad44 <_printf_i>
 800c898:	e7eb      	b.n	800c872 <_svfiprintf_r+0x1c2>
 800c89a:	bf00      	nop
 800c89c:	0800d7bc 	.word	0x0800d7bc
 800c8a0:	0800d7c2 	.word	0x0800d7c2
 800c8a4:	0800d7c6 	.word	0x0800d7c6
 800c8a8:	0800a80d 	.word	0x0800a80d
 800c8ac:	0800c5f9 	.word	0x0800c5f9

0800c8b0 <_sbrk_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	4d05      	ldr	r5, [pc, #20]	; (800c8cc <_sbrk_r+0x1c>)
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	4608      	mov	r0, r1
 800c8ba:	602b      	str	r3, [r5, #0]
 800c8bc:	f7f5 fbe0 	bl	8002080 <_sbrk>
 800c8c0:	1c43      	adds	r3, r0, #1
 800c8c2:	d102      	bne.n	800c8ca <_sbrk_r+0x1a>
 800c8c4:	682b      	ldr	r3, [r5, #0]
 800c8c6:	b103      	cbz	r3, 800c8ca <_sbrk_r+0x1a>
 800c8c8:	6023      	str	r3, [r4, #0]
 800c8ca:	bd38      	pop	{r3, r4, r5, pc}
 800c8cc:	2000171c 	.word	0x2000171c

0800c8d0 <__assert_func>:
 800c8d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8d2:	4614      	mov	r4, r2
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	4b09      	ldr	r3, [pc, #36]	; (800c8fc <__assert_func+0x2c>)
 800c8d8:	4605      	mov	r5, r0
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68d8      	ldr	r0, [r3, #12]
 800c8de:	b14c      	cbz	r4, 800c8f4 <__assert_func+0x24>
 800c8e0:	4b07      	ldr	r3, [pc, #28]	; (800c900 <__assert_func+0x30>)
 800c8e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8e6:	9100      	str	r1, [sp, #0]
 800c8e8:	462b      	mov	r3, r5
 800c8ea:	4906      	ldr	r1, [pc, #24]	; (800c904 <__assert_func+0x34>)
 800c8ec:	f000 f80e 	bl	800c90c <fiprintf>
 800c8f0:	f000 faaa 	bl	800ce48 <abort>
 800c8f4:	4b04      	ldr	r3, [pc, #16]	; (800c908 <__assert_func+0x38>)
 800c8f6:	461c      	mov	r4, r3
 800c8f8:	e7f3      	b.n	800c8e2 <__assert_func+0x12>
 800c8fa:	bf00      	nop
 800c8fc:	2000017c 	.word	0x2000017c
 800c900:	0800d7cd 	.word	0x0800d7cd
 800c904:	0800d7da 	.word	0x0800d7da
 800c908:	0800d808 	.word	0x0800d808

0800c90c <fiprintf>:
 800c90c:	b40e      	push	{r1, r2, r3}
 800c90e:	b503      	push	{r0, r1, lr}
 800c910:	4601      	mov	r1, r0
 800c912:	ab03      	add	r3, sp, #12
 800c914:	4805      	ldr	r0, [pc, #20]	; (800c92c <fiprintf+0x20>)
 800c916:	f853 2b04 	ldr.w	r2, [r3], #4
 800c91a:	6800      	ldr	r0, [r0, #0]
 800c91c:	9301      	str	r3, [sp, #4]
 800c91e:	f000 f895 	bl	800ca4c <_vfiprintf_r>
 800c922:	b002      	add	sp, #8
 800c924:	f85d eb04 	ldr.w	lr, [sp], #4
 800c928:	b003      	add	sp, #12
 800c92a:	4770      	bx	lr
 800c92c:	2000017c 	.word	0x2000017c

0800c930 <__ascii_mbtowc>:
 800c930:	b082      	sub	sp, #8
 800c932:	b901      	cbnz	r1, 800c936 <__ascii_mbtowc+0x6>
 800c934:	a901      	add	r1, sp, #4
 800c936:	b142      	cbz	r2, 800c94a <__ascii_mbtowc+0x1a>
 800c938:	b14b      	cbz	r3, 800c94e <__ascii_mbtowc+0x1e>
 800c93a:	7813      	ldrb	r3, [r2, #0]
 800c93c:	600b      	str	r3, [r1, #0]
 800c93e:	7812      	ldrb	r2, [r2, #0]
 800c940:	1e10      	subs	r0, r2, #0
 800c942:	bf18      	it	ne
 800c944:	2001      	movne	r0, #1
 800c946:	b002      	add	sp, #8
 800c948:	4770      	bx	lr
 800c94a:	4610      	mov	r0, r2
 800c94c:	e7fb      	b.n	800c946 <__ascii_mbtowc+0x16>
 800c94e:	f06f 0001 	mvn.w	r0, #1
 800c952:	e7f8      	b.n	800c946 <__ascii_mbtowc+0x16>

0800c954 <memmove>:
 800c954:	4288      	cmp	r0, r1
 800c956:	b510      	push	{r4, lr}
 800c958:	eb01 0402 	add.w	r4, r1, r2
 800c95c:	d902      	bls.n	800c964 <memmove+0x10>
 800c95e:	4284      	cmp	r4, r0
 800c960:	4623      	mov	r3, r4
 800c962:	d807      	bhi.n	800c974 <memmove+0x20>
 800c964:	1e43      	subs	r3, r0, #1
 800c966:	42a1      	cmp	r1, r4
 800c968:	d008      	beq.n	800c97c <memmove+0x28>
 800c96a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c96e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c972:	e7f8      	b.n	800c966 <memmove+0x12>
 800c974:	4601      	mov	r1, r0
 800c976:	4402      	add	r2, r0
 800c978:	428a      	cmp	r2, r1
 800c97a:	d100      	bne.n	800c97e <memmove+0x2a>
 800c97c:	bd10      	pop	{r4, pc}
 800c97e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c982:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c986:	e7f7      	b.n	800c978 <memmove+0x24>

0800c988 <__malloc_lock>:
 800c988:	4801      	ldr	r0, [pc, #4]	; (800c990 <__malloc_lock+0x8>)
 800c98a:	f000 bc19 	b.w	800d1c0 <__retarget_lock_acquire_recursive>
 800c98e:	bf00      	nop
 800c990:	20001720 	.word	0x20001720

0800c994 <__malloc_unlock>:
 800c994:	4801      	ldr	r0, [pc, #4]	; (800c99c <__malloc_unlock+0x8>)
 800c996:	f000 bc14 	b.w	800d1c2 <__retarget_lock_release_recursive>
 800c99a:	bf00      	nop
 800c99c:	20001720 	.word	0x20001720

0800c9a0 <_realloc_r>:
 800c9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9a4:	4680      	mov	r8, r0
 800c9a6:	4614      	mov	r4, r2
 800c9a8:	460e      	mov	r6, r1
 800c9aa:	b921      	cbnz	r1, 800c9b6 <_realloc_r+0x16>
 800c9ac:	4611      	mov	r1, r2
 800c9ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b2:	f7ff bdad 	b.w	800c510 <_malloc_r>
 800c9b6:	b92a      	cbnz	r2, 800c9c4 <_realloc_r+0x24>
 800c9b8:	f7ff fd42 	bl	800c440 <_free_r>
 800c9bc:	4625      	mov	r5, r4
 800c9be:	4628      	mov	r0, r5
 800c9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9c4:	f000 fc64 	bl	800d290 <_malloc_usable_size_r>
 800c9c8:	4284      	cmp	r4, r0
 800c9ca:	4607      	mov	r7, r0
 800c9cc:	d802      	bhi.n	800c9d4 <_realloc_r+0x34>
 800c9ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c9d2:	d812      	bhi.n	800c9fa <_realloc_r+0x5a>
 800c9d4:	4621      	mov	r1, r4
 800c9d6:	4640      	mov	r0, r8
 800c9d8:	f7ff fd9a 	bl	800c510 <_malloc_r>
 800c9dc:	4605      	mov	r5, r0
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	d0ed      	beq.n	800c9be <_realloc_r+0x1e>
 800c9e2:	42bc      	cmp	r4, r7
 800c9e4:	4622      	mov	r2, r4
 800c9e6:	4631      	mov	r1, r6
 800c9e8:	bf28      	it	cs
 800c9ea:	463a      	movcs	r2, r7
 800c9ec:	f7ff f984 	bl	800bcf8 <memcpy>
 800c9f0:	4631      	mov	r1, r6
 800c9f2:	4640      	mov	r0, r8
 800c9f4:	f7ff fd24 	bl	800c440 <_free_r>
 800c9f8:	e7e1      	b.n	800c9be <_realloc_r+0x1e>
 800c9fa:	4635      	mov	r5, r6
 800c9fc:	e7df      	b.n	800c9be <_realloc_r+0x1e>

0800c9fe <__sfputc_r>:
 800c9fe:	6893      	ldr	r3, [r2, #8]
 800ca00:	b410      	push	{r4}
 800ca02:	3b01      	subs	r3, #1
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	6093      	str	r3, [r2, #8]
 800ca08:	da07      	bge.n	800ca1a <__sfputc_r+0x1c>
 800ca0a:	6994      	ldr	r4, [r2, #24]
 800ca0c:	42a3      	cmp	r3, r4
 800ca0e:	db01      	blt.n	800ca14 <__sfputc_r+0x16>
 800ca10:	290a      	cmp	r1, #10
 800ca12:	d102      	bne.n	800ca1a <__sfputc_r+0x1c>
 800ca14:	bc10      	pop	{r4}
 800ca16:	f000 b949 	b.w	800ccac <__swbuf_r>
 800ca1a:	6813      	ldr	r3, [r2, #0]
 800ca1c:	1c58      	adds	r0, r3, #1
 800ca1e:	6010      	str	r0, [r2, #0]
 800ca20:	7019      	strb	r1, [r3, #0]
 800ca22:	4608      	mov	r0, r1
 800ca24:	bc10      	pop	{r4}
 800ca26:	4770      	bx	lr

0800ca28 <__sfputs_r>:
 800ca28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca2a:	4606      	mov	r6, r0
 800ca2c:	460f      	mov	r7, r1
 800ca2e:	4614      	mov	r4, r2
 800ca30:	18d5      	adds	r5, r2, r3
 800ca32:	42ac      	cmp	r4, r5
 800ca34:	d101      	bne.n	800ca3a <__sfputs_r+0x12>
 800ca36:	2000      	movs	r0, #0
 800ca38:	e007      	b.n	800ca4a <__sfputs_r+0x22>
 800ca3a:	463a      	mov	r2, r7
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca42:	f7ff ffdc 	bl	800c9fe <__sfputc_r>
 800ca46:	1c43      	adds	r3, r0, #1
 800ca48:	d1f3      	bne.n	800ca32 <__sfputs_r+0xa>
 800ca4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ca4c <_vfiprintf_r>:
 800ca4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca50:	460d      	mov	r5, r1
 800ca52:	4614      	mov	r4, r2
 800ca54:	4698      	mov	r8, r3
 800ca56:	4606      	mov	r6, r0
 800ca58:	b09d      	sub	sp, #116	; 0x74
 800ca5a:	b118      	cbz	r0, 800ca64 <_vfiprintf_r+0x18>
 800ca5c:	6983      	ldr	r3, [r0, #24]
 800ca5e:	b90b      	cbnz	r3, 800ca64 <_vfiprintf_r+0x18>
 800ca60:	f000 fb10 	bl	800d084 <__sinit>
 800ca64:	4b89      	ldr	r3, [pc, #548]	; (800cc8c <_vfiprintf_r+0x240>)
 800ca66:	429d      	cmp	r5, r3
 800ca68:	d11b      	bne.n	800caa2 <_vfiprintf_r+0x56>
 800ca6a:	6875      	ldr	r5, [r6, #4]
 800ca6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca6e:	07d9      	lsls	r1, r3, #31
 800ca70:	d405      	bmi.n	800ca7e <_vfiprintf_r+0x32>
 800ca72:	89ab      	ldrh	r3, [r5, #12]
 800ca74:	059a      	lsls	r2, r3, #22
 800ca76:	d402      	bmi.n	800ca7e <_vfiprintf_r+0x32>
 800ca78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca7a:	f000 fba1 	bl	800d1c0 <__retarget_lock_acquire_recursive>
 800ca7e:	89ab      	ldrh	r3, [r5, #12]
 800ca80:	071b      	lsls	r3, r3, #28
 800ca82:	d501      	bpl.n	800ca88 <_vfiprintf_r+0x3c>
 800ca84:	692b      	ldr	r3, [r5, #16]
 800ca86:	b9eb      	cbnz	r3, 800cac4 <_vfiprintf_r+0x78>
 800ca88:	4629      	mov	r1, r5
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	f000 f96e 	bl	800cd6c <__swsetup_r>
 800ca90:	b1c0      	cbz	r0, 800cac4 <_vfiprintf_r+0x78>
 800ca92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca94:	07dc      	lsls	r4, r3, #31
 800ca96:	d50e      	bpl.n	800cab6 <_vfiprintf_r+0x6a>
 800ca98:	f04f 30ff 	mov.w	r0, #4294967295
 800ca9c:	b01d      	add	sp, #116	; 0x74
 800ca9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa2:	4b7b      	ldr	r3, [pc, #492]	; (800cc90 <_vfiprintf_r+0x244>)
 800caa4:	429d      	cmp	r5, r3
 800caa6:	d101      	bne.n	800caac <_vfiprintf_r+0x60>
 800caa8:	68b5      	ldr	r5, [r6, #8]
 800caaa:	e7df      	b.n	800ca6c <_vfiprintf_r+0x20>
 800caac:	4b79      	ldr	r3, [pc, #484]	; (800cc94 <_vfiprintf_r+0x248>)
 800caae:	429d      	cmp	r5, r3
 800cab0:	bf08      	it	eq
 800cab2:	68f5      	ldreq	r5, [r6, #12]
 800cab4:	e7da      	b.n	800ca6c <_vfiprintf_r+0x20>
 800cab6:	89ab      	ldrh	r3, [r5, #12]
 800cab8:	0598      	lsls	r0, r3, #22
 800caba:	d4ed      	bmi.n	800ca98 <_vfiprintf_r+0x4c>
 800cabc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cabe:	f000 fb80 	bl	800d1c2 <__retarget_lock_release_recursive>
 800cac2:	e7e9      	b.n	800ca98 <_vfiprintf_r+0x4c>
 800cac4:	2300      	movs	r3, #0
 800cac6:	9309      	str	r3, [sp, #36]	; 0x24
 800cac8:	2320      	movs	r3, #32
 800caca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cace:	2330      	movs	r3, #48	; 0x30
 800cad0:	f04f 0901 	mov.w	r9, #1
 800cad4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cad8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800cc98 <_vfiprintf_r+0x24c>
 800cadc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cae0:	4623      	mov	r3, r4
 800cae2:	469a      	mov	sl, r3
 800cae4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cae8:	b10a      	cbz	r2, 800caee <_vfiprintf_r+0xa2>
 800caea:	2a25      	cmp	r2, #37	; 0x25
 800caec:	d1f9      	bne.n	800cae2 <_vfiprintf_r+0x96>
 800caee:	ebba 0b04 	subs.w	fp, sl, r4
 800caf2:	d00b      	beq.n	800cb0c <_vfiprintf_r+0xc0>
 800caf4:	465b      	mov	r3, fp
 800caf6:	4622      	mov	r2, r4
 800caf8:	4629      	mov	r1, r5
 800cafa:	4630      	mov	r0, r6
 800cafc:	f7ff ff94 	bl	800ca28 <__sfputs_r>
 800cb00:	3001      	adds	r0, #1
 800cb02:	f000 80aa 	beq.w	800cc5a <_vfiprintf_r+0x20e>
 800cb06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb08:	445a      	add	r2, fp
 800cb0a:	9209      	str	r2, [sp, #36]	; 0x24
 800cb0c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f000 80a2 	beq.w	800cc5a <_vfiprintf_r+0x20e>
 800cb16:	2300      	movs	r3, #0
 800cb18:	f04f 32ff 	mov.w	r2, #4294967295
 800cb1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb20:	f10a 0a01 	add.w	sl, sl, #1
 800cb24:	9304      	str	r3, [sp, #16]
 800cb26:	9307      	str	r3, [sp, #28]
 800cb28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb2c:	931a      	str	r3, [sp, #104]	; 0x68
 800cb2e:	4654      	mov	r4, sl
 800cb30:	2205      	movs	r2, #5
 800cb32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb36:	4858      	ldr	r0, [pc, #352]	; (800cc98 <_vfiprintf_r+0x24c>)
 800cb38:	f7ff f8d0 	bl	800bcdc <memchr>
 800cb3c:	9a04      	ldr	r2, [sp, #16]
 800cb3e:	b9d8      	cbnz	r0, 800cb78 <_vfiprintf_r+0x12c>
 800cb40:	06d1      	lsls	r1, r2, #27
 800cb42:	bf44      	itt	mi
 800cb44:	2320      	movmi	r3, #32
 800cb46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb4a:	0713      	lsls	r3, r2, #28
 800cb4c:	bf44      	itt	mi
 800cb4e:	232b      	movmi	r3, #43	; 0x2b
 800cb50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb54:	f89a 3000 	ldrb.w	r3, [sl]
 800cb58:	2b2a      	cmp	r3, #42	; 0x2a
 800cb5a:	d015      	beq.n	800cb88 <_vfiprintf_r+0x13c>
 800cb5c:	4654      	mov	r4, sl
 800cb5e:	2000      	movs	r0, #0
 800cb60:	f04f 0c0a 	mov.w	ip, #10
 800cb64:	9a07      	ldr	r2, [sp, #28]
 800cb66:	4621      	mov	r1, r4
 800cb68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb6c:	3b30      	subs	r3, #48	; 0x30
 800cb6e:	2b09      	cmp	r3, #9
 800cb70:	d94e      	bls.n	800cc10 <_vfiprintf_r+0x1c4>
 800cb72:	b1b0      	cbz	r0, 800cba2 <_vfiprintf_r+0x156>
 800cb74:	9207      	str	r2, [sp, #28]
 800cb76:	e014      	b.n	800cba2 <_vfiprintf_r+0x156>
 800cb78:	eba0 0308 	sub.w	r3, r0, r8
 800cb7c:	fa09 f303 	lsl.w	r3, r9, r3
 800cb80:	4313      	orrs	r3, r2
 800cb82:	46a2      	mov	sl, r4
 800cb84:	9304      	str	r3, [sp, #16]
 800cb86:	e7d2      	b.n	800cb2e <_vfiprintf_r+0xe2>
 800cb88:	9b03      	ldr	r3, [sp, #12]
 800cb8a:	1d19      	adds	r1, r3, #4
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	9103      	str	r1, [sp, #12]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	bfbb      	ittet	lt
 800cb94:	425b      	neglt	r3, r3
 800cb96:	f042 0202 	orrlt.w	r2, r2, #2
 800cb9a:	9307      	strge	r3, [sp, #28]
 800cb9c:	9307      	strlt	r3, [sp, #28]
 800cb9e:	bfb8      	it	lt
 800cba0:	9204      	strlt	r2, [sp, #16]
 800cba2:	7823      	ldrb	r3, [r4, #0]
 800cba4:	2b2e      	cmp	r3, #46	; 0x2e
 800cba6:	d10c      	bne.n	800cbc2 <_vfiprintf_r+0x176>
 800cba8:	7863      	ldrb	r3, [r4, #1]
 800cbaa:	2b2a      	cmp	r3, #42	; 0x2a
 800cbac:	d135      	bne.n	800cc1a <_vfiprintf_r+0x1ce>
 800cbae:	9b03      	ldr	r3, [sp, #12]
 800cbb0:	3402      	adds	r4, #2
 800cbb2:	1d1a      	adds	r2, r3, #4
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	9203      	str	r2, [sp, #12]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	bfb8      	it	lt
 800cbbc:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbc0:	9305      	str	r3, [sp, #20]
 800cbc2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800cc9c <_vfiprintf_r+0x250>
 800cbc6:	2203      	movs	r2, #3
 800cbc8:	4650      	mov	r0, sl
 800cbca:	7821      	ldrb	r1, [r4, #0]
 800cbcc:	f7ff f886 	bl	800bcdc <memchr>
 800cbd0:	b140      	cbz	r0, 800cbe4 <_vfiprintf_r+0x198>
 800cbd2:	2340      	movs	r3, #64	; 0x40
 800cbd4:	eba0 000a 	sub.w	r0, r0, sl
 800cbd8:	fa03 f000 	lsl.w	r0, r3, r0
 800cbdc:	9b04      	ldr	r3, [sp, #16]
 800cbde:	3401      	adds	r4, #1
 800cbe0:	4303      	orrs	r3, r0
 800cbe2:	9304      	str	r3, [sp, #16]
 800cbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbe8:	2206      	movs	r2, #6
 800cbea:	482d      	ldr	r0, [pc, #180]	; (800cca0 <_vfiprintf_r+0x254>)
 800cbec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbf0:	f7ff f874 	bl	800bcdc <memchr>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	d03f      	beq.n	800cc78 <_vfiprintf_r+0x22c>
 800cbf8:	4b2a      	ldr	r3, [pc, #168]	; (800cca4 <_vfiprintf_r+0x258>)
 800cbfa:	bb1b      	cbnz	r3, 800cc44 <_vfiprintf_r+0x1f8>
 800cbfc:	9b03      	ldr	r3, [sp, #12]
 800cbfe:	3307      	adds	r3, #7
 800cc00:	f023 0307 	bic.w	r3, r3, #7
 800cc04:	3308      	adds	r3, #8
 800cc06:	9303      	str	r3, [sp, #12]
 800cc08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc0a:	443b      	add	r3, r7
 800cc0c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc0e:	e767      	b.n	800cae0 <_vfiprintf_r+0x94>
 800cc10:	460c      	mov	r4, r1
 800cc12:	2001      	movs	r0, #1
 800cc14:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc18:	e7a5      	b.n	800cb66 <_vfiprintf_r+0x11a>
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	f04f 0c0a 	mov.w	ip, #10
 800cc20:	4619      	mov	r1, r3
 800cc22:	3401      	adds	r4, #1
 800cc24:	9305      	str	r3, [sp, #20]
 800cc26:	4620      	mov	r0, r4
 800cc28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc2c:	3a30      	subs	r2, #48	; 0x30
 800cc2e:	2a09      	cmp	r2, #9
 800cc30:	d903      	bls.n	800cc3a <_vfiprintf_r+0x1ee>
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d0c5      	beq.n	800cbc2 <_vfiprintf_r+0x176>
 800cc36:	9105      	str	r1, [sp, #20]
 800cc38:	e7c3      	b.n	800cbc2 <_vfiprintf_r+0x176>
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc42:	e7f0      	b.n	800cc26 <_vfiprintf_r+0x1da>
 800cc44:	ab03      	add	r3, sp, #12
 800cc46:	9300      	str	r3, [sp, #0]
 800cc48:	462a      	mov	r2, r5
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	4b16      	ldr	r3, [pc, #88]	; (800cca8 <_vfiprintf_r+0x25c>)
 800cc4e:	a904      	add	r1, sp, #16
 800cc50:	f7fd fddc 	bl	800a80c <_printf_float>
 800cc54:	4607      	mov	r7, r0
 800cc56:	1c78      	adds	r0, r7, #1
 800cc58:	d1d6      	bne.n	800cc08 <_vfiprintf_r+0x1bc>
 800cc5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc5c:	07d9      	lsls	r1, r3, #31
 800cc5e:	d405      	bmi.n	800cc6c <_vfiprintf_r+0x220>
 800cc60:	89ab      	ldrh	r3, [r5, #12]
 800cc62:	059a      	lsls	r2, r3, #22
 800cc64:	d402      	bmi.n	800cc6c <_vfiprintf_r+0x220>
 800cc66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc68:	f000 faab 	bl	800d1c2 <__retarget_lock_release_recursive>
 800cc6c:	89ab      	ldrh	r3, [r5, #12]
 800cc6e:	065b      	lsls	r3, r3, #25
 800cc70:	f53f af12 	bmi.w	800ca98 <_vfiprintf_r+0x4c>
 800cc74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc76:	e711      	b.n	800ca9c <_vfiprintf_r+0x50>
 800cc78:	ab03      	add	r3, sp, #12
 800cc7a:	9300      	str	r3, [sp, #0]
 800cc7c:	462a      	mov	r2, r5
 800cc7e:	4630      	mov	r0, r6
 800cc80:	4b09      	ldr	r3, [pc, #36]	; (800cca8 <_vfiprintf_r+0x25c>)
 800cc82:	a904      	add	r1, sp, #16
 800cc84:	f7fe f85e 	bl	800ad44 <_printf_i>
 800cc88:	e7e4      	b.n	800cc54 <_vfiprintf_r+0x208>
 800cc8a:	bf00      	nop
 800cc8c:	0800d934 	.word	0x0800d934
 800cc90:	0800d954 	.word	0x0800d954
 800cc94:	0800d914 	.word	0x0800d914
 800cc98:	0800d7bc 	.word	0x0800d7bc
 800cc9c:	0800d7c2 	.word	0x0800d7c2
 800cca0:	0800d7c6 	.word	0x0800d7c6
 800cca4:	0800a80d 	.word	0x0800a80d
 800cca8:	0800ca29 	.word	0x0800ca29

0800ccac <__swbuf_r>:
 800ccac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccae:	460e      	mov	r6, r1
 800ccb0:	4614      	mov	r4, r2
 800ccb2:	4605      	mov	r5, r0
 800ccb4:	b118      	cbz	r0, 800ccbe <__swbuf_r+0x12>
 800ccb6:	6983      	ldr	r3, [r0, #24]
 800ccb8:	b90b      	cbnz	r3, 800ccbe <__swbuf_r+0x12>
 800ccba:	f000 f9e3 	bl	800d084 <__sinit>
 800ccbe:	4b21      	ldr	r3, [pc, #132]	; (800cd44 <__swbuf_r+0x98>)
 800ccc0:	429c      	cmp	r4, r3
 800ccc2:	d12b      	bne.n	800cd1c <__swbuf_r+0x70>
 800ccc4:	686c      	ldr	r4, [r5, #4]
 800ccc6:	69a3      	ldr	r3, [r4, #24]
 800ccc8:	60a3      	str	r3, [r4, #8]
 800ccca:	89a3      	ldrh	r3, [r4, #12]
 800cccc:	071a      	lsls	r2, r3, #28
 800ccce:	d52f      	bpl.n	800cd30 <__swbuf_r+0x84>
 800ccd0:	6923      	ldr	r3, [r4, #16]
 800ccd2:	b36b      	cbz	r3, 800cd30 <__swbuf_r+0x84>
 800ccd4:	6923      	ldr	r3, [r4, #16]
 800ccd6:	6820      	ldr	r0, [r4, #0]
 800ccd8:	b2f6      	uxtb	r6, r6
 800ccda:	1ac0      	subs	r0, r0, r3
 800ccdc:	6963      	ldr	r3, [r4, #20]
 800ccde:	4637      	mov	r7, r6
 800cce0:	4283      	cmp	r3, r0
 800cce2:	dc04      	bgt.n	800ccee <__swbuf_r+0x42>
 800cce4:	4621      	mov	r1, r4
 800cce6:	4628      	mov	r0, r5
 800cce8:	f000 f938 	bl	800cf5c <_fflush_r>
 800ccec:	bb30      	cbnz	r0, 800cd3c <__swbuf_r+0x90>
 800ccee:	68a3      	ldr	r3, [r4, #8]
 800ccf0:	3001      	adds	r0, #1
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	60a3      	str	r3, [r4, #8]
 800ccf6:	6823      	ldr	r3, [r4, #0]
 800ccf8:	1c5a      	adds	r2, r3, #1
 800ccfa:	6022      	str	r2, [r4, #0]
 800ccfc:	701e      	strb	r6, [r3, #0]
 800ccfe:	6963      	ldr	r3, [r4, #20]
 800cd00:	4283      	cmp	r3, r0
 800cd02:	d004      	beq.n	800cd0e <__swbuf_r+0x62>
 800cd04:	89a3      	ldrh	r3, [r4, #12]
 800cd06:	07db      	lsls	r3, r3, #31
 800cd08:	d506      	bpl.n	800cd18 <__swbuf_r+0x6c>
 800cd0a:	2e0a      	cmp	r6, #10
 800cd0c:	d104      	bne.n	800cd18 <__swbuf_r+0x6c>
 800cd0e:	4621      	mov	r1, r4
 800cd10:	4628      	mov	r0, r5
 800cd12:	f000 f923 	bl	800cf5c <_fflush_r>
 800cd16:	b988      	cbnz	r0, 800cd3c <__swbuf_r+0x90>
 800cd18:	4638      	mov	r0, r7
 800cd1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd1c:	4b0a      	ldr	r3, [pc, #40]	; (800cd48 <__swbuf_r+0x9c>)
 800cd1e:	429c      	cmp	r4, r3
 800cd20:	d101      	bne.n	800cd26 <__swbuf_r+0x7a>
 800cd22:	68ac      	ldr	r4, [r5, #8]
 800cd24:	e7cf      	b.n	800ccc6 <__swbuf_r+0x1a>
 800cd26:	4b09      	ldr	r3, [pc, #36]	; (800cd4c <__swbuf_r+0xa0>)
 800cd28:	429c      	cmp	r4, r3
 800cd2a:	bf08      	it	eq
 800cd2c:	68ec      	ldreq	r4, [r5, #12]
 800cd2e:	e7ca      	b.n	800ccc6 <__swbuf_r+0x1a>
 800cd30:	4621      	mov	r1, r4
 800cd32:	4628      	mov	r0, r5
 800cd34:	f000 f81a 	bl	800cd6c <__swsetup_r>
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	d0cb      	beq.n	800ccd4 <__swbuf_r+0x28>
 800cd3c:	f04f 37ff 	mov.w	r7, #4294967295
 800cd40:	e7ea      	b.n	800cd18 <__swbuf_r+0x6c>
 800cd42:	bf00      	nop
 800cd44:	0800d934 	.word	0x0800d934
 800cd48:	0800d954 	.word	0x0800d954
 800cd4c:	0800d914 	.word	0x0800d914

0800cd50 <__ascii_wctomb>:
 800cd50:	4603      	mov	r3, r0
 800cd52:	4608      	mov	r0, r1
 800cd54:	b141      	cbz	r1, 800cd68 <__ascii_wctomb+0x18>
 800cd56:	2aff      	cmp	r2, #255	; 0xff
 800cd58:	d904      	bls.n	800cd64 <__ascii_wctomb+0x14>
 800cd5a:	228a      	movs	r2, #138	; 0x8a
 800cd5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd60:	601a      	str	r2, [r3, #0]
 800cd62:	4770      	bx	lr
 800cd64:	2001      	movs	r0, #1
 800cd66:	700a      	strb	r2, [r1, #0]
 800cd68:	4770      	bx	lr
	...

0800cd6c <__swsetup_r>:
 800cd6c:	4b32      	ldr	r3, [pc, #200]	; (800ce38 <__swsetup_r+0xcc>)
 800cd6e:	b570      	push	{r4, r5, r6, lr}
 800cd70:	681d      	ldr	r5, [r3, #0]
 800cd72:	4606      	mov	r6, r0
 800cd74:	460c      	mov	r4, r1
 800cd76:	b125      	cbz	r5, 800cd82 <__swsetup_r+0x16>
 800cd78:	69ab      	ldr	r3, [r5, #24]
 800cd7a:	b913      	cbnz	r3, 800cd82 <__swsetup_r+0x16>
 800cd7c:	4628      	mov	r0, r5
 800cd7e:	f000 f981 	bl	800d084 <__sinit>
 800cd82:	4b2e      	ldr	r3, [pc, #184]	; (800ce3c <__swsetup_r+0xd0>)
 800cd84:	429c      	cmp	r4, r3
 800cd86:	d10f      	bne.n	800cda8 <__swsetup_r+0x3c>
 800cd88:	686c      	ldr	r4, [r5, #4]
 800cd8a:	89a3      	ldrh	r3, [r4, #12]
 800cd8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd90:	0719      	lsls	r1, r3, #28
 800cd92:	d42c      	bmi.n	800cdee <__swsetup_r+0x82>
 800cd94:	06dd      	lsls	r5, r3, #27
 800cd96:	d411      	bmi.n	800cdbc <__swsetup_r+0x50>
 800cd98:	2309      	movs	r3, #9
 800cd9a:	6033      	str	r3, [r6, #0]
 800cd9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cda0:	f04f 30ff 	mov.w	r0, #4294967295
 800cda4:	81a3      	strh	r3, [r4, #12]
 800cda6:	e03e      	b.n	800ce26 <__swsetup_r+0xba>
 800cda8:	4b25      	ldr	r3, [pc, #148]	; (800ce40 <__swsetup_r+0xd4>)
 800cdaa:	429c      	cmp	r4, r3
 800cdac:	d101      	bne.n	800cdb2 <__swsetup_r+0x46>
 800cdae:	68ac      	ldr	r4, [r5, #8]
 800cdb0:	e7eb      	b.n	800cd8a <__swsetup_r+0x1e>
 800cdb2:	4b24      	ldr	r3, [pc, #144]	; (800ce44 <__swsetup_r+0xd8>)
 800cdb4:	429c      	cmp	r4, r3
 800cdb6:	bf08      	it	eq
 800cdb8:	68ec      	ldreq	r4, [r5, #12]
 800cdba:	e7e6      	b.n	800cd8a <__swsetup_r+0x1e>
 800cdbc:	0758      	lsls	r0, r3, #29
 800cdbe:	d512      	bpl.n	800cde6 <__swsetup_r+0x7a>
 800cdc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdc2:	b141      	cbz	r1, 800cdd6 <__swsetup_r+0x6a>
 800cdc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdc8:	4299      	cmp	r1, r3
 800cdca:	d002      	beq.n	800cdd2 <__swsetup_r+0x66>
 800cdcc:	4630      	mov	r0, r6
 800cdce:	f7ff fb37 	bl	800c440 <_free_r>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	6363      	str	r3, [r4, #52]	; 0x34
 800cdd6:	89a3      	ldrh	r3, [r4, #12]
 800cdd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cddc:	81a3      	strh	r3, [r4, #12]
 800cdde:	2300      	movs	r3, #0
 800cde0:	6063      	str	r3, [r4, #4]
 800cde2:	6923      	ldr	r3, [r4, #16]
 800cde4:	6023      	str	r3, [r4, #0]
 800cde6:	89a3      	ldrh	r3, [r4, #12]
 800cde8:	f043 0308 	orr.w	r3, r3, #8
 800cdec:	81a3      	strh	r3, [r4, #12]
 800cdee:	6923      	ldr	r3, [r4, #16]
 800cdf0:	b94b      	cbnz	r3, 800ce06 <__swsetup_r+0x9a>
 800cdf2:	89a3      	ldrh	r3, [r4, #12]
 800cdf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cdf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdfc:	d003      	beq.n	800ce06 <__swsetup_r+0x9a>
 800cdfe:	4621      	mov	r1, r4
 800ce00:	4630      	mov	r0, r6
 800ce02:	f000 fa05 	bl	800d210 <__smakebuf_r>
 800ce06:	89a0      	ldrh	r0, [r4, #12]
 800ce08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce0c:	f010 0301 	ands.w	r3, r0, #1
 800ce10:	d00a      	beq.n	800ce28 <__swsetup_r+0xbc>
 800ce12:	2300      	movs	r3, #0
 800ce14:	60a3      	str	r3, [r4, #8]
 800ce16:	6963      	ldr	r3, [r4, #20]
 800ce18:	425b      	negs	r3, r3
 800ce1a:	61a3      	str	r3, [r4, #24]
 800ce1c:	6923      	ldr	r3, [r4, #16]
 800ce1e:	b943      	cbnz	r3, 800ce32 <__swsetup_r+0xc6>
 800ce20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce24:	d1ba      	bne.n	800cd9c <__swsetup_r+0x30>
 800ce26:	bd70      	pop	{r4, r5, r6, pc}
 800ce28:	0781      	lsls	r1, r0, #30
 800ce2a:	bf58      	it	pl
 800ce2c:	6963      	ldrpl	r3, [r4, #20]
 800ce2e:	60a3      	str	r3, [r4, #8]
 800ce30:	e7f4      	b.n	800ce1c <__swsetup_r+0xb0>
 800ce32:	2000      	movs	r0, #0
 800ce34:	e7f7      	b.n	800ce26 <__swsetup_r+0xba>
 800ce36:	bf00      	nop
 800ce38:	2000017c 	.word	0x2000017c
 800ce3c:	0800d934 	.word	0x0800d934
 800ce40:	0800d954 	.word	0x0800d954
 800ce44:	0800d914 	.word	0x0800d914

0800ce48 <abort>:
 800ce48:	2006      	movs	r0, #6
 800ce4a:	b508      	push	{r3, lr}
 800ce4c:	f000 fa50 	bl	800d2f0 <raise>
 800ce50:	2001      	movs	r0, #1
 800ce52:	f7f5 f8a2 	bl	8001f9a <_exit>
	...

0800ce58 <__sflush_r>:
 800ce58:	898a      	ldrh	r2, [r1, #12]
 800ce5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce5c:	4605      	mov	r5, r0
 800ce5e:	0710      	lsls	r0, r2, #28
 800ce60:	460c      	mov	r4, r1
 800ce62:	d457      	bmi.n	800cf14 <__sflush_r+0xbc>
 800ce64:	684b      	ldr	r3, [r1, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	dc04      	bgt.n	800ce74 <__sflush_r+0x1c>
 800ce6a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	dc01      	bgt.n	800ce74 <__sflush_r+0x1c>
 800ce70:	2000      	movs	r0, #0
 800ce72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce76:	2e00      	cmp	r6, #0
 800ce78:	d0fa      	beq.n	800ce70 <__sflush_r+0x18>
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce80:	682f      	ldr	r7, [r5, #0]
 800ce82:	602b      	str	r3, [r5, #0]
 800ce84:	d032      	beq.n	800ceec <__sflush_r+0x94>
 800ce86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce88:	89a3      	ldrh	r3, [r4, #12]
 800ce8a:	075a      	lsls	r2, r3, #29
 800ce8c:	d505      	bpl.n	800ce9a <__sflush_r+0x42>
 800ce8e:	6863      	ldr	r3, [r4, #4]
 800ce90:	1ac0      	subs	r0, r0, r3
 800ce92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce94:	b10b      	cbz	r3, 800ce9a <__sflush_r+0x42>
 800ce96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce98:	1ac0      	subs	r0, r0, r3
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cea0:	4628      	mov	r0, r5
 800cea2:	6a21      	ldr	r1, [r4, #32]
 800cea4:	47b0      	blx	r6
 800cea6:	1c43      	adds	r3, r0, #1
 800cea8:	89a3      	ldrh	r3, [r4, #12]
 800ceaa:	d106      	bne.n	800ceba <__sflush_r+0x62>
 800ceac:	6829      	ldr	r1, [r5, #0]
 800ceae:	291d      	cmp	r1, #29
 800ceb0:	d82c      	bhi.n	800cf0c <__sflush_r+0xb4>
 800ceb2:	4a29      	ldr	r2, [pc, #164]	; (800cf58 <__sflush_r+0x100>)
 800ceb4:	40ca      	lsrs	r2, r1
 800ceb6:	07d6      	lsls	r6, r2, #31
 800ceb8:	d528      	bpl.n	800cf0c <__sflush_r+0xb4>
 800ceba:	2200      	movs	r2, #0
 800cebc:	6062      	str	r2, [r4, #4]
 800cebe:	6922      	ldr	r2, [r4, #16]
 800cec0:	04d9      	lsls	r1, r3, #19
 800cec2:	6022      	str	r2, [r4, #0]
 800cec4:	d504      	bpl.n	800ced0 <__sflush_r+0x78>
 800cec6:	1c42      	adds	r2, r0, #1
 800cec8:	d101      	bne.n	800cece <__sflush_r+0x76>
 800ceca:	682b      	ldr	r3, [r5, #0]
 800cecc:	b903      	cbnz	r3, 800ced0 <__sflush_r+0x78>
 800cece:	6560      	str	r0, [r4, #84]	; 0x54
 800ced0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ced2:	602f      	str	r7, [r5, #0]
 800ced4:	2900      	cmp	r1, #0
 800ced6:	d0cb      	beq.n	800ce70 <__sflush_r+0x18>
 800ced8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cedc:	4299      	cmp	r1, r3
 800cede:	d002      	beq.n	800cee6 <__sflush_r+0x8e>
 800cee0:	4628      	mov	r0, r5
 800cee2:	f7ff faad 	bl	800c440 <_free_r>
 800cee6:	2000      	movs	r0, #0
 800cee8:	6360      	str	r0, [r4, #52]	; 0x34
 800ceea:	e7c2      	b.n	800ce72 <__sflush_r+0x1a>
 800ceec:	6a21      	ldr	r1, [r4, #32]
 800ceee:	2301      	movs	r3, #1
 800cef0:	4628      	mov	r0, r5
 800cef2:	47b0      	blx	r6
 800cef4:	1c41      	adds	r1, r0, #1
 800cef6:	d1c7      	bne.n	800ce88 <__sflush_r+0x30>
 800cef8:	682b      	ldr	r3, [r5, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d0c4      	beq.n	800ce88 <__sflush_r+0x30>
 800cefe:	2b1d      	cmp	r3, #29
 800cf00:	d001      	beq.n	800cf06 <__sflush_r+0xae>
 800cf02:	2b16      	cmp	r3, #22
 800cf04:	d101      	bne.n	800cf0a <__sflush_r+0xb2>
 800cf06:	602f      	str	r7, [r5, #0]
 800cf08:	e7b2      	b.n	800ce70 <__sflush_r+0x18>
 800cf0a:	89a3      	ldrh	r3, [r4, #12]
 800cf0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf10:	81a3      	strh	r3, [r4, #12]
 800cf12:	e7ae      	b.n	800ce72 <__sflush_r+0x1a>
 800cf14:	690f      	ldr	r7, [r1, #16]
 800cf16:	2f00      	cmp	r7, #0
 800cf18:	d0aa      	beq.n	800ce70 <__sflush_r+0x18>
 800cf1a:	0793      	lsls	r3, r2, #30
 800cf1c:	bf18      	it	ne
 800cf1e:	2300      	movne	r3, #0
 800cf20:	680e      	ldr	r6, [r1, #0]
 800cf22:	bf08      	it	eq
 800cf24:	694b      	ldreq	r3, [r1, #20]
 800cf26:	1bf6      	subs	r6, r6, r7
 800cf28:	600f      	str	r7, [r1, #0]
 800cf2a:	608b      	str	r3, [r1, #8]
 800cf2c:	2e00      	cmp	r6, #0
 800cf2e:	dd9f      	ble.n	800ce70 <__sflush_r+0x18>
 800cf30:	4633      	mov	r3, r6
 800cf32:	463a      	mov	r2, r7
 800cf34:	4628      	mov	r0, r5
 800cf36:	6a21      	ldr	r1, [r4, #32]
 800cf38:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cf3c:	47e0      	blx	ip
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	dc06      	bgt.n	800cf50 <__sflush_r+0xf8>
 800cf42:	89a3      	ldrh	r3, [r4, #12]
 800cf44:	f04f 30ff 	mov.w	r0, #4294967295
 800cf48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf4c:	81a3      	strh	r3, [r4, #12]
 800cf4e:	e790      	b.n	800ce72 <__sflush_r+0x1a>
 800cf50:	4407      	add	r7, r0
 800cf52:	1a36      	subs	r6, r6, r0
 800cf54:	e7ea      	b.n	800cf2c <__sflush_r+0xd4>
 800cf56:	bf00      	nop
 800cf58:	20400001 	.word	0x20400001

0800cf5c <_fflush_r>:
 800cf5c:	b538      	push	{r3, r4, r5, lr}
 800cf5e:	690b      	ldr	r3, [r1, #16]
 800cf60:	4605      	mov	r5, r0
 800cf62:	460c      	mov	r4, r1
 800cf64:	b913      	cbnz	r3, 800cf6c <_fflush_r+0x10>
 800cf66:	2500      	movs	r5, #0
 800cf68:	4628      	mov	r0, r5
 800cf6a:	bd38      	pop	{r3, r4, r5, pc}
 800cf6c:	b118      	cbz	r0, 800cf76 <_fflush_r+0x1a>
 800cf6e:	6983      	ldr	r3, [r0, #24]
 800cf70:	b90b      	cbnz	r3, 800cf76 <_fflush_r+0x1a>
 800cf72:	f000 f887 	bl	800d084 <__sinit>
 800cf76:	4b14      	ldr	r3, [pc, #80]	; (800cfc8 <_fflush_r+0x6c>)
 800cf78:	429c      	cmp	r4, r3
 800cf7a:	d11b      	bne.n	800cfb4 <_fflush_r+0x58>
 800cf7c:	686c      	ldr	r4, [r5, #4]
 800cf7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d0ef      	beq.n	800cf66 <_fflush_r+0xa>
 800cf86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf88:	07d0      	lsls	r0, r2, #31
 800cf8a:	d404      	bmi.n	800cf96 <_fflush_r+0x3a>
 800cf8c:	0599      	lsls	r1, r3, #22
 800cf8e:	d402      	bmi.n	800cf96 <_fflush_r+0x3a>
 800cf90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf92:	f000 f915 	bl	800d1c0 <__retarget_lock_acquire_recursive>
 800cf96:	4628      	mov	r0, r5
 800cf98:	4621      	mov	r1, r4
 800cf9a:	f7ff ff5d 	bl	800ce58 <__sflush_r>
 800cf9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cfa0:	4605      	mov	r5, r0
 800cfa2:	07da      	lsls	r2, r3, #31
 800cfa4:	d4e0      	bmi.n	800cf68 <_fflush_r+0xc>
 800cfa6:	89a3      	ldrh	r3, [r4, #12]
 800cfa8:	059b      	lsls	r3, r3, #22
 800cfaa:	d4dd      	bmi.n	800cf68 <_fflush_r+0xc>
 800cfac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfae:	f000 f908 	bl	800d1c2 <__retarget_lock_release_recursive>
 800cfb2:	e7d9      	b.n	800cf68 <_fflush_r+0xc>
 800cfb4:	4b05      	ldr	r3, [pc, #20]	; (800cfcc <_fflush_r+0x70>)
 800cfb6:	429c      	cmp	r4, r3
 800cfb8:	d101      	bne.n	800cfbe <_fflush_r+0x62>
 800cfba:	68ac      	ldr	r4, [r5, #8]
 800cfbc:	e7df      	b.n	800cf7e <_fflush_r+0x22>
 800cfbe:	4b04      	ldr	r3, [pc, #16]	; (800cfd0 <_fflush_r+0x74>)
 800cfc0:	429c      	cmp	r4, r3
 800cfc2:	bf08      	it	eq
 800cfc4:	68ec      	ldreq	r4, [r5, #12]
 800cfc6:	e7da      	b.n	800cf7e <_fflush_r+0x22>
 800cfc8:	0800d934 	.word	0x0800d934
 800cfcc:	0800d954 	.word	0x0800d954
 800cfd0:	0800d914 	.word	0x0800d914

0800cfd4 <std>:
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	b510      	push	{r4, lr}
 800cfd8:	4604      	mov	r4, r0
 800cfda:	e9c0 3300 	strd	r3, r3, [r0]
 800cfde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cfe2:	6083      	str	r3, [r0, #8]
 800cfe4:	8181      	strh	r1, [r0, #12]
 800cfe6:	6643      	str	r3, [r0, #100]	; 0x64
 800cfe8:	81c2      	strh	r2, [r0, #14]
 800cfea:	6183      	str	r3, [r0, #24]
 800cfec:	4619      	mov	r1, r3
 800cfee:	2208      	movs	r2, #8
 800cff0:	305c      	adds	r0, #92	; 0x5c
 800cff2:	f7fd fb65 	bl	800a6c0 <memset>
 800cff6:	4b05      	ldr	r3, [pc, #20]	; (800d00c <std+0x38>)
 800cff8:	6224      	str	r4, [r4, #32]
 800cffa:	6263      	str	r3, [r4, #36]	; 0x24
 800cffc:	4b04      	ldr	r3, [pc, #16]	; (800d010 <std+0x3c>)
 800cffe:	62a3      	str	r3, [r4, #40]	; 0x28
 800d000:	4b04      	ldr	r3, [pc, #16]	; (800d014 <std+0x40>)
 800d002:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d004:	4b04      	ldr	r3, [pc, #16]	; (800d018 <std+0x44>)
 800d006:	6323      	str	r3, [r4, #48]	; 0x30
 800d008:	bd10      	pop	{r4, pc}
 800d00a:	bf00      	nop
 800d00c:	0800d329 	.word	0x0800d329
 800d010:	0800d34b 	.word	0x0800d34b
 800d014:	0800d383 	.word	0x0800d383
 800d018:	0800d3a7 	.word	0x0800d3a7

0800d01c <_cleanup_r>:
 800d01c:	4901      	ldr	r1, [pc, #4]	; (800d024 <_cleanup_r+0x8>)
 800d01e:	f000 b8af 	b.w	800d180 <_fwalk_reent>
 800d022:	bf00      	nop
 800d024:	0800cf5d 	.word	0x0800cf5d

0800d028 <__sfmoreglue>:
 800d028:	2268      	movs	r2, #104	; 0x68
 800d02a:	b570      	push	{r4, r5, r6, lr}
 800d02c:	1e4d      	subs	r5, r1, #1
 800d02e:	4355      	muls	r5, r2
 800d030:	460e      	mov	r6, r1
 800d032:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d036:	f7ff fa6b 	bl	800c510 <_malloc_r>
 800d03a:	4604      	mov	r4, r0
 800d03c:	b140      	cbz	r0, 800d050 <__sfmoreglue+0x28>
 800d03e:	2100      	movs	r1, #0
 800d040:	e9c0 1600 	strd	r1, r6, [r0]
 800d044:	300c      	adds	r0, #12
 800d046:	60a0      	str	r0, [r4, #8]
 800d048:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d04c:	f7fd fb38 	bl	800a6c0 <memset>
 800d050:	4620      	mov	r0, r4
 800d052:	bd70      	pop	{r4, r5, r6, pc}

0800d054 <__sfp_lock_acquire>:
 800d054:	4801      	ldr	r0, [pc, #4]	; (800d05c <__sfp_lock_acquire+0x8>)
 800d056:	f000 b8b3 	b.w	800d1c0 <__retarget_lock_acquire_recursive>
 800d05a:	bf00      	nop
 800d05c:	20001721 	.word	0x20001721

0800d060 <__sfp_lock_release>:
 800d060:	4801      	ldr	r0, [pc, #4]	; (800d068 <__sfp_lock_release+0x8>)
 800d062:	f000 b8ae 	b.w	800d1c2 <__retarget_lock_release_recursive>
 800d066:	bf00      	nop
 800d068:	20001721 	.word	0x20001721

0800d06c <__sinit_lock_acquire>:
 800d06c:	4801      	ldr	r0, [pc, #4]	; (800d074 <__sinit_lock_acquire+0x8>)
 800d06e:	f000 b8a7 	b.w	800d1c0 <__retarget_lock_acquire_recursive>
 800d072:	bf00      	nop
 800d074:	20001722 	.word	0x20001722

0800d078 <__sinit_lock_release>:
 800d078:	4801      	ldr	r0, [pc, #4]	; (800d080 <__sinit_lock_release+0x8>)
 800d07a:	f000 b8a2 	b.w	800d1c2 <__retarget_lock_release_recursive>
 800d07e:	bf00      	nop
 800d080:	20001722 	.word	0x20001722

0800d084 <__sinit>:
 800d084:	b510      	push	{r4, lr}
 800d086:	4604      	mov	r4, r0
 800d088:	f7ff fff0 	bl	800d06c <__sinit_lock_acquire>
 800d08c:	69a3      	ldr	r3, [r4, #24]
 800d08e:	b11b      	cbz	r3, 800d098 <__sinit+0x14>
 800d090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d094:	f7ff bff0 	b.w	800d078 <__sinit_lock_release>
 800d098:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d09c:	6523      	str	r3, [r4, #80]	; 0x50
 800d09e:	4b13      	ldr	r3, [pc, #76]	; (800d0ec <__sinit+0x68>)
 800d0a0:	4a13      	ldr	r2, [pc, #76]	; (800d0f0 <__sinit+0x6c>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800d0a6:	42a3      	cmp	r3, r4
 800d0a8:	bf08      	it	eq
 800d0aa:	2301      	moveq	r3, #1
 800d0ac:	4620      	mov	r0, r4
 800d0ae:	bf08      	it	eq
 800d0b0:	61a3      	streq	r3, [r4, #24]
 800d0b2:	f000 f81f 	bl	800d0f4 <__sfp>
 800d0b6:	6060      	str	r0, [r4, #4]
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	f000 f81b 	bl	800d0f4 <__sfp>
 800d0be:	60a0      	str	r0, [r4, #8]
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f000 f817 	bl	800d0f4 <__sfp>
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	2104      	movs	r1, #4
 800d0ca:	60e0      	str	r0, [r4, #12]
 800d0cc:	6860      	ldr	r0, [r4, #4]
 800d0ce:	f7ff ff81 	bl	800cfd4 <std>
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	2109      	movs	r1, #9
 800d0d6:	68a0      	ldr	r0, [r4, #8]
 800d0d8:	f7ff ff7c 	bl	800cfd4 <std>
 800d0dc:	2202      	movs	r2, #2
 800d0de:	2112      	movs	r1, #18
 800d0e0:	68e0      	ldr	r0, [r4, #12]
 800d0e2:	f7ff ff77 	bl	800cfd4 <std>
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	61a3      	str	r3, [r4, #24]
 800d0ea:	e7d1      	b.n	800d090 <__sinit+0xc>
 800d0ec:	0800d598 	.word	0x0800d598
 800d0f0:	0800d01d 	.word	0x0800d01d

0800d0f4 <__sfp>:
 800d0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0f6:	4607      	mov	r7, r0
 800d0f8:	f7ff ffac 	bl	800d054 <__sfp_lock_acquire>
 800d0fc:	4b1e      	ldr	r3, [pc, #120]	; (800d178 <__sfp+0x84>)
 800d0fe:	681e      	ldr	r6, [r3, #0]
 800d100:	69b3      	ldr	r3, [r6, #24]
 800d102:	b913      	cbnz	r3, 800d10a <__sfp+0x16>
 800d104:	4630      	mov	r0, r6
 800d106:	f7ff ffbd 	bl	800d084 <__sinit>
 800d10a:	3648      	adds	r6, #72	; 0x48
 800d10c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d110:	3b01      	subs	r3, #1
 800d112:	d503      	bpl.n	800d11c <__sfp+0x28>
 800d114:	6833      	ldr	r3, [r6, #0]
 800d116:	b30b      	cbz	r3, 800d15c <__sfp+0x68>
 800d118:	6836      	ldr	r6, [r6, #0]
 800d11a:	e7f7      	b.n	800d10c <__sfp+0x18>
 800d11c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d120:	b9d5      	cbnz	r5, 800d158 <__sfp+0x64>
 800d122:	4b16      	ldr	r3, [pc, #88]	; (800d17c <__sfp+0x88>)
 800d124:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d128:	60e3      	str	r3, [r4, #12]
 800d12a:	6665      	str	r5, [r4, #100]	; 0x64
 800d12c:	f000 f847 	bl	800d1be <__retarget_lock_init_recursive>
 800d130:	f7ff ff96 	bl	800d060 <__sfp_lock_release>
 800d134:	2208      	movs	r2, #8
 800d136:	4629      	mov	r1, r5
 800d138:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d13c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d140:	6025      	str	r5, [r4, #0]
 800d142:	61a5      	str	r5, [r4, #24]
 800d144:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d148:	f7fd faba 	bl	800a6c0 <memset>
 800d14c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d150:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d154:	4620      	mov	r0, r4
 800d156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d158:	3468      	adds	r4, #104	; 0x68
 800d15a:	e7d9      	b.n	800d110 <__sfp+0x1c>
 800d15c:	2104      	movs	r1, #4
 800d15e:	4638      	mov	r0, r7
 800d160:	f7ff ff62 	bl	800d028 <__sfmoreglue>
 800d164:	4604      	mov	r4, r0
 800d166:	6030      	str	r0, [r6, #0]
 800d168:	2800      	cmp	r0, #0
 800d16a:	d1d5      	bne.n	800d118 <__sfp+0x24>
 800d16c:	f7ff ff78 	bl	800d060 <__sfp_lock_release>
 800d170:	230c      	movs	r3, #12
 800d172:	603b      	str	r3, [r7, #0]
 800d174:	e7ee      	b.n	800d154 <__sfp+0x60>
 800d176:	bf00      	nop
 800d178:	0800d598 	.word	0x0800d598
 800d17c:	ffff0001 	.word	0xffff0001

0800d180 <_fwalk_reent>:
 800d180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d184:	4606      	mov	r6, r0
 800d186:	4688      	mov	r8, r1
 800d188:	2700      	movs	r7, #0
 800d18a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d18e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d192:	f1b9 0901 	subs.w	r9, r9, #1
 800d196:	d505      	bpl.n	800d1a4 <_fwalk_reent+0x24>
 800d198:	6824      	ldr	r4, [r4, #0]
 800d19a:	2c00      	cmp	r4, #0
 800d19c:	d1f7      	bne.n	800d18e <_fwalk_reent+0xe>
 800d19e:	4638      	mov	r0, r7
 800d1a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1a4:	89ab      	ldrh	r3, [r5, #12]
 800d1a6:	2b01      	cmp	r3, #1
 800d1a8:	d907      	bls.n	800d1ba <_fwalk_reent+0x3a>
 800d1aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	d003      	beq.n	800d1ba <_fwalk_reent+0x3a>
 800d1b2:	4629      	mov	r1, r5
 800d1b4:	4630      	mov	r0, r6
 800d1b6:	47c0      	blx	r8
 800d1b8:	4307      	orrs	r7, r0
 800d1ba:	3568      	adds	r5, #104	; 0x68
 800d1bc:	e7e9      	b.n	800d192 <_fwalk_reent+0x12>

0800d1be <__retarget_lock_init_recursive>:
 800d1be:	4770      	bx	lr

0800d1c0 <__retarget_lock_acquire_recursive>:
 800d1c0:	4770      	bx	lr

0800d1c2 <__retarget_lock_release_recursive>:
 800d1c2:	4770      	bx	lr

0800d1c4 <__swhatbuf_r>:
 800d1c4:	b570      	push	{r4, r5, r6, lr}
 800d1c6:	460e      	mov	r6, r1
 800d1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1cc:	4614      	mov	r4, r2
 800d1ce:	2900      	cmp	r1, #0
 800d1d0:	461d      	mov	r5, r3
 800d1d2:	b096      	sub	sp, #88	; 0x58
 800d1d4:	da08      	bge.n	800d1e8 <__swhatbuf_r+0x24>
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d1dc:	602a      	str	r2, [r5, #0]
 800d1de:	061a      	lsls	r2, r3, #24
 800d1e0:	d410      	bmi.n	800d204 <__swhatbuf_r+0x40>
 800d1e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1e6:	e00e      	b.n	800d206 <__swhatbuf_r+0x42>
 800d1e8:	466a      	mov	r2, sp
 800d1ea:	f000 f903 	bl	800d3f4 <_fstat_r>
 800d1ee:	2800      	cmp	r0, #0
 800d1f0:	dbf1      	blt.n	800d1d6 <__swhatbuf_r+0x12>
 800d1f2:	9a01      	ldr	r2, [sp, #4]
 800d1f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d1f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d1fc:	425a      	negs	r2, r3
 800d1fe:	415a      	adcs	r2, r3
 800d200:	602a      	str	r2, [r5, #0]
 800d202:	e7ee      	b.n	800d1e2 <__swhatbuf_r+0x1e>
 800d204:	2340      	movs	r3, #64	; 0x40
 800d206:	2000      	movs	r0, #0
 800d208:	6023      	str	r3, [r4, #0]
 800d20a:	b016      	add	sp, #88	; 0x58
 800d20c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d210 <__smakebuf_r>:
 800d210:	898b      	ldrh	r3, [r1, #12]
 800d212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d214:	079d      	lsls	r5, r3, #30
 800d216:	4606      	mov	r6, r0
 800d218:	460c      	mov	r4, r1
 800d21a:	d507      	bpl.n	800d22c <__smakebuf_r+0x1c>
 800d21c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d220:	6023      	str	r3, [r4, #0]
 800d222:	6123      	str	r3, [r4, #16]
 800d224:	2301      	movs	r3, #1
 800d226:	6163      	str	r3, [r4, #20]
 800d228:	b002      	add	sp, #8
 800d22a:	bd70      	pop	{r4, r5, r6, pc}
 800d22c:	466a      	mov	r2, sp
 800d22e:	ab01      	add	r3, sp, #4
 800d230:	f7ff ffc8 	bl	800d1c4 <__swhatbuf_r>
 800d234:	9900      	ldr	r1, [sp, #0]
 800d236:	4605      	mov	r5, r0
 800d238:	4630      	mov	r0, r6
 800d23a:	f7ff f969 	bl	800c510 <_malloc_r>
 800d23e:	b948      	cbnz	r0, 800d254 <__smakebuf_r+0x44>
 800d240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d244:	059a      	lsls	r2, r3, #22
 800d246:	d4ef      	bmi.n	800d228 <__smakebuf_r+0x18>
 800d248:	f023 0303 	bic.w	r3, r3, #3
 800d24c:	f043 0302 	orr.w	r3, r3, #2
 800d250:	81a3      	strh	r3, [r4, #12]
 800d252:	e7e3      	b.n	800d21c <__smakebuf_r+0xc>
 800d254:	4b0d      	ldr	r3, [pc, #52]	; (800d28c <__smakebuf_r+0x7c>)
 800d256:	62b3      	str	r3, [r6, #40]	; 0x28
 800d258:	89a3      	ldrh	r3, [r4, #12]
 800d25a:	6020      	str	r0, [r4, #0]
 800d25c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d260:	81a3      	strh	r3, [r4, #12]
 800d262:	9b00      	ldr	r3, [sp, #0]
 800d264:	6120      	str	r0, [r4, #16]
 800d266:	6163      	str	r3, [r4, #20]
 800d268:	9b01      	ldr	r3, [sp, #4]
 800d26a:	b15b      	cbz	r3, 800d284 <__smakebuf_r+0x74>
 800d26c:	4630      	mov	r0, r6
 800d26e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d272:	f000 f8d1 	bl	800d418 <_isatty_r>
 800d276:	b128      	cbz	r0, 800d284 <__smakebuf_r+0x74>
 800d278:	89a3      	ldrh	r3, [r4, #12]
 800d27a:	f023 0303 	bic.w	r3, r3, #3
 800d27e:	f043 0301 	orr.w	r3, r3, #1
 800d282:	81a3      	strh	r3, [r4, #12]
 800d284:	89a0      	ldrh	r0, [r4, #12]
 800d286:	4305      	orrs	r5, r0
 800d288:	81a5      	strh	r5, [r4, #12]
 800d28a:	e7cd      	b.n	800d228 <__smakebuf_r+0x18>
 800d28c:	0800d01d 	.word	0x0800d01d

0800d290 <_malloc_usable_size_r>:
 800d290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d294:	1f18      	subs	r0, r3, #4
 800d296:	2b00      	cmp	r3, #0
 800d298:	bfbc      	itt	lt
 800d29a:	580b      	ldrlt	r3, [r1, r0]
 800d29c:	18c0      	addlt	r0, r0, r3
 800d29e:	4770      	bx	lr

0800d2a0 <_raise_r>:
 800d2a0:	291f      	cmp	r1, #31
 800d2a2:	b538      	push	{r3, r4, r5, lr}
 800d2a4:	4604      	mov	r4, r0
 800d2a6:	460d      	mov	r5, r1
 800d2a8:	d904      	bls.n	800d2b4 <_raise_r+0x14>
 800d2aa:	2316      	movs	r3, #22
 800d2ac:	6003      	str	r3, [r0, #0]
 800d2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b2:	bd38      	pop	{r3, r4, r5, pc}
 800d2b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d2b6:	b112      	cbz	r2, 800d2be <_raise_r+0x1e>
 800d2b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d2bc:	b94b      	cbnz	r3, 800d2d2 <_raise_r+0x32>
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f000 f830 	bl	800d324 <_getpid_r>
 800d2c4:	462a      	mov	r2, r5
 800d2c6:	4601      	mov	r1, r0
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2ce:	f000 b817 	b.w	800d300 <_kill_r>
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d00a      	beq.n	800d2ec <_raise_r+0x4c>
 800d2d6:	1c59      	adds	r1, r3, #1
 800d2d8:	d103      	bne.n	800d2e2 <_raise_r+0x42>
 800d2da:	2316      	movs	r3, #22
 800d2dc:	6003      	str	r3, [r0, #0]
 800d2de:	2001      	movs	r0, #1
 800d2e0:	e7e7      	b.n	800d2b2 <_raise_r+0x12>
 800d2e2:	2400      	movs	r4, #0
 800d2e4:	4628      	mov	r0, r5
 800d2e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d2ea:	4798      	blx	r3
 800d2ec:	2000      	movs	r0, #0
 800d2ee:	e7e0      	b.n	800d2b2 <_raise_r+0x12>

0800d2f0 <raise>:
 800d2f0:	4b02      	ldr	r3, [pc, #8]	; (800d2fc <raise+0xc>)
 800d2f2:	4601      	mov	r1, r0
 800d2f4:	6818      	ldr	r0, [r3, #0]
 800d2f6:	f7ff bfd3 	b.w	800d2a0 <_raise_r>
 800d2fa:	bf00      	nop
 800d2fc:	2000017c 	.word	0x2000017c

0800d300 <_kill_r>:
 800d300:	b538      	push	{r3, r4, r5, lr}
 800d302:	2300      	movs	r3, #0
 800d304:	4d06      	ldr	r5, [pc, #24]	; (800d320 <_kill_r+0x20>)
 800d306:	4604      	mov	r4, r0
 800d308:	4608      	mov	r0, r1
 800d30a:	4611      	mov	r1, r2
 800d30c:	602b      	str	r3, [r5, #0]
 800d30e:	f7f4 fe34 	bl	8001f7a <_kill>
 800d312:	1c43      	adds	r3, r0, #1
 800d314:	d102      	bne.n	800d31c <_kill_r+0x1c>
 800d316:	682b      	ldr	r3, [r5, #0]
 800d318:	b103      	cbz	r3, 800d31c <_kill_r+0x1c>
 800d31a:	6023      	str	r3, [r4, #0]
 800d31c:	bd38      	pop	{r3, r4, r5, pc}
 800d31e:	bf00      	nop
 800d320:	2000171c 	.word	0x2000171c

0800d324 <_getpid_r>:
 800d324:	f7f4 be22 	b.w	8001f6c <_getpid>

0800d328 <__sread>:
 800d328:	b510      	push	{r4, lr}
 800d32a:	460c      	mov	r4, r1
 800d32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d330:	f000 f894 	bl	800d45c <_read_r>
 800d334:	2800      	cmp	r0, #0
 800d336:	bfab      	itete	ge
 800d338:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d33a:	89a3      	ldrhlt	r3, [r4, #12]
 800d33c:	181b      	addge	r3, r3, r0
 800d33e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d342:	bfac      	ite	ge
 800d344:	6563      	strge	r3, [r4, #84]	; 0x54
 800d346:	81a3      	strhlt	r3, [r4, #12]
 800d348:	bd10      	pop	{r4, pc}

0800d34a <__swrite>:
 800d34a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d34e:	461f      	mov	r7, r3
 800d350:	898b      	ldrh	r3, [r1, #12]
 800d352:	4605      	mov	r5, r0
 800d354:	05db      	lsls	r3, r3, #23
 800d356:	460c      	mov	r4, r1
 800d358:	4616      	mov	r6, r2
 800d35a:	d505      	bpl.n	800d368 <__swrite+0x1e>
 800d35c:	2302      	movs	r3, #2
 800d35e:	2200      	movs	r2, #0
 800d360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d364:	f000 f868 	bl	800d438 <_lseek_r>
 800d368:	89a3      	ldrh	r3, [r4, #12]
 800d36a:	4632      	mov	r2, r6
 800d36c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d370:	81a3      	strh	r3, [r4, #12]
 800d372:	4628      	mov	r0, r5
 800d374:	463b      	mov	r3, r7
 800d376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d37a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d37e:	f000 b817 	b.w	800d3b0 <_write_r>

0800d382 <__sseek>:
 800d382:	b510      	push	{r4, lr}
 800d384:	460c      	mov	r4, r1
 800d386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d38a:	f000 f855 	bl	800d438 <_lseek_r>
 800d38e:	1c43      	adds	r3, r0, #1
 800d390:	89a3      	ldrh	r3, [r4, #12]
 800d392:	bf15      	itete	ne
 800d394:	6560      	strne	r0, [r4, #84]	; 0x54
 800d396:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d39a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d39e:	81a3      	strheq	r3, [r4, #12]
 800d3a0:	bf18      	it	ne
 800d3a2:	81a3      	strhne	r3, [r4, #12]
 800d3a4:	bd10      	pop	{r4, pc}

0800d3a6 <__sclose>:
 800d3a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3aa:	f000 b813 	b.w	800d3d4 <_close_r>
	...

0800d3b0 <_write_r>:
 800d3b0:	b538      	push	{r3, r4, r5, lr}
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	4608      	mov	r0, r1
 800d3b6:	4611      	mov	r1, r2
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	4d05      	ldr	r5, [pc, #20]	; (800d3d0 <_write_r+0x20>)
 800d3bc:	602a      	str	r2, [r5, #0]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	f7f4 fe12 	bl	8001fe8 <_write>
 800d3c4:	1c43      	adds	r3, r0, #1
 800d3c6:	d102      	bne.n	800d3ce <_write_r+0x1e>
 800d3c8:	682b      	ldr	r3, [r5, #0]
 800d3ca:	b103      	cbz	r3, 800d3ce <_write_r+0x1e>
 800d3cc:	6023      	str	r3, [r4, #0]
 800d3ce:	bd38      	pop	{r3, r4, r5, pc}
 800d3d0:	2000171c 	.word	0x2000171c

0800d3d4 <_close_r>:
 800d3d4:	b538      	push	{r3, r4, r5, lr}
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	4d05      	ldr	r5, [pc, #20]	; (800d3f0 <_close_r+0x1c>)
 800d3da:	4604      	mov	r4, r0
 800d3dc:	4608      	mov	r0, r1
 800d3de:	602b      	str	r3, [r5, #0]
 800d3e0:	f7f4 fe1e 	bl	8002020 <_close>
 800d3e4:	1c43      	adds	r3, r0, #1
 800d3e6:	d102      	bne.n	800d3ee <_close_r+0x1a>
 800d3e8:	682b      	ldr	r3, [r5, #0]
 800d3ea:	b103      	cbz	r3, 800d3ee <_close_r+0x1a>
 800d3ec:	6023      	str	r3, [r4, #0]
 800d3ee:	bd38      	pop	{r3, r4, r5, pc}
 800d3f0:	2000171c 	.word	0x2000171c

0800d3f4 <_fstat_r>:
 800d3f4:	b538      	push	{r3, r4, r5, lr}
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	4d06      	ldr	r5, [pc, #24]	; (800d414 <_fstat_r+0x20>)
 800d3fa:	4604      	mov	r4, r0
 800d3fc:	4608      	mov	r0, r1
 800d3fe:	4611      	mov	r1, r2
 800d400:	602b      	str	r3, [r5, #0]
 800d402:	f7f4 fe18 	bl	8002036 <_fstat>
 800d406:	1c43      	adds	r3, r0, #1
 800d408:	d102      	bne.n	800d410 <_fstat_r+0x1c>
 800d40a:	682b      	ldr	r3, [r5, #0]
 800d40c:	b103      	cbz	r3, 800d410 <_fstat_r+0x1c>
 800d40e:	6023      	str	r3, [r4, #0]
 800d410:	bd38      	pop	{r3, r4, r5, pc}
 800d412:	bf00      	nop
 800d414:	2000171c 	.word	0x2000171c

0800d418 <_isatty_r>:
 800d418:	b538      	push	{r3, r4, r5, lr}
 800d41a:	2300      	movs	r3, #0
 800d41c:	4d05      	ldr	r5, [pc, #20]	; (800d434 <_isatty_r+0x1c>)
 800d41e:	4604      	mov	r4, r0
 800d420:	4608      	mov	r0, r1
 800d422:	602b      	str	r3, [r5, #0]
 800d424:	f7f4 fe16 	bl	8002054 <_isatty>
 800d428:	1c43      	adds	r3, r0, #1
 800d42a:	d102      	bne.n	800d432 <_isatty_r+0x1a>
 800d42c:	682b      	ldr	r3, [r5, #0]
 800d42e:	b103      	cbz	r3, 800d432 <_isatty_r+0x1a>
 800d430:	6023      	str	r3, [r4, #0]
 800d432:	bd38      	pop	{r3, r4, r5, pc}
 800d434:	2000171c 	.word	0x2000171c

0800d438 <_lseek_r>:
 800d438:	b538      	push	{r3, r4, r5, lr}
 800d43a:	4604      	mov	r4, r0
 800d43c:	4608      	mov	r0, r1
 800d43e:	4611      	mov	r1, r2
 800d440:	2200      	movs	r2, #0
 800d442:	4d05      	ldr	r5, [pc, #20]	; (800d458 <_lseek_r+0x20>)
 800d444:	602a      	str	r2, [r5, #0]
 800d446:	461a      	mov	r2, r3
 800d448:	f7f4 fe0e 	bl	8002068 <_lseek>
 800d44c:	1c43      	adds	r3, r0, #1
 800d44e:	d102      	bne.n	800d456 <_lseek_r+0x1e>
 800d450:	682b      	ldr	r3, [r5, #0]
 800d452:	b103      	cbz	r3, 800d456 <_lseek_r+0x1e>
 800d454:	6023      	str	r3, [r4, #0]
 800d456:	bd38      	pop	{r3, r4, r5, pc}
 800d458:	2000171c 	.word	0x2000171c

0800d45c <_read_r>:
 800d45c:	b538      	push	{r3, r4, r5, lr}
 800d45e:	4604      	mov	r4, r0
 800d460:	4608      	mov	r0, r1
 800d462:	4611      	mov	r1, r2
 800d464:	2200      	movs	r2, #0
 800d466:	4d05      	ldr	r5, [pc, #20]	; (800d47c <_read_r+0x20>)
 800d468:	602a      	str	r2, [r5, #0]
 800d46a:	461a      	mov	r2, r3
 800d46c:	f7f4 fd9f 	bl	8001fae <_read>
 800d470:	1c43      	adds	r3, r0, #1
 800d472:	d102      	bne.n	800d47a <_read_r+0x1e>
 800d474:	682b      	ldr	r3, [r5, #0]
 800d476:	b103      	cbz	r3, 800d47a <_read_r+0x1e>
 800d478:	6023      	str	r3, [r4, #0]
 800d47a:	bd38      	pop	{r3, r4, r5, pc}
 800d47c:	2000171c 	.word	0x2000171c

0800d480 <_init>:
 800d480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d482:	bf00      	nop
 800d484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d486:	bc08      	pop	{r3}
 800d488:	469e      	mov	lr, r3
 800d48a:	4770      	bx	lr

0800d48c <_fini>:
 800d48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d48e:	bf00      	nop
 800d490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d492:	bc08      	pop	{r3}
 800d494:	469e      	mov	lr, r3
 800d496:	4770      	bx	lr
